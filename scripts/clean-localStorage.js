#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∫–æ–¥–∞ –æ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è localStorage
 * –ó–∞–º–µ–Ω—è–µ—Ç localStorage –Ω–∞ API –≤—ã–∑–æ–≤—ã
 */

const fs = require('fs');
const path = require('path');

// –§–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å –æ—Ç localStorage
const filesToClean = [
    'src/contexts/AuthContext.tsx',
    'src/pages/auth/Login.tsx',
    'src/pages/auth/Register.tsx',
    'src/pages/admin/Dashboard.tsx'
];

// –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã
const replacements = [
    {
        pattern: /localStorage\.getItem\("users"\)/g,
        replacement: 'await api.getUsers()'
    },
    {
        pattern: /localStorage\.setItem\("users", JSON\.stringify\(([^)]+)\)\)/g,
        replacement: 'await api.createUser($1)'
    },
    {
        pattern: /localStorage\.getItem\("schools"\)/g,
        replacement: 'await api.getSchools()'
    },
    {
        pattern: /localStorage\.setItem\("schools", JSON\.stringify\(([^)]+)\)\)/g,
        replacement: 'await api.updateSchools($1)'
    },
    {
        pattern: /localStorage\.getItem\("services"\)/g,
        replacement: 'await api.getServices()'
    },
    {
        pattern: /localStorage\.setItem\("services", JSON\.stringify\(([^)]+)\)\)/g,
        replacement: 'await api.updateServices($1)'
    },
    {
        pattern: /localStorage\.getItem\("masterClasses"\)/g,
        replacement: 'await api.getMasterClasses()'
    },
    {
        pattern: /localStorage\.setItem\("masterClasses", JSON\.stringify\(([^)]+)\)\)/g,
        replacement: 'await api.updateMasterClasses($1)'
    },
    {
        pattern: /localStorage\.getItem\("currentUser"\)/g,
        replacement: 'await api.getCurrentUser()'
    },
    {
        pattern: /localStorage\.setItem\("currentUser", JSON\.stringify\(([^)]+)\)\)/g,
        replacement: 'await api.setCurrentUser($1)'
    },
    {
        pattern: /localStorage\.removeItem\("currentUser"\)/g,
        replacement: 'await api.logout()'
    }
];

function cleanFile(filePath) {
    try {
        const fullPath = path.join(process.cwd(), filePath);

        if (!fs.existsSync(fullPath)) {
            console.log(`‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
            return;
        }

        let content = fs.readFileSync(fullPath, 'utf8');
        let modified = false;

        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∑–∞–º–µ–Ω—ã
        replacements.forEach(({ pattern, replacement }) => {
            if (pattern.test(content)) {
                content = content.replace(pattern, replacement);
                modified = true;
            }
        });

        if (modified) {
            fs.writeFileSync(fullPath, content, 'utf8');
            console.log(`‚úÖ –û—á–∏—â–µ–Ω —Ñ–∞–π–ª: ${filePath}`);
        } else {
            console.log(`‚ÑπÔ∏è  –§–∞–π–ª –Ω–µ —Ç—Ä–µ–±—É–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π: ${filePath}`);
        }

    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞ ${filePath}:`, error.message);
    }
}

function main() {
    console.log('üßπ –ù–∞—á–∏–Ω–∞—é –æ—á–∏—Å—Ç–∫—É –∫–æ–¥–∞ –æ—Ç localStorage...\n');

    filesToClean.forEach(cleanFile);

    console.log('\nüìù –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç–µ:');
    console.log('1. –°–æ–∑–¥–∞–π—Ç–µ API –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±—ç–∫–µ–Ω–¥–æ–º');
    console.log('2. –ó–∞–º–µ–Ω–∏—Ç–µ –ø—Ä—è–º—ã–µ –≤—ã–∑–æ–≤—ã localStorage –Ω–∞ API –≤—ã–∑–æ–≤—ã');
    console.log('3. –û–±–Ω–æ–≤–∏—Ç–µ AuthContext –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JWT —Ç–æ–∫–µ–Ω–∞–º–∏');
    console.log('4. –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –¥–ª—è API –∑–∞–ø—Ä–æ—Å–æ–≤');
    console.log('5. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–æ–≤—ã–º API');

    console.log('\nüîó API endpoints:');
    console.log('- POST /api/auth/login');
    console.log('- POST /api/auth/register');
    console.log('- GET /api/schools');
    console.log('- GET /api/services');
    console.log('- GET /api/master-classes');

    console.log('\n‚úÖ –û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

if (require.main === module) {
    main();
}

module.exports = { cleanFile, replacements }; 