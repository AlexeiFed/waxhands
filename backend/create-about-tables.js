/**
 * –ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü about –≤ –ë–î
 */

const { Pool } = require('pg');
require('dotenv').config();

const pool = new Pool({
    host: process.env.DB_HOST || 'localhost',
    port: parseInt(process.env.DB_PORT || '5432'),
    database: process.env.DB_NAME || 'waxhands',
    user: process.env.DB_USER || 'postgres',
    password: process.env.DB_PASSWORD,
    ssl: process.env.NODE_ENV === 'production' ? { rejectUnauthorized: false } : false,
});

async function createAboutTables() {
    try {
        console.log('üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü about...');

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É about
        await pool.query(`
            CREATE TABLE IF NOT EXISTS about (
                id SERIAL PRIMARY KEY,
                title VARCHAR(255) NOT NULL DEFAULT '–û –Ω–∞—Å',
                subtitle VARCHAR(500),
                description TEXT,
                mission TEXT,
                vision TEXT,
                values TEXT,
                contact_info TEXT,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ about —Å–æ–∑–¥–∞–Ω–∞');

        // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É about_media
        await pool.query(`
            CREATE TABLE IF NOT EXISTS about_media (
                id SERIAL PRIMARY KEY,
                filename VARCHAR(255) NOT NULL,
                original_name VARCHAR(255) NOT NULL,
                type VARCHAR(10) CHECK (type IN ('image', 'video')) NOT NULL,
                title VARCHAR(255),
                description TEXT,
                order_index INTEGER DEFAULT 0,
                file_path VARCHAR(500) NOT NULL,
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        `);
        console.log('‚úÖ –¢–∞–±–ª–∏—Ü–∞ about_media —Å–æ–∑–¥–∞–Ω–∞');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –±–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        const { rows: contentRows } = await pool.query('SELECT COUNT(*) as count FROM about');
        if (parseInt(contentRows[0].count) === 0) {
            await pool.query(`
                INSERT INTO about (title, subtitle, description, mission, vision, values, contact_info) 
                VALUES (
                    '–û –Ω–∞—Å',
                    '–°—Ç—É–¥–∏—è –≤–æ—Å–∫–æ–≤—ã—Ö —Ä—É–∫ Wax Hands',
                    '–ú—ã —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—É–≤–µ–Ω–∏—Ä—ã –∏–∑ –≤–æ—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç –≤–∞—à–∏ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ –¥–æ–ª–≥–∏–µ –≥–æ–¥—ã. –ù–∞—à–∞ —Å—Ç—É–¥–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–æ—Å–∫–æ–≤—ã—Ö —Å–ª–µ–ø–∫–æ–≤ —Ä—É–∫, –Ω–æ–≥ –∏ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç–µ–π —Ç–µ–ª–∞.',
                    '–ù–∞—à–∞ –º–∏—Å—Å–∏—è - –ø–æ–º–æ—á—å –ª—é–¥—è–º —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã –∂–∏–∑–Ω–∏ –≤ –≤–∏–¥–µ –∫—Ä–∞—Å–∏–≤—ã—Ö –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω—ã—Ö —Å—É–≤–µ–Ω–∏—Ä–æ–≤.',
                    '–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è —Å—Ç–∞—Ç—å –≤–µ–¥—É—â–µ–π —Å—Ç—É–¥–∏–µ–π –≤–æ—Å–∫–æ–≤—ã—Ö —Ä—É–∫ –≤ –†–æ—Å—Å–∏–∏, –∏–∑–≤–µ—Å—Ç–Ω–æ–π –∫–∞—á–µ—Å—Ç–≤–æ–º, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∏ –≤–Ω–∏–º–∞–Ω–∏–µ–º –∫ –¥–µ—Ç–∞–ª—è–º.',
                    '–ö–∞—á–µ—Å—Ç–≤–æ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å, –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É.',
                    '–¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\nEmail: info@waxhands.ru\n–ê–¥—Ä–µ—Å: –≥. –ú–æ—Å–∫–≤–∞, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. 1'
                )
            `);
            console.log('‚úÖ –ë–∞–∑–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã
        const { rows: mediaRows } = await pool.query('SELECT COUNT(*) as count FROM about_media');
        if (parseInt(mediaRows[0].count) === 0) {
            const baseMedia = [
                {
                    filename: 'demo-video-1.mp4',
                    original_name: 'demo-video-1.mp4',
                    type: 'video',
                    title: '–î–µ–º–æ –≤–∏–¥–µ–æ 1',
                    description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ —Ä–∞–±–æ—Ç—ã —Å—Ç—É–¥–∏–∏',
                    order_index: 1,
                    file_path: '/src/assets/about/demo-video-1.mp4'
                },
                {
                    filename: 'demo-video-2.mp4',
                    original_name: 'demo-video-2.mp4',
                    type: 'video',
                    title: '–î–µ–º–æ –≤–∏–¥–µ–æ 2',
                    description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–æ–µ –≤–∏–¥–µ–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
                    order_index: 2,
                    file_path: '/src/assets/about/demo-video-2.mp4'
                }
            ];

            for (const media of baseMedia) {
                await pool.query(
                    'INSERT INTO about_media (filename, original_name, type, title, description, order_index, file_path) VALUES ($1, $2, $3, $4, $5, $6, $7)',
                    [
                        media.filename,
                        media.original_name,
                        media.type,
                        media.title,
                        media.description,
                        media.order_index,
                        media.file_path
                    ]
                );
            }
            console.log('‚úÖ –ë–∞–∑–æ–≤—ã–µ –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã');
        }

        console.log('üéâ –¢–∞–±–ª–∏—Ü—ã about —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!');

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü about:', error);
    } finally {
        await pool.end();
    }
}

createAboutTables();
