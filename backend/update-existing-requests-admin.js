/**
 * @file: backend/update-existing-requests-admin.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫ —Å admin_id
 * @dependencies: database/connection.ts
 * @created: 2024-12-19
 */

import { db } from './src/database/connection';

async function updateExistingRequests() {
    try {
        console.log('üîç –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞—è–≤–æ–∫...');

        // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞
        const adminQuery = `
            SELECT id FROM users 
            WHERE role = 'admin' 
            ORDER BY created_at ASC 
            LIMIT 1
        `;

        const adminResult = await db.query(adminQuery);

        if (adminResult.rows.length === 0) {
            console.error('‚ùå –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ');
            return;
        }

        const adminId = adminResult.rows[0].id;
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω —Å ID:', adminId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏ –±–µ–∑ admin_id
        const updateQuery = `
            UPDATE workshop_requests 
            SET admin_id = $1, updated_at = CURRENT_TIMESTAMP
            WHERE admin_id IS NULL
        `;

        const updateResult = await db.query(updateQuery, [adminId]);
        console.log('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ –∑–∞—è–≤–æ–∫:', updateResult.rowCount);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const checkQuery = `
            SELECT COUNT(*) as total,
                   COUNT(admin_id) as with_admin
            FROM workshop_requests
        `;

        const checkResult = await db.query(checkQuery);
        const stats = checkResult.rows[0];

        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞—è–≤–æ–∫:');
        console.log('- –í—Å–µ–≥–æ –∑–∞—è–≤–æ–∫:', stats.total);
        console.log('- –° –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∞–¥–º–∏–Ω–æ–º:', stats.with_admin);

        if (stats.total === stats.with_admin) {
            console.log('üéâ –í—Å–µ –∑–∞—è–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!');
        } else {
            console.warn('‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∑–∞—è–≤–∫–∏ –æ—Å—Ç–∞–ª–∏—Å—å –±–µ–∑ –∞–¥–º–∏–Ω–∞');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error);
    } finally {
        process.exit(0);
    }
}

updateExistingRequests();
