/**
 * @file: backend/src/websocket-server.ts
 * @description: –¶–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Å–µ—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π —Å–∏—Å—Ç–µ–º—ã
 * @dependencies: ws, database/connection, types
 * @created: 2024-12-19
 */

import ws from 'ws';
import { Server } from 'http';
import { v4 as uuidv4 } from 'uuid';

interface ClientConnection {
    id: string;
    ws: ws.WebSocket;
    userId?: string;
    userRole?: 'admin' | 'user';
    subscriptions: Set<string>;
    isAlive: boolean;
    lastPing: number;
}

interface SystemEvent {
    type: 'chat_message' | 'chat_status_change' | 'chat_list_update' | 'new_chat' | 'unread_count_update' | 'invoice_update' | 'master_class_update' | 'user_registration' | 'system_notification' | 'workshop_request_update' | 'workshop_request_created' | 'workshop_request_deleted' | 'workshop_request_status_change' | 'about_content_update' | 'about_media_update' | 'about_media_added' | 'about_media_deleted';
    data: Record<string, unknown>;
    timestamp: number;
    targetUsers?: string[];
    targetRoles?: string[];
}

export class WebSocketManager {
    private wss: ws.WebSocketServer;
    private clients: Map<string, ClientConnection> = new Map();
    private eventQueue: SystemEvent[] = [];
    private isProcessingEvents = false;

    constructor(server: Server) {
        this.wss = new ws.WebSocketServer({ server, path: '/api/chat/ws' });
        this.setupWebSocketServer();
        this.startHeartbeat();
        this.startEventProcessor();
    }

    private setupWebSocketServer() {
        this.wss.on('connection', (ws: ws.WebSocket, request: { url?: string; headers: { host?: string } }) => {
            const clientId = uuidv4();
            const url = new URL(request.url || '', `http://${request.headers.host}`);
            const userId = url.searchParams.get('userId');
            const isAdmin = url.searchParams.get('isAdmin') === 'true';

            const client: ClientConnection = {
                id: clientId,
                ws,
                ...(userId && { userId }),
                userRole: isAdmin ? 'admin' : 'user',
                subscriptions: new Set(),
                isAlive: true,
                lastPing: Date.now()
            };

            this.clients.set(clientId, client);
            console.log(`üîå WebSocket –∫–ª–∏–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω: ${clientId} (${isAdmin ? 'admin' : 'user'})`);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if (userId) {
                client.subscriptions.add(`user:${userId}`);
                if (isAdmin) {
                    client.subscriptions.add('admin:all');
                    client.subscriptions.add('system:all');
                    // –ê–¥–º–∏–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ —á–∞—Ç—ã
                    client.subscriptions.add('chat:all');
                    // –ê–¥–º–∏–Ω –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –Ω–æ–≤—ã–µ —á–∞—Ç—ã
                    client.subscriptions.add('new_chat');
                    // –ê–¥–º–∏–Ω –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ –∑–∞—è–≤–∫–∏
                    client.subscriptions.add('admin:workshop_requests');
                    client.subscriptions.add('workshop_requests:all');
                } else {
                    // –†–æ–¥–∏—Ç–µ–ª—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ —Å–≤–æ–∏ —á–∞—Ç—ã
                    // –≠—Ç–æ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ subscribe —Å–æ–æ–±—â–µ–Ω–∏—è
                    // –ù–æ —Ç–∞–∫–∂–µ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    client.subscriptions.add('user:notifications');
                    // –†–æ–¥–∏—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ "–û –Ω–∞—Å"
                    client.subscriptions.add('about:content');
                    client.subscriptions.add('about:media');
                }
            }

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞
            ws.on('message', (data: ws.RawData) => {
                try {
                    const message = JSON.parse(data.toString());
                    this.handleClientMessage(clientId, message);
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞:', error);
                }
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            ws.on('close', (code: number, reason: Buffer) => {
                this.removeClient(clientId);
            });

            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
            ws.on('error', (error: Error) => {
                console.error(`‚ùå WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, error);
                this.removeClient(clientId);
            });

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            ws.send(JSON.stringify({
                type: 'connection_established',
                data: { clientId, userId, userRole: client.userRole },
                timestamp: Date.now()
            }));
        });
    }

    private handleClientMessage(clientId: string, message: Record<string, unknown>) {
        const client = this.clients.get(clientId);
        if (!client) return;

        switch (message.type) {
            case 'ping':
                client.isAlive = true;
                client.lastPing = Date.now();
                client.ws.send(JSON.stringify({ type: 'pong', timestamp: Date.now() }));
                break;

            case 'subscribe':
                if (message.channels && Array.isArray(message.channels)) {
                    message.channels.forEach((channel: string) => {
                        client.subscriptions.add(channel);
                    });
                    console.log(`üì° –ö–ª–∏–µ–Ω—Ç ${clientId} –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã:`, message.channels);
                }
                break;

            case 'unsubscribe':
                if (message.channels && Array.isArray(message.channels)) {
                    message.channels.forEach((channel: string) => {
                        client.subscriptions.delete(channel);
                    });
                    console.log(`üì° –ö–ª–∏–µ–Ω—Ç ${clientId} –æ—Ç–ø–∏—Å–∞–ª—Å—è –æ—Ç –∫–∞–Ω–∞–ª–æ–≤:`, message.channels);
                }
                break;

            default:
                console.log(`üì® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ ${clientId}:`, message.type);
        }
    }

    private removeClient(clientId: string) {
        const client = this.clients.get(clientId);
        if (client) {
            client.ws.close();
            this.clients.delete(clientId);
            console.log(`üîå WebSocket –∫–ª–∏–µ–Ω—Ç –æ—Ç–∫–ª—é—á–µ–Ω: ${clientId}`);
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    public broadcastEvent(event: SystemEvent) {
        this.eventQueue.push(event);

        if (!this.isProcessingEvents) {
            this.processEventQueue();
        }
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    public sendToUsers(userIds: string[], event: SystemEvent) {
        this.clients.forEach((client) => {
            if (client.userId && userIds.includes(client.userId)) {
                this.sendEventToClient(client, event);
            }
        });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ —Ä–æ–ª—è–º
    public sendToRoles(roles: string[], event: SystemEvent) {
        this.clients.forEach((client) => {
            if (client.userRole && roles.includes(client.userRole)) {
                this.sendEventToClient(client, event);
            }
        });
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ –ø–æ–¥–ø–∏—Å–∫–∞–º
    public sendToSubscribers(channels: string[], event: SystemEvent) {
        this.clients.forEach((client) => {
            const hasSubscription = channels.some(channel => client.subscriptions.has(channel));
            if (hasSubscription) {
                this.sendEventToClient(client, event);
            }
        });
    }

    private sendEventToClient(client: ClientConnection, event: SystemEvent) {
        if (client.ws.readyState === 1) { // WebSocket.OPEN = 1
            try {
                client.ws.send(JSON.stringify(event));
            } catch (error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç—É ${client.id}:`, error);
                this.removeClient(client.id);
            }
        }
    }

    private async processEventQueue() {
        if (this.isProcessingEvents || this.eventQueue.length === 0) return;

        this.isProcessingEvents = true;

        while (this.eventQueue.length > 0) {
            const event = this.eventQueue.shift();
            if (!event) continue;

            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–ª–µ–≤—ã—Ö –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            if (event.targetUsers && event.targetUsers.length > 0) {
                this.sendToUsers(event.targetUsers, event);
            } else if (event.targetRoles && event.targetRoles.length > 0) {
                this.sendToRoles(event.targetRoles, event);
            } else {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∫–∞–Ω–∞–ª–æ–≤
                const channels = this.getChannelsForEvent(event);
                this.sendToSubscribers(channels, event);
            }
        }

        this.isProcessingEvents = false;
    }

    private getChannelsForEvent(event: SystemEvent): string[] {
        switch (event.type) {
            case 'chat_message':
                return [`chat:${event.data.chatId}`];
            case 'chat_status_change':
                return [`chat:${event.data.chatId}`, 'admin:all'];
            case 'invoice_update':
                return [`user:${event.data.userId}`, 'admin:all'];
            case 'master_class_update':
                return ['admin:all', 'system:all'];
            case 'user_registration':
                return ['admin:all'];
            case 'system_notification':
                return ['system:all'];
            default:
                return ['system:all'];
        }
    }

    // Heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    private startHeartbeat() {
        setInterval(() => {
            const now = Date.now();
            this.clients.forEach((client) => {
                if (now - client.lastPing > 60000) { // 60 —Å–µ–∫—É–Ω–¥ –±–µ–∑ ping
                    client.isAlive = false;
                    this.removeClient(client.id);
                }
            });
        }, 30000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π —Å–∏—Å—Ç–µ–º—ã
    private startEventProcessor() {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
        this.setupChatEventHandlers();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å—á–µ—Ç–æ–≤
        this.setupInvoiceEventHandlers();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
        this.setupMasterClassEventHandlers();
    }

    private setupChatEventHandlers() {
        // –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞
        console.log('üì° –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —á–∞—Ç–∞');
    }

    private setupInvoiceEventHandlers() {
        // –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å—á–µ—Ç–æ–≤
        console.log('üì° –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π —Å—á–µ—Ç–æ–≤');
    }

    private setupMasterClassEventHandlers() {
        // –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
        console.log('üì° –ù–∞—Å—Ç—Ä–æ–µ–Ω—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤');
    }

    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
    public notifyChatMessage(chatId: string, message: Record<string, unknown>, senderId: string, senderType: 'user' | 'admin') {
        console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞ ${chatId} –æ—Ç ${senderType} ${senderId}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
        this.clients.forEach((client) => {
            let shouldReceive = false;

            if (client.userRole === 'admin') {
                // –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –í–°–ï —Å–æ–æ–±—â–µ–Ω–∏—è –≤–æ –í–°–ï–• —á–∞—Ç–∞—Ö
                shouldReceive = true;
                console.log(`üì® –ê–¥–º–∏–Ω ${client.id} –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ`);
            } else if (client.userRole === 'user') {
                // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ —Å–≤–æ—ë–º —á–∞—Ç–µ
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç —á–∞—Ç
                if (client.subscriptions.has(`chat:${chatId}`)) {
                    shouldReceive = true;
                    console.log(`üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${client.id} –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —á–∞—Ç ${chatId}`);
                } else {
                    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç, –Ω–æ —ç—Ç–æ –µ–≥–æ —á–∞—Ç
                    // —Ç–æ –æ–Ω –¥–æ–ª–∂–µ–Ω –ø–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
                    if (client.subscriptions.has(`user:${client.userId}`)) {
                        shouldReceive = true;
                        console.log(`üì® –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${client.id} –ø–æ–ª—É—á–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞ ${chatId}`);
                    } else {
                        console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${client.id} –ù–ï –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ —á–∞—Ç ${chatId}`);
                    }
                }
            }

            if (shouldReceive) {
                this.sendEventToClient(client, {
                    type: 'chat_message',
                    data: { chatId, message, senderId, senderType },
                    timestamp: Date.now()
                });
            }
        });

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
        this.clients.forEach((client) => {
            if (client.userRole === 'admin' && client.subscriptions.has('admin:all')) {
                this.sendEventToClient(client, {
                    type: 'chat_list_update',
                    data: { chatId, action: 'message_sent' },
                    timestamp: Date.now()
                });
            }
        });
    }

    public notifyNewChat(chatId: string, userId: string, adminId: string, firstMessage: string) {
        console.log(`üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ ${chatId} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId} –¥–ª—è –∞–¥–º–∏–Ω–∞ ${adminId}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∞–º
        this.clients.forEach((client) => {
            if (client.userRole === 'admin' && client.subscriptions.has('admin:all')) {
                this.sendEventToClient(client, {
                    type: 'new_chat',
                    data: { chatId, userId, adminId, firstMessage },
                    timestamp: Date.now()
                });
                console.log(`üì® –ê–¥–º–∏–Ω ${client.id} –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ`);
            }
        });
    }

    public notifyUnreadCountUpdate(chatId: string) {
        console.log(`üì° –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –¥–ª—è —á–∞—Ç–∞ ${chatId}`);

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º —á–∞—Ç–∞
        this.clients.forEach((client) => {
            if (client.subscriptions.has(`chat:${chatId}`) || client.subscriptions.has('admin:all')) {
                this.sendEventToClient(client, {
                    type: 'unread_count_update',
                    data: { chatId },
                    timestamp: Date.now()
                });
                console.log(`üì® –ö–ª–∏–µ–Ω—Ç ${client.id} –ø–æ–ª—É—á–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö`);
            }
        });
    }

    public notifyChatStatusChange(chatId: string, status: string, adminId?: string) {
        this.broadcastEvent({
            type: 'chat_status_change',
            data: { chatId, status, adminId },
            timestamp: Date.now()
        });
    }

    public notifyInvoiceUpdate(invoiceId: string, userId: string, status: string) {
        this.broadcastEvent({
            type: 'invoice_update',
            data: { invoiceId, userId, status },
            timestamp: Date.now(),
            targetUsers: [userId]
        });
    }

    public notifyMasterClassUpdate(masterClassId: string, action: string) {
        this.broadcastEvent({
            type: 'master_class_update',
            data: { masterClassId, action },
            timestamp: Date.now()
        });
    }

    public notifyWorkshopRequestUpdate(requestId: string, action: string, data?: Record<string, unknown>) {
        this.broadcastEvent({
            type: 'workshop_request_update',
            data: { requestId, action, ...data },
            timestamp: Date.now()
        });
    }

    public notifyWorkshopRequestStatusChange(requestId: string, newStatus: string, adminNotes?: string) {
        this.broadcastEvent({
            type: 'workshop_request_status_change',
            data: { requestId, newStatus, adminNotes },
            timestamp: Date.now()
        });
    }

    public notifyWorkshopRequestCreated(requestId: string, requestData: Record<string, unknown>) {
        this.broadcastEvent({
            type: 'workshop_request_created',
            data: { requestId, ...requestData },
            timestamp: Date.now()
        });
    }

    public notifyUserRegistration(userId: string, userRole: string) {
        this.broadcastEvent({
            type: 'user_registration',
            data: { userId, userRole },
            timestamp: Date.now()
        });
    }

    public notifySystemNotification(message: string, level: 'info' | 'warning' | 'error' = 'info') {
        this.broadcastEvent({
            type: 'system_notification',
            data: { message, level },
            timestamp: Date.now()
        });
    }

    // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ about
    public notifyAboutContentUpdate(contentId: number, action: string) {
        this.broadcastEvent({
            type: 'about_content_update',
            data: { contentId, action },
            timestamp: Date.now(),
            targetRoles: ['user'] // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        });
    }

    public notifyAboutMediaUpdate(mediaId: number, action: string, mediaData?: Record<string, unknown>) {
        this.broadcastEvent({
            type: 'about_media_update',
            data: { mediaId, action, mediaData },
            timestamp: Date.now(),
            targetRoles: ['user'] // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        });
    }

    public notifyAboutMediaAdded(mediaData: Record<string, unknown>) {
        this.broadcastEvent({
            type: 'about_media_added',
            data: mediaData,
            timestamp: Date.now(),
            targetRoles: ['user'] // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        });
    }

    public notifyAboutMediaDeleted(mediaId: number) {
        this.broadcastEvent({
            type: 'about_media_deleted',
            data: { mediaId },
            timestamp: Date.now(),
            targetRoles: ['user'] // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        });
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
    public getStats() {
        const totalClients = this.clients.size;
        const adminClients = Array.from(this.clients.values()).filter(c => c.userRole === 'admin').length;
        const userClients = totalClients - adminClients;
        const activeConnections = Array.from(this.clients.values()).filter(c => c.isAlive).length;

        return {
            totalClients,
            adminClients,
            userClients,
            activeConnections,
            eventQueueLength: this.eventQueue.length
        };
    }

    // –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤
    public cleanup() {
        this.clients.forEach((client) => {
            client.ws.close();
        });
        this.clients.clear();
        this.eventQueue = [];
        this.wss.close();
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
export let wsManager: WebSocketManager;

export const initializeWebSocketManager = (server: Server) => {
    wsManager = new WebSocketManager(server);
    console.log('üöÄ WebSocket —Å–µ—Ä–≤–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    return wsManager;
};
