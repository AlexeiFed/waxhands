/**
 * @file: workshopRegistrations.ts
 * @description: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
 * @dependencies: database, types
 * @created: 2024-12-19
 */

import { Request, Response } from 'express';
import pool from '../database/connection.js';
import { CreateWorkshopRegistrationRequest, WorkshopRegistration } from '../types/index.js';

// –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
export const getUserWorkshopRegistrations = async (req: Request, res: Response): Promise<void> => {
    try {
        const { userId } = req.params;

        const result = await pool.query(`
            SELECT wr.*, mce.date as "workshopDate", mce.time as "workshopTime", 
                   s.name as "schoolName", s.address as "schoolAddress", mce.class_group as "classGroup",
                   srv.name as "serviceName"
            FROM workshop_registrations wr
            JOIN master_class_events mce ON wr.workshop_id = mce.id
            LEFT JOIN schools s ON mce.school_id = s.id
            LEFT JOIN services srv ON mce.service_id = srv.id
            WHERE wr.user_id = $1
            ORDER BY mce.date ASC
        `, [userId]);

        res.json({
            success: true,
            data: result.rows
        });
    } catch (error) {
        console.error('Error getting user workshop registrations:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
};

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
export const getWorkshopRegistrations = async (req: Request, res: Response) => {
    try {
        const { workshopId } = req.params;

        const result = await pool.query(`
            SELECT wr.*, u.name as "userName", u.class as "userClass", u.class_group as "userClassGroup", u.school_name as "schoolName"
            FROM workshop_registrations wr
            JOIN users u ON wr.user_id = u.id
            WHERE wr.workshop_id = $1
            ORDER BY wr.created_at DESC
        `, [workshopId]);

        res.json({
            success: true,
            data: result.rows
        });
    } catch (error) {
        console.error('Error getting workshop registrations:', error);
        res.status(500).json({
            success: false,
            error: 'Internal server error'
        });
    }
};

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
export const createWorkshopRegistration = async (req: Request, res: Response) => {
    try {
        console.log('=== –ù–ê–ß–ê–õ–û createWorkshopRegistration ===');
        console.log('Request body:', JSON.stringify(req.body, null, 2));
        console.log('Request headers:', req.headers);

        const { workshopId, userId, style, options, totalPrice }: CreateWorkshopRegistrationRequest = req.body;

        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:', { workshopId, userId, style, options, totalPrice });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!workshopId || !userId || !style || !options || typeof totalPrice !== 'number') {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { workshopId, userId, style, options, totalPrice });
            return res.status(400).json({
                error: 'Invalid input data',
                details: {
                    workshopId: !!workshopId,
                    userId: !!userId,
                    style: !!style,
                    options: Array.isArray(options),
                    totalPrice: typeof totalPrice
                }
            });
        }

        console.log('üîå –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        console.log('üë§ –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ...');
        const userResult = await pool.query('SELECT name, class, class_group, school_name FROM users WHERE id = $1', [userId]);
        console.log('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:', userResult.rows[0]);
        if (userResult.rows.length === 0) {
            console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', userId);
            return res.status(404).json({ error: 'User not found' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
        const existingResult = await pool.query(
            'SELECT id FROM workshop_registrations WHERE workshop_id = $1 AND user_id = $2',
            [workshopId, userId]
        );

        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π –≤ workshop_registrations:', existingResult.rows);

        if (existingResult.rows.length > 0) {
            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –≤ workshop_registrations:', userId);
            return res.status(400).json({ error: 'User already registered for this workshop' });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ participants –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
        const workshopResult = await pool.query(
            'SELECT participants FROM master_class_events WHERE id = $1',
            [workshopId]
        );

        if (workshopResult.rows.length > 0) {
            const participants = workshopResult.rows[0].participants || [];
            console.log('–¢–µ–∫—É—â–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:', participants);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–æ–ª—é childId, –∫–æ—Ç–æ—Ä–æ–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ addParticipantToMasterClass
            const isAlreadyParticipant = participants.some((p: Record<string, unknown>) => p.childId === userId);

            if (isAlreadyParticipant) {
                console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:', userId);
                return res.status(400).json({ error: 'User already registered for this workshop' });
            }

            console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ participants, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é');
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        console.log('–°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ workshop_registrations...');
        const result = await pool.query(`
            INSERT INTO workshop_registrations (
                workshop_id, user_id, style, options, total_price, status
            ) VALUES ($1, $2, $3, $4, $5, 'pending')
            RETURNING *
        `, [workshopId, userId, style, JSON.stringify(options), totalPrice]);
        console.log('–ó–∞–ø–∏—Å—å –≤ workshop_registrations —Å–æ–∑–¥–∞–Ω–∞:', result.rows[0]);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ participants
        const user = userResult.rows[0];

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–ª—è—Ö –∏ –æ–ø—Ü–∏—è—Ö –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        // –°—Ç–∏–ª–∏ –∏ –æ–ø—Ü–∏–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ JSONB –ø–æ–ª—è—Ö —Ç–∞–±–ª–∏—Ü—ã services
        let styleName = style; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        let optionsNames: string[] = [];

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∏–ª–µ–π –∏ –æ–ø—Ü–∏–π
            const serviceResult = await pool.query(`
                SELECT s.styles, s.options 
                FROM services s 
                JOIN master_class_events mce ON s.id = mce.service_id 
                WHERE mce.id = $1
            `, [workshopId]);

            if (serviceResult.rows.length > 0) {
                const service = serviceResult.rows[0];
                const serviceStyles = service.styles || [];
                const serviceOptions = service.options || [];

                // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è –ø–æ ID
                const foundStyle = serviceStyles.find((s: { id: string; name: string }) => s.id === style);
                if (foundStyle) {
                    styleName = foundStyle.name || style;
                }

                // –ò—â–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ü–∏–π –ø–æ ID
                optionsNames = options
                    .map(optionId => {
                        const foundOption = serviceOptions.find((o: { id: string; name: string }) => o.id === optionId);
                        return foundOption?.name || optionId;
                    })
                    .filter(Boolean);
            }
        } catch (error) {
            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π/–æ–ø—Ü–∏–π –∏–∑ —Å–µ—Ä–≤–∏—Å–∞:', error);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É —Å –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –¥–µ—Ç—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–æ–¥–∏–Ω–æ—á–Ω–∞—è) –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∞—è (–≥—Ä—É–ø–ø–æ–≤–∞—è)
        // –î–ª—è –¥–µ—Ç—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ invoice controller
        // –î–ª—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∑–¥–µ—Å—å

        // –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ —ç—Ç–æ –æ–¥–∏–Ω–æ—á–Ω–∞—è –¥–µ—Ç—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞
        console.log('–û–¥–∏–Ω–æ—á–Ω–∞—è –¥–µ—Ç—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - —É—á–∞—Å—Ç–Ω–∏–∫ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞');

        // –î–ª—è –æ–¥–∏–Ω–æ—á–Ω–æ–π –¥–µ—Ç—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –≤ invoice controller
        // –î–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è –∑–¥–µ—Å—å
        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á–µ—Ç–∞ –¥–ª—è –¥–µ—Ç—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏');

        // –î–û–ë–ê–í–õ–Ø–ï–ú –£–ß–ê–°–¢–ù–ò–ö–ê –í –ú–ê–°–¢–ï–†-–ö–õ–ê–°–° –°–†–ê–ó–£ –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò
        console.log('üîç –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ—Ç—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');

        try {
            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
            const workshopResult = await pool.query(
                'SELECT participants, statistics FROM master_class_events WHERE id = $1',
                [workshopId]
            );

            if (workshopResult.rows.length > 0) {
                const workshop = workshopResult.rows[0];
                const currentParticipants = workshop.participants || [];
                const currentStats = workshop.statistics || {};

                // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞
                const participant = {
                    id: result.rows[0].id, // ID —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
                    childId: userId,
                    childName: user.name,
                    parentId: userId, // –í –¥–µ—Ç—Å–∫–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ parentId = childId
                    parentName: user.name,
                    selectedStyles: [styleName], // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç–∏–ª—è
                    selectedOptions: optionsNames, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –æ–ø—Ü–∏–π
                    totalAmount: totalPrice,
                    isPaid: false,
                    hasReceived: false,
                    paymentMethod: undefined,
                    paymentDate: undefined,
                    notes: `–î–µ—Ç—Å–∫–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. ID: ${result.rows[0].id}. –£—á–∞—Å—Ç–Ω–∏–∫: ${userId}`
                };

                console.log('üîç –î–æ–±–∞–≤–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞:', JSON.stringify(participant));

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ participants –≤ master_class_events
                const updateParticipantsResult = await pool.query(`
                    UPDATE master_class_events 
                    SET participants = COALESCE(participants, '[]'::jsonb) || $1::jsonb,
                        updated_at = CURRENT_TIMESTAMP
                    WHERE id = $2
                    RETURNING id, participants
                `, [JSON.stringify([participant]), workshopId]);

                if (updateParticipantsResult.rows.length === 0) {
                    console.error('‚ùå –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —Å ID –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ participants:', workshopId);
                } else {
                    console.log('‚úÖ –£—á–∞—Å—Ç–Ω–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:', {
                        masterClassId: workshopId,
                        newParticipants: updateParticipantsResult.rows[0].participants
                    });

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    const newStylesStats = { ...(currentStats.stylesStats || {}) };
                    const newOptionsStats = { ...(currentStats.optionsStats || {}) };

                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                    [styleName].forEach((styleNameStr: string) => {
                        newStylesStats[styleNameStr] = (newStylesStats[styleNameStr] || 0) + 1;
                    });

                    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ–ø—Ü–∏–∏ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º
                    optionsNames.forEach((optionName: string) => {
                        newOptionsStats[optionName] = (newOptionsStats[optionName] || 0) + 1;
                    });

                    const updateStatsResult = await pool.query(`
                        UPDATE master_class_events 
                        SET statistics = jsonb_set(
                            jsonb_set(
                                jsonb_set(
                                    jsonb_set(
                                        jsonb_set(
                                            COALESCE(statistics, '{}'::jsonb),
                                            '{totalParticipants}',
                                            to_jsonb(COALESCE((statistics->>'totalParticipants')::int, 0) + 1)
                                        ),
                                        '{totalAmount}',
                                        to_jsonb(COALESCE((statistics->>'totalAmount')::int, 0) + $1)
                                    ),
                                    '{unpaidAmount}',
                                    to_jsonb(COALESCE((statistics->>'unpaidAmount')::int, 0) + $1)
                                ),
                                '{stylesStats}',
                                to_jsonb($2)
                            ),
                            '{optionsStats}',
                            to_jsonb($3)
                        ),
                        updated_at = CURRENT_TIMESTAMP
                        WHERE id = $4
                        RETURNING id, statistics
                    `, [totalPrice, newStylesStats, newOptionsStats, workshopId]);

                    if (updateStatsResult.rows.length > 0) {
                        console.log('‚úÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', {
                            masterClassId: workshopId,
                            newStatistics: updateStatsResult.rows[0].statistics
                        });
                    }
                }
            }
        } catch (participantError) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:', participantError);
            // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
        console.log('–ü–æ–ª—É—á–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞...');
        const newRegistrationResult = await pool.query(`
            SELECT wr.*, u.name as "userName", u.class as "userClass", u.class_group as "userClassGroup", u.school_name as "schoolName"
            FROM workshop_registrations wr
            JOIN users u ON wr.user_id = u.id
            WHERE wr.id = $1
        `, [result.rows[0].id]);

        console.log('–ó–∞–ø–∏—Å—å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ:', newRegistrationResult.rows[0]);
        console.log('=== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===');
        return res.status(201).json(newRegistrationResult.rows[0]);
    } catch (error) {
        console.error('=== –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ó–ê–ü–ò–°–ò –ù–ê –ú–ê–°–¢–ï–†-–ö–õ–ê–°–° ===');
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
        console.error('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error instanceof Error ? error.stack : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error);
        console.error('–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—à–∏–±–∫–∏:', error?.constructor?.name);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        return res.status(500).json({
            error: 'Internal server error',
            details: error instanceof Error ? error.message : String(error),
            timestamp: new Date().toISOString()
        });
    }
};

// –°–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å (–Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–µ—Ç–µ–π, –æ–¥–∏–Ω —Å—á–µ—Ç)
export const createGroupWorkshopRegistration = async (req: Request, res: Response): Promise<void> => {
    try {
        console.log('=== –ù–ê–ß–ê–õ–û createGroupWorkshopRegistration ===');
        console.log('Request body:', JSON.stringify(req.body, null, 2));
        console.log('Request headers:', req.headers);

        const { workshopId, parentId, children }: {
            workshopId: string;
            parentId: string;
            children: Array<{
                childId: string;
                childName: string;
                style: string;
                options: string[];
                totalPrice: number;
            }>;
        } = req.body;

        console.log('–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–π –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:', {
            workshopId,
            parentId,
            childrenCount: children.length,
            children: children.map(c => ({ childId: c.childId, childName: c.childName }))
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if (!workshopId || !parentId || !children || !Array.isArray(children) || children.length === 0) {
            console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:', { workshopId, parentId, children });
            res.status(400).json({
                error: 'Invalid input data',
                details: {
                    workshopId: !!workshopId,
                    parentId: !!parentId,
                    children: Array.isArray(children),
                    childrenLength: children?.length
                }
            });
            return;
        }

        console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
        const client = await pool.connect();
        console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

        try {
            console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é...');
            await client.query('BEGIN');
            console.log('‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞—á–∞—Ç–∞');

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–¥–∏—Ç–µ–ª–µ
            const parentResult = await client.query(
                'SELECT name, surname FROM users WHERE id = $1',
                [parentId]
            );

            if (parentResult.rows.length === 0) {
                await client.query('ROLLBACK');
                res.status(404).json({ error: 'Parent not found' });
                return;
            }

            const parent = parentResult.rows[0];
            const parentName = parent.surname ? `${parent.name} ${parent.surname}` : parent.name;

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ —Å –¥–∞–Ω–Ω—ã–º–∏ —à–∫–æ–ª—ã
            const workshopResult = await client.query(`
                SELECT mce.date, mce.time, mce.class_group, s.name as school_name, s.address
                FROM master_class_events mce
                LEFT JOIN schools s ON mce.school_id = s.id
                WHERE mce.id = $1
            `, [workshopId]);

            if (workshopResult.rows.length === 0) {
                await client.query('ROLLBACK');
                res.status(404).json({ error: 'Workshop not found' });
                return;
            }

            const workshop = workshopResult.rows[0];

            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞ —à–∫–æ–ª—ã (–¥–æ –ø–µ—Ä–≤–æ–π –∑–∞–ø—è—Ç–æ–π)
            const extractCityFromAddress = (address: string): string => {
                if (!address) return '–ù–µ —É–∫–∞–∑–∞–Ω';
                const city = address.split(',')[0]?.trim();
                return city || '–ù–µ —É–∫–∞–∑–∞–Ω';
            };

            const city = extractCityFromAddress(workshop.address);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –ª–∏ —É–∂–µ –¥–µ—Ç–∏ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
            for (const child of children) {
                console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–±–µ–Ω–∫–∞ ${child.childName} (ID: ${child.childId}) –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ...`);

                const existingResult = await client.query(
                    'SELECT id FROM workshop_registrations WHERE workshop_id = $1 AND user_id = $2',
                    [workshopId, child.childId]
                );

                if (existingResult.rows.length > 0) {
                    console.log(`‚ùå –†–µ–±–µ–Ω–æ–∫ ${child.childName} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ workshop_registrations`);
                    await client.query('ROLLBACK');
                    res.status(400).json({
                        error: `Child ${child.childName} already registered for this workshop`
                    });
                    return;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ participants –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
                const workshopParticipantsResult = await client.query(
                    'SELECT participants FROM master_class_events WHERE id = $1',
                    [workshopId]
                );

                if (workshopParticipantsResult.rows[0]?.participants) {
                    const participants = workshopParticipantsResult.rows[0].participants;
                    const isAlreadyParticipant = participants.some((p: Record<string, unknown>) => p.childId === child.childId);

                    if (isAlreadyParticipant) {
                        console.log(`‚ùå –†–µ–±–µ–Ω–æ–∫ ${child.childName} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞`);
                        await client.query('ROLLBACK');
                        res.status(400).json({
                            error: `Child ${child.childName} already registered for this workshop`
                        });
                        return;
                    }
                }

                console.log(`‚úÖ –†–µ–±–µ–Ω–æ–∫ ${child.childName} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö`);
            }

            // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω —Å—á–µ—Ç –∑–∞ –≤—Å–µ—Ö –¥–µ—Ç–µ–π
            const totalAmount = children.reduce((sum, child) => sum + child.totalPrice, 0);

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π –∏ —Ü–µ–Ω —Å—Ç–∏–ª–µ–π –∏ –æ–ø—Ü–∏–π
            const invoiceServiceResult = await client.query(`
                SELECT s.styles, s.options 
                FROM services s 
                JOIN master_class_events mce ON s.id = mce.service_id 
                WHERE mce.id = $1
            `, [workshopId]);

            let invoiceServiceStyles: Array<{ id: string; name: string; price: number }> = [];
            let invoiceServiceOptions: Array<{ id: string; name: string; price: number }> = [];

            if (invoiceServiceResult.rows.length > 0) {
                invoiceServiceStyles = invoiceServiceResult.rows[0].styles || [];
                invoiceServiceOptions = invoiceServiceResult.rows[0].options || [];
            }

            // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏ –∏ –æ–ø—Ü–∏–∏ –æ—Ç –≤—Å–µ—Ö –¥–µ—Ç–µ–π –¥–ª—è —Å—á–µ—Ç–∞
            const allStyles = children.reduce((styles, child) => {
                if (child.style) {
                    const childStyles = child.style.split(', ').filter(Boolean);
                    styles.push(...childStyles);
                }
                return styles;
            }, [] as string[]);

            const allOptions = children.reduce((options, child) => {
                if (child.options && child.options.length > 0) {
                    options.push(...child.options);
                }
                return options;
            }, [] as string[]);

            // –°–æ–∑–¥–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å—Ç–∏–ª–µ–π –∏ –æ–ø—Ü–∏–π —Å –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∏ —Ü–µ–Ω–∞–º–∏
            const selectedStyles = allStyles.map(styleId => {
                const style = invoiceServiceStyles.find((s: { id: string; name: string; price: number }) => s.id === styleId);
                return {
                    id: styleId,
                    name: style?.name || styleId,
                    price: style?.price || 0
                };
            });

            const selectedOptions = allOptions.map(optionId => {
                const option = invoiceServiceOptions.find((o: { id: string; name: string; price: number }) => o.id === optionId);
                return {
                    id: optionId,
                    name: option?.name || optionId,
                    price: option?.price || 0
                };
            });

            console.log('üîç –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏:', {
                selectedStyles,
                selectedOptions,
                totalAmount,
                parentName
            });

            const invoiceResult = await client.query(`
                INSERT INTO invoices (
                    master_class_id, workshop_date, city, school_name, class_group,
                    participant_name, participant_id, amount, selected_styles, selected_options
                ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
                RETURNING *
            `, [
                workshopId,
                workshop.date || new Date().toISOString().split('T')[0], // –ò—Å–ø–æ–ª—å–∑—É–µ–º workshop.date –∏–ª–∏ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
                city, // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞ —à–∫–æ–ª—ã
                workshop.school_name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
                workshop.class_group || '–ù–µ —É–∫–∞–∑–∞–Ω',
                `${parentName} (${children.length} –¥–µ—Ç–µ–π)`,
                parentId,
                totalAmount,
                JSON.stringify(selectedStyles),
                JSON.stringify(selectedOptions)
            ]);

            const invoice = invoiceResult.rows[0];
            console.log('–°–æ–∑–¥–∞–Ω –≥—Ä—É–ø–ø–æ–≤–æ–π —Å—á–µ—Ç:', invoice);

            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å–∏ –≤ workshop_registrations –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
            // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: user_id –≤ workshop_registrations —Å–æ–¥–µ—Ä–∂–∏—Ç ID —Ä–µ–±–µ–Ω–∫–∞, –∞ –Ω–µ —Ä–æ–¥–∏—Ç–µ–ª—è
            const registrations = [];
            for (const child of children) {
                const registrationResult = await client.query(`
                    INSERT INTO workshop_registrations (
                        workshop_id, user_id, style, options, total_price, status
                    ) VALUES ($1, $2, $3, $4, $5, 'pending')
                    RETURNING *
                `, [workshopId, child.childId, child.style, JSON.stringify(child.options || []), child.totalPrice]);

                registrations.push(registrationResult.rows[0]);
                console.log(`–°–æ–∑–¥–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è ${child.childName} (childId: ${child.childId}):`, registrationResult.rows[0]);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –¥–µ—Ç–µ–π –≤ participants –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö —Å –æ–±—ä–µ–∫—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∏–ª–µ–π –∏ –æ–ø—Ü–∏–π
            const participants = children.map((child, index) => {
                // –§–æ—Ä–º–∏—Ä—É–µ–º selectedStyles –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å id –∏ name
                let selectedStyles: Array<{ id: string; name: string }> = [];
                if (child.style) {
                    const styleIds = child.style.split(', ').filter(Boolean);
                    selectedStyles = styleIds.map(styleId => {
                        const foundStyle = invoiceServiceStyles.find((s: Record<string, unknown>) => s.id === styleId);
                        return {
                            id: styleId,
                            name: foundStyle?.name || styleId
                        };
                    });
                }

                // –§–æ—Ä–º–∏—Ä—É–µ–º selectedOptions –∫–∞–∫ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å id –∏ name
                let selectedOptions: Array<{ id: string; name: string }> = [];
                if (child.options && child.options.length > 0) {
                    selectedOptions = child.options.map(optionId => {
                        const foundOption = invoiceServiceOptions.find((o: Record<string, unknown>) => o.id === optionId);
                        return {
                            id: optionId,
                            name: foundOption?.name || optionId
                        };
                    });
                }

                return {
                    id: `${invoice.id}_${index}`, // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
                    childId: child.childId,
                    childName: child.childName,
                    parentId: parentId, // ID —Ä–æ–¥–∏—Ç–µ–ª—è
                    parentName: parentName,
                    selectedStyles,
                    selectedOptions,
                    totalAmount: child.totalPrice,
                    isPaid: false,
                    hasReceived: false,
                    paymentMethod: undefined,
                    paymentDate: undefined,
                    notes: `–ì—Ä—É–ø–ø–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –°—á–µ—Ç: ${invoice.id}. –†–æ–¥–∏—Ç–µ–ª—å: ${parentId}`
                };
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ participants –≤ master_class_events
            await client.query(`
                UPDATE master_class_events 
                SET participants = COALESCE(participants, '[]'::jsonb) || $1::jsonb,
                    updated_at = CURRENT_TIMESTAMP
                WHERE id = $2
            `, [JSON.stringify(participants), workshopId]);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ master_class_events (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ statistics)
            const currentStatsResult = await client.query(
                'SELECT statistics FROM master_class_events WHERE id = $1',
                [workshopId]
            );

            const currentStats = currentStatsResult.rows[0]?.statistics || {};
            const currentParticipants = currentStats.totalParticipants || 0;
            const currentRevenue = currentStats.totalAmount || 0;
            const currentStylesStats = currentStats.stylesStats || {};
            const currentOptionsStats = currentStats.optionsStats || {};

            // –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∏–ª—è–º –∏ –æ–ø—Ü–∏—è–º –æ—Ç –≤—Å–µ—Ö –¥–µ—Ç–µ–π
            const newStylesStats = { ...currentStylesStats };
            const newOptionsStats = { ...currentOptionsStats };

            // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏–π —Å—Ç–∏–ª–µ–π –∏ –æ–ø—Ü–∏–π
            const serviceResult = await client.query(
                'SELECT styles, options FROM services WHERE id = (SELECT service_id FROM master_class_events WHERE id = $1)',
                [workshopId]
            );

            const serviceStyles = serviceResult.rows[0]?.styles || [];
            const serviceOptions = serviceResult.rows[0]?.options || [];

            // –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—ã –¥–ª—è —Å—Ç–∏–ª–µ–π –∏ –æ–ø—Ü–∏–π
            const stylesMap: { [key: string]: string } = {};
            const optionsMap: { [key: string]: string } = {};

            serviceStyles.forEach((style: Record<string, unknown>) => {
                if (style.id && style.name) {
                    stylesMap[String(style.id)] = String(style.name);
                }
            });

            serviceOptions.forEach((option: Record<string, unknown>) => {
                if (option.id && option.name) {
                    optionsMap[String(option.id)] = String(option.name);
                }
            });

            // –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Å—Ç–∏–ª—è–º –∏ –æ–ø—Ü–∏—è–º
            for (const child of children) {
                // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∏–ª–∏ —Ä–µ–±–µ–Ω–∫–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                if (child.style) {
                    const childStyles = child.style.split(', ').filter(Boolean);
                    childStyles.forEach(styleId => {
                        const styleName = stylesMap[styleId] || styleId;
                        newStylesStats[styleName] = (newStylesStats[styleName] || 0) + 1;
                    });
                }

                // –î–æ–±–∞–≤–ª—è–µ–º –æ–ø—Ü–∏–∏ —Ä–µ–±–µ–Ω–∫–∞ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
                if (child.options && child.options.length > 0) {
                    child.options.forEach(optionId => {
                        const optionName = optionsMap[optionId] || optionId;
                        newOptionsStats[optionName] = (newOptionsStats[optionName] || 0) + 1;
                    });
                }
            }

            const newStats = {
                ...currentStats,
                totalParticipants: currentParticipants + children.length,
                totalAmount: currentRevenue + totalAmount,
                unpaidAmount: (currentStats.unpaidAmount || 0) + totalAmount,
                stylesStats: newStylesStats,
                optionsStats: newOptionsStats
            };

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —á–∞—Å—Ç—è–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏
            const finalStats = {
                ...currentStats,
                totalParticipants: currentParticipants + children.length,
                totalAmount: currentRevenue + totalAmount,
                unpaidAmount: (currentStats.unpaidAmount || 0) + totalAmount,
                stylesStats: newStylesStats,
                optionsStats: newOptionsStats
            };

            await client.query(`
                UPDATE master_class_events 
                SET statistics = $1, updated_at = CURRENT_TIMESTAMP
                WHERE id = $2
            `, [JSON.stringify(finalStats), workshopId]);

            await client.query('COMMIT');

            console.log('=== –ì–†–£–ü–ü–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û ===');
            console.log('–°–æ–∑–¥–∞–Ω —Å—á–µ—Ç:', invoice.id);
            console.log('–°–æ–∑–¥–∞–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π:', registrations.length);
            console.log('–î–æ–±–∞–≤–ª–µ–Ω–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', participants.length);

            res.status(201).json({
                invoice,
                registrations,
                participants: participants.length
            });

        } catch (error) {
            await client.query('ROLLBACK');
            throw error;
        } finally {
            client.release();
        }

    } catch (error) {
        console.error('=== –û–®–ò–ë–ö–ê –ü–†–ò –°–û–ó–î–ê–ù–ò–ò –ì–†–£–ü–ü–û–í–û–ô –ó–ê–ü–ò–°–ò –ù–ê –ú–ê–°–¢–ï–†-–ö–õ–ê–°–° ===');
        console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error);
        console.error('–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤:', error instanceof Error ? error.stack : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ');
        console.error('–¢–∏–ø –æ—à–∏–±–∫–∏:', typeof error);
        console.error('–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –æ—à–∏–±–∫–∏:', error?.constructor?.name);

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
        res.status(500).json({
            error: 'Internal server error',
            details: error instanceof Error ? error.message : String(error),
            timestamp: new Date().toISOString()
        });
    }
};

// –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
export const updateRegistrationStatus = async (req: Request, res: Response) => {
    try {
        const { id } = req.params;
        const { status } = req.body;

        if (!['pending', 'confirmed', 'cancelled'].includes(status)) {
            return res.status(400).json({ error: 'Invalid status' });
        }

        await pool.query(`
            UPDATE workshop_registrations 
            SET status = $1
            WHERE id = $2
        `, [status, id]);

        return res.json({ message: '–°—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
};

// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—É
export const getWorkshopStats = async (workshopId: string) => {
    try {
        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
        const registrationsResult = await pool.query(`
            SELECT * FROM workshop_registrations 
            WHERE workshop_id = $1
        `, [workshopId]);

        const registrations = registrationsResult.rows;

        // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        const totalRegistrations = registrations.length;
        const confirmedRegistrations = registrations.filter((r: Record<string, unknown>) => r.status === 'confirmed').length;
        const totalRevenue = registrations.reduce((sum: number, r: Record<string, unknown>) => sum + (parseFloat(String(r.total_price)) || 0), 0);

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
        const workshopResult = await pool.query(`
            SELECT * FROM master_class_events 
            WHERE id = $1
        `, [workshopId]);

        const workshop = workshopResult.rows[0];

        return {
            workshopId,
            workshopTitle: workshop?.notes || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å',
            totalRegistrations,
            confirmedRegistrations,
            pendingRegistrations: totalRegistrations - confirmedRegistrations,
            totalRevenue,
            maxParticipants: 0, // –ü–æ–ª–µ max_participants –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ master_class_events
            currentParticipants: totalRegistrations,
            isFull: false // –ü–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        };
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:', error);
        throw new Error('Failed to get workshop stats');
    }
};

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
export const checkRegistration = async (req: Request, res: Response): Promise<void> => {
    try {
        const { workshopId, userId } = req.body;

        if (!workshopId || !userId) {
            res.status(400).json({
                error: 'Missing required fields',
                details: { workshopId: !!workshopId, userId: !!userId }
            });
            return;
        }

        console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', { workshopId, userId });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ workshop_registrations
        const existingResult = await pool.query(
            'SELECT id FROM workshop_registrations WHERE workshop_id = $1 AND user_id = $2',
            [workshopId, userId]
        );

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ participants –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
        const workshopResult = await pool.query(
            'SELECT participants FROM master_class_events WHERE id = $1',
            [workshopId]
        );

        let isInParticipants = false;
        if (workshopResult.rows.length > 0) {
            const participants = workshopResult.rows[0].participants || [];
            isInParticipants = participants.some((p: Record<string, unknown>) => p.childId === userId);
        }

        const alreadyRegistered = existingResult.rows.length > 0 || isInParticipants;

        console.log('–†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏:', {
            inWorkshopRegistrations: existingResult.rows.length > 0,
            inParticipants: isInParticipants,
            alreadyRegistered
        });

        res.json({
            alreadyRegistered,
            details: {
                inWorkshopRegistrations: existingResult.rows.length > 0,
                inParticipants: isInParticipants
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({
            error: 'Internal server error',
            details: error instanceof Error ? error.message : String(error)
        });
    }
};

// –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
export const removeParticipant = async (req: Request, res: Response) => {
    try {
        const { workshopId, userId } = req.body;

        console.log('–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:', { workshopId, userId });

        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞
        const registrationResult = await pool.query(
            'SELECT * FROM workshop_registrations WHERE workshop_id = $1 AND user_id = $2',
            [workshopId, userId]
        );

        if (registrationResult.rows.length === 0) {
            return res.status(404).json({ error: '–£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ' });
        }

        const registration = registrationResult.rows[0];

        // –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ workshop_registrations
        await pool.query(
            'DELETE FROM workshop_registrations WHERE workshop_id = $1 AND user_id = $2',
            [workshopId, userId]
        );

        console.log('–ó–∞–ø–∏—Å—å –∏–∑ workshop_registrations —É–¥–∞–ª–µ–Ω–∞');

        // –£–¥–∞–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑ –ø–æ–ª—è participants –≤ master_class_events
        await pool.query(`
            UPDATE master_class_events 
            SET participants = participants - jsonb_path_query_array(participants, '$[*] ? (@.childId == $1)'),
                updated_at = CURRENT_TIMESTAMP
            WHERE id = $2
        `, [userId, workshopId]);

        console.log('–£—á–∞—Å—Ç–Ω–∏–∫ —É–¥–∞–ª–µ–Ω –∏–∑ participants');

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ master_class_events
        await pool.query(`
            UPDATE master_class_events 
            SET statistics = jsonb_set(
                jsonb_set(
                    jsonb_set(
                        COALESCE(statistics, '{}'::jsonb),
                        '{totalParticipants}',
                        to_jsonb(GREATEST(COALESCE((statistics->>'totalParticipants')::int, 0) - 1, 0))
                    ),
                    '{totalAmount}',
                    to_jsonb(GREATEST(COALESCE((statistics->>'totalAmount')::int, 0) - $1, 0))
                ),
                '{unpaidAmount}',
                to_jsonb(GREATEST(COALESCE((statistics->>'unpaidAmount')::int, 0) - $1, 0))
            ),
            updated_at = CURRENT_TIMESTAMP
            WHERE id = $2
        `, [registration.total_price, workshopId]);

        console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞');

        return res.json({
            success: true,
            message: '–£—á–∞—Å—Ç–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞'
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–∞:', error);
        return res.status(500).json({ error: 'Internal server error' });
    }
};
