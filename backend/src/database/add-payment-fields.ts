/**
 * @file: add-payment-fields.ts
 * @description: –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–∞–±–ª–∏—Ü—É invoices
 * @dependencies: pool
 * @created: 2024-12-19
 */

import pool from './connection';

const addPaymentFields = async (): Promise<void> => {
    const client = await pool.connect();

    try {
        console.log('üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–ª–∞—Ç–µ–∂–∞ –≤ —Ç–∞–±–ª–∏—Ü—É invoices');

        await client.query('BEGIN');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π
        const checkFields = await client.query(`
            SELECT column_name 
            FROM information_schema.columns 
            WHERE table_name = 'invoices' 
            AND column_name IN ('payment_id', 'payment_method', 'payment_date')
        `);

        const existingFields = checkFields.rows.map((row: any) => row.column_name);
        console.log('üîç –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø–æ–ª—è –ø–ª–∞—Ç–µ–∂–∞:', existingFields);

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ payment_id –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!existingFields.includes('payment_id')) {
            console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ payment_id');
            await client.query(`
                ALTER TABLE invoices 
                ADD COLUMN payment_id VARCHAR(255)
            `);
            console.log('‚úÖ –ü–æ–ª–µ payment_id –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ payment_method –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!existingFields.includes('payment_method')) {
            console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ payment_method');
            await client.query(`
                ALTER TABLE invoices 
                ADD COLUMN payment_method VARCHAR(50)
            `);
            console.log('‚úÖ –ü–æ–ª–µ payment_method –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ payment_date –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if (!existingFields.includes('payment_date')) {
            console.log('‚ûï –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ payment_date');
            await client.query(`
                ALTER TABLE invoices 
                ADD COLUMN payment_date TIMESTAMP
            `);
            console.log('‚úÖ –ü–æ–ª–µ payment_date –¥–æ–±–∞–≤–ª–µ–Ω–æ');
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –∫ –ø–æ–ª—è–º
        await client.query(`
            COMMENT ON COLUMN invoices.payment_id IS 'ID –ø–ª–∞—Ç–µ–∂–∞ –≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ';
        `);
        await client.query(`
            COMMENT ON COLUMN invoices.payment_method IS '–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã (yandex, card, etc.)';
        `);
        await client.query(`
            COMMENT ON COLUMN invoices.payment_date IS '–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ–ø–ª–∞—Ç—ã';
        `);

        await client.query('COMMIT');
        console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        const finalCheck = await client.query(`
            SELECT column_name, data_type, is_nullable
            FROM information_schema.columns 
            WHERE table_name = 'invoices' 
            AND column_name IN ('payment_id', 'payment_method', 'payment_date')
            ORDER BY column_name
        `);

        console.log('üìã –†–µ–∑—É–ª—å—Ç–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–∏:', finalCheck.rows);

    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
        throw error;
    } finally {
        client.release();
    }
};

// –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    addPaymentFields()
        .then(() => {
            console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
            process.exit(0);
        })
        .catch((error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
            process.exit(1);
        });
}

export default addPaymentFields;

