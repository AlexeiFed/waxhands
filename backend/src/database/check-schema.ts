/**
 * @file: check-schema.ts
 * @description: –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã master_class_events
 * @dependencies: connection.ts
 * @created: 2024-12-19
 */

import pool from './connection.js';

const checkSchema = async (): Promise<void> => {
    const client = await pool.connect();

    try {
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã master_class_events...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ master_class_events
        const result = await client.query(`
            SELECT column_name, data_type, is_nullable, column_default
            FROM information_schema.columns 
            WHERE table_name = 'master_class_events'
            ORDER BY ordinal_position
        `);

        console.log('üìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã master_class_events:');
        result.rows.forEach(row => {
            console.log(`  - ${row.column_name}: ${row.data_type} (nullable: ${row.is_nullable}, default: ${row.column_default})`);
        });

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ city
        const cityField = result.rows.find(row => row.column_name === 'city');
        if (cityField) {
            console.log('‚úÖ –ü–æ–ª–µ city –Ω–∞–π–¥–µ–Ω–æ!');
        } else {
            console.log('‚ùå –ü–æ–ª–µ city –ù–ï –Ω–∞–π–¥–µ–Ω–æ!');
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö
        console.log('\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö...');
        const dataResult = await client.query(`
            SELECT id, date, time, school_name, class_group, city
            FROM master_class_events 
            LIMIT 3
        `);

        if (dataResult.rows.length > 0) {
            console.log('üìä –û–±—Ä–∞–∑—Ü—ã –¥–∞–Ω–Ω—ã—Ö:');
            dataResult.rows.forEach((row, index) => {
                console.log(`  ${index + 1}. ID: ${row.id}, Date: ${row.date}, City: ${row.city || 'NULL'}`);
            });
        } else {
            console.log('üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü–µ master_class_events');
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã:', error);
        throw error;
    } finally {
        client.release();
    }
};

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
checkSchema()
    .then(() => {
        console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ö–µ–º—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
        process.exit(0);
    })
    .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ö–µ–º—ã:', error);
        process.exit(1);
    });

export { checkSchema };
