import pool from './connection.js';
import bcrypt from 'bcryptjs';
import { UserRole } from '../types/index.js';

const seedData = async () => {
    const client = await pool.connect();
    console.log('üîå Connected to database for seeding');

    try {
        await client.query('BEGIN');
        console.log('üìù Starting data seeding...');

        // –°–æ–∑–¥–∞–Ω–∏–µ —à–∫–æ–ª
        console.log('üè´ Seeding schools...');
        const schoolsData = [
            {
                name: "–ì–∏–º–Ω–∞–∑–∏—è ‚Ññ 8",
                address: "–•–∞–±–∞—Ä–æ–≤—Å–∫, –£–ª. –¢–∏—Ö–æ–æ–∫–µ–∞–Ω—Å–∫–∞—è 169–ê",
                classes: ["1–ê", "1–ë", "1–í", "2–ê", "2–ë", "2–í", "3–ê", "3–ë", "3–í", "4–ê", "4–ë", "4–í"],
                teacher: "–ò–≤–∞–Ω–æ–≤–∞ –ú–∞—Ä–∏—è –ü–µ—Ç—Ä–æ–≤–Ω–∞",
                teacherPhone: "+7 (4212) 123-45-67",
                notes: "–ì–∏–º–Ω–∞–∑–∏—è —Å —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–º –∏–∑—É—á–µ–Ω–∏–µ–º –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã—Ö —è–∑—ã–∫–æ–≤"
            },
            {
                name: "–®–∫–æ–ª–∞ ‚Ññ 12",
                address: "–•–∞–±–∞—Ä–æ–≤—Å–∫, –£–ª. –õ–µ–Ω–∏–Ω–∞ 45",
                classes: ["1–ê", "1–ë", "2–ê", "2–ë", "3–ê", "3–ë", "4–ê", "4–ë"],
                teacher: "–ü–µ—Ç—Ä–æ–≤–∞ –ê–Ω–Ω–∞ –°–µ—Ä–≥–µ–µ–≤–Ω–∞",
                teacherPhone: "+7 (4212) 234-56-78",
                notes: "–®–∫–æ–ª–∞ —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —É–∫–ª–æ–Ω–æ–º"
            },
            {
                name: "–õ–∏—Ü–µ–π ‚Ññ 3",
                address: "–•–∞–±–∞—Ä–æ–≤—Å–∫, –£–ª. –ö–∞—Ä–ª–∞ –ú–∞—Ä–∫—Å–∞ 78",
                classes: ["1–ê", "1–ë", "1–í", "2–ê", "2–ë", "2–í", "3–ê", "3–ë", "3–í", "4–ê", "4–ë", "4–í"],
                teacher: "–°–∏–¥–æ—Ä–æ–≤–∞ –ï–ª–µ–Ω–∞ –í–ª–∞–¥–∏–º–∏—Ä–æ–≤–Ω–∞",
                teacherPhone: "+7 (4212) 345-67-89",
                notes: "–õ–∏—Ü–µ–π —Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–Ω–∞—É—á–Ω—ã–º –ø—Ä–æ—Ñ–∏–ª–µ–º"
            },
            {
                name: "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ ‚Ññ 15",
                address: "–•–∞–±–∞—Ä–æ–≤—Å–∫, –£–ª. –ü—É—à–∫–∏–Ω–∞ 23",
                classes: ["–ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞", "–°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞", "–°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞", "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞"],
                teacher: "–ö–æ–∑–ª–æ–≤–∞ –û–ª—å–≥–∞ –ù–∏–∫–æ–ª–∞–µ–≤–Ω–∞",
                teacherPhone: "+7 (4212) 456-78-90",
                notes: "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ —Å –ª–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–∏–º–∏ –≥—Ä—É–ø–ø–∞–º–∏"
            },
            {
                name: "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ ‚Ññ 8",
                address: "–•–∞–±–∞—Ä–æ–≤—Å–∫, –£–ª. –ì–∞–≥–∞—Ä–∏–Ω–∞ 56",
                classes: ["–ú–ª–∞–¥—à–∞—è –≥—Ä—É–ø–ø–∞", "–°—Ä–µ–¥–Ω—è—è –≥—Ä—É–ø–ø–∞", "–°—Ç–∞—Ä—à–∞—è –≥—Ä—É–ø–ø–∞", "–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç–µ–ª—å–Ω–∞—è –≥—Ä—É–ø–ø–∞"],
                teacher: "–ú–æ—Ä–æ–∑–æ–≤–∞ –¢–∞—Ç—å—è–Ω–∞ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–Ω–∞",
                teacherPhone: "+7 (4212) 567-89-01",
                notes: "–î–µ—Ç—Å–∫–∏–π —Å–∞–¥ —Å —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ-—ç—Å—Ç–µ—Ç–∏—á–µ—Å–∫–∏–º —Ä–∞–∑–≤–∏—Ç–∏–µ–º"
            }
        ];

        // –í—Å—Ç–∞–≤–∫–∞ —à–∫–æ–ª
        for (const school of schoolsData) {
            await client.query(`
        INSERT INTO schools (name, address, classes, teacher, teacher_phone, notes)
        VALUES ($1, $2, $3, $4, $5, $6)
        ON CONFLICT DO NOTHING
      `, [school.name, school.address, JSON.stringify(school.classes), school.teacher, school.teacherPhone, school.notes]);
        }
        console.log('‚úÖ Schools seeded');

        // –ü–æ–ª—É—á–µ–Ω–∏–µ ID —à–∫–æ–ª –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        const schoolsResult = await client.query('SELECT id, name FROM schools');
        const schools = schoolsResult.rows;

        // –°–æ–∑–¥–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        console.log('üë§ Creating admin user...');
        const adminPasswordHash = await bcrypt.hash('admin123', 12);
        await client.query(`
      INSERT INTO users (name, role, password_hash)
      VALUES ('–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä', 'admin', $1)
      ON CONFLICT DO NOTHING
    `, [adminPasswordHash]);
        console.log('‚úÖ Admin user created');

        // –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        console.log('üë• Creating test users...');
        const testUsers = [
            {
                name: "–ò–≤–∞–Ω",
                surname: "–ò–≤–∞–Ω–æ–≤",
                role: "parent" as UserRole,
                phone: "+79991234567",
                schoolId: schools[0]?.id,
                schoolName: schools[0]?.name,
                class: "3–ê",
                password: "password123"
            },
            {
                name: "–ú–∞—Ä–∏—è",
                surname: "–ü–µ—Ç—Ä–æ–≤–∞",
                role: "parent" as UserRole,
                phone: "+79991234568",
                schoolId: schools[1]?.id,
                schoolName: schools[1]?.name,
                class: "2–ë",
                password: "password123"
            },
            {
                name: "–ê–ª–µ–∫—Å–µ–π",
                surname: "–°–∏–¥–æ—Ä–æ–≤",
                role: "executor" as UserRole,
                phone: "+79991234569",
                password: "password123"
            },
            {
                name: "–ê–Ω–Ω–∞",
                surname: "–ö–æ–∑–ª–æ–≤–∞",
                role: "executor" as UserRole,
                phone: "+79991234570",
                password: "password123"
            },
            {
                name: "–ü–µ—Ç—Ä",
                surname: "–ü–µ—Ç—Ä–æ–≤",
                role: "child" as UserRole,
                schoolId: schools[0]?.id,
                schoolName: schools[0]?.name,
                class: "3–ê",
                shift: "1"
            },
            {
                name: "–ï–ª–µ–Ω–∞",
                surname: "–°–∏–¥–æ—Ä–æ–≤–∞",
                role: "child" as UserRole,
                schoolId: schools[1]?.id,
                schoolName: schools[1]?.name,
                class: "2–ë",
                shift: "2"
            }
        ];

        // –í—Å—Ç–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        for (const user of testUsers) {
            const passwordHash = user.password ? await bcrypt.hash(user.password, 12) : null;
            await client.query(`
        INSERT INTO users (name, surname, role, phone, password_hash, school_id, school_name, class, shift)
        VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
        ON CONFLICT DO NOTHING
      `, [user.name, user.surname, user.role, user.phone, passwordHash, user.schoolId, user.schoolName, user.class, user.shift]);
        }
        console.log('‚úÖ Test users created');

        // –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥
        console.log('üõ†Ô∏è Creating services...');
        const servicesData = [
            {
                name: "–ú–∞–Ω–∏–∫—é—Ä –¥–µ—Ç—Å–∫–∏–π",
                description: "–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–∞–Ω–∏–∫—é—Ä –¥–ª—è –¥–µ—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ—Ç—Å–∫–æ–π –∫–æ—Å–º–µ—Ç–∏–∫–∏",
                price: 800,
                duration: 30,
                category: "–ú–∞–Ω–∏–∫—é—Ä"
            },
            {
                name: "–ü–µ–¥–∏–∫—é—Ä –¥–µ—Ç—Å–∫–∏–π",
                description: "–£—Ö–æ–¥ –∑–∞ –Ω–æ–∂–∫–∞–º–∏ —Ä–µ–±–µ–Ω–∫–∞ —Å —Ä–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–º–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏",
                price: 1000,
                duration: 45,
                category: "–ü–µ–¥–∏–∫—é—Ä"
            },
            {
                name: "–ú–∞–∫–∏—è–∂ –¥–µ—Ç—Å–∫–∏–π",
                description: "–Ø—Ä–∫–∏–π –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –º–∞–∫–∏—è–∂ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤ –∏ —Ñ–æ—Ç–æ—Å–µ—Å—Å–∏–π",
                price: 1200,
                duration: 60,
                category: "–ú–∞–∫–∏—è–∂"
            },
            {
                name: "–ü—Ä–∏—á–µ—Å–∫–∞ –¥–µ—Ç—Å–∫–∞—è",
                description: "–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã—Ö –ø—Ä–∏—á–µ—Å–æ–∫ –¥–ª—è –æ—Å–æ–±—ã—Ö —Å–ª—É—á–∞–µ–≤",
                price: 1500,
                duration: 45,
                category: "–ü—Ä–∏—á–µ—Å–∫–∞"
            },
            {
                name: "–ú–∞—Å—Å–∞–∂ –¥–µ—Ç—Å–∫–∏–π",
                description: "–†–∞—Å—Å–ª–∞–±–ª—è—é—â–∏–π –º–∞—Å—Å–∞–∂ –¥–ª—è –¥–µ—Ç–µ–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–µ—Ç—Å–∫–∏—Ö –º–∞—Å–µ–ª",
                price: 2000,
                duration: 30,
                category: "–ú–∞—Å—Å–∞–∂"
            }
        ];

        // –í—Å—Ç–∞–≤–∫–∞ —É—Å–ª—É–≥
        for (const service of servicesData) {
            await client.query(`
        INSERT INTO services (name, description, price, duration, category)
        VALUES ($1, $2, $3, $4, $5)
        ON CONFLICT DO NOTHING
      `, [service.name, service.description, service.price, service.duration, service.category]);
        }
        console.log('‚úÖ Services created');

        // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
        console.log('üé® Creating master classes...');
        const masterClassesData = [
            {
                name: "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –º–∞–Ω–∏–∫—é—Ä—É",
                description: "–û–±—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–º –º–∞–Ω–∏–∫—é—Ä–∞ –¥–ª—è –¥–µ—Ç–µ–π",
                price: 1500,
                duration: 90,
                maxParticipants: 10,
                materials: ["–õ–∞–∫–∏", "–ö–∏—Å—Ç–∏", "–°—Ç—Ä–∞–∑—ã", "–ù–∞–∫–ª–µ–π–∫–∏"]
            },
            {
                name: "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –ø—Ä–∏—á–µ—Å–∫–∞–º",
                description: "–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä–∞—Å–∏–≤—ã—Ö –ø—Ä–∏—á–µ—Å–æ–∫ —Å–≤–æ–∏–º–∏ —Ä—É–∫–∞–º–∏",
                price: 2000,
                duration: 120,
                maxParticipants: 8,
                materials: ["–†–µ–∑–∏–Ω–∫–∏", "–ó–∞–∫–æ–ª–∫–∏", "–õ–∞–∫ –¥–ª—è –≤–æ–ª–æ—Å", "–†–∞—Å—á–µ—Å–∫–∏"]
            },
            {
                name: "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –ø–æ –º–∞–∫–∏—è–∂—É",
                description: "–û—Å–Ω–æ–≤—ã –¥–µ—Ç—Å–∫–æ–≥–æ –º–∞–∫–∏—è–∂–∞ –¥–ª—è –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤",
                price: 1800,
                duration: 60,
                maxParticipants: 12,
                materials: ["–¢–µ–Ω–∏", "–ü–æ–º–∞–¥—ã", "–ë–ª–µ—Å–∫–∏", "–ö–∏—Å—Ç–∏"]
            }
        ];

        // –í—Å—Ç–∞–≤–∫–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
        for (const masterClass of masterClassesData) {
            await client.query(`
        INSERT INTO master_classes (name, description, price, duration, max_participants, materials)
        VALUES ($1, $2, $3, $4, $5, $6)
        ON CONFLICT DO NOTHING
      `, [masterClass.name, masterClass.description, masterClass.price, masterClass.duration, masterClass.maxParticipants, JSON.stringify(masterClass.materials)]);
        }
        console.log('‚úÖ Master classes created');

        await client.query('COMMIT');
        console.log('‚úÖ Database seeded successfully');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
        console.log('üîç Verifying seeded data...');
        const schoolsCount = await client.query('SELECT COUNT(*) FROM schools');
        const usersCount = await client.query('SELECT COUNT(*) FROM users');
        const servicesCount = await client.query('SELECT COUNT(*) FROM services');
        const masterClassesCount = await client.query('SELECT COUNT(*) FROM master_classes');

        console.log('üìä Seeded data summary:');
        console.log(`   Schools: ${schoolsCount.rows[0].count}`);
        console.log(`   Users: ${usersCount.rows[0].count}`);
        console.log(`   Services: ${servicesCount.rows[0].count}`);
        console.log(`   Master Classes: ${masterClassesCount.rows[0].count}`);

    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå Error seeding data:', error);
        throw error;
    } finally {
        client.release();
        console.log('üîå Database connection released');
    }
};

const runSeed = async () => {
    try {
        console.log('üîÑ Starting database seeding...');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        console.log('üîå Testing database connection...');
        const client = await pool.connect();
        await client.query('SELECT NOW()');
        client.release();
        console.log('‚úÖ Database connection successful');

        await seedData();
        console.log('‚úÖ Seeding completed successfully');
    } catch (error) {
        console.error('‚ùå Seeding failed:', error);
        process.exit(1);
    } finally {
        await pool.end();
        console.log('üîå Database pool closed');
    }
};

// –ó–∞–ø—É—Å–∫ —Å–∏–¥–∏–Ω–≥–∞ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (process.argv[1] && process.argv[1].includes('seed.ts')) {
    console.log('üöÄ Starting seed script...');
    runSeed();
}

export { seedData, runSeed }; 