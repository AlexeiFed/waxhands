/**
 * @file: update-dates.ts
 * @description: –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞—Ç—ã –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –Ω–∞ –±—É–¥—É—â–∏–µ
 * @dependencies: connection.ts
 * @created: 2024-12-19
 */

import pool from './connection.js';

const updateDates = async () => {
    const client = await pool.connect();
    console.log('üîå Connected to database for updating dates');

    try {
        await client.query('BEGIN');
        console.log('üìù Starting dates update...');

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É + 1 –¥–µ–Ω—å
        const today = new Date();
        const tomorrow = new Date(today);
        tomorrow.setDate(today.getDate() + 1);

        const futureDates = [
            new Date(tomorrow.getTime() + 0 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // –∑–∞–≤—Ç—Ä–∞
            new Date(tomorrow.getTime() + 1 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // –ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞
            new Date(tomorrow.getTime() + 2 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // +2 –¥–Ω—è
            new Date(tomorrow.getTime() + 3 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // +3 –¥–Ω—è
            new Date(tomorrow.getTime() + 4 * 24 * 60 * 60 * 1000).toISOString().split('T')[0], // +4 –¥–Ω—è
        ];

        console.log('Future dates to set:', futureDates);

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –≤ –ø–æ—Ä—è–¥–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è
        const eventsResult = await client.query(`
      SELECT id, notes 
      FROM master_class_events 
      ORDER BY created_at ASC
    `);

        console.log(`Found ${eventsResult.rows.length} events to update`);

        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞—Ç—ã
        for (let i = 0; i < eventsResult.rows.length && i < futureDates.length; i++) {
            const event = eventsResult.rows[i];
            const newDate = futureDates[i];

            await client.query(`
        UPDATE master_class_events 
        SET date = $1 
        WHERE id = $2
      `, [newDate, event.id]);

            console.log(`‚úÖ Updated "${event.notes}" to date: ${newDate}`);
        }

        await client.query('COMMIT');
        console.log('‚úÖ Dates update completed successfully');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
        const result = await client.query(`
      SELECT mce.*, s.name as school_name, srv.name as service_name
      FROM master_class_events mce
      LEFT JOIN schools s ON mce.school_id = s.id
      LEFT JOIN services srv ON mce.service_id = srv.id
      WHERE mce.date >= CURRENT_DATE
      ORDER BY mce.date ASC
    `);

        console.log('\nüìã Updated master class events (future only):');
        result.rows.forEach((event, index) => {
            console.log(`${index + 1}. ${event.notes}`);
            console.log(`   üìÖ Date: ${event.date} ${event.time}`);
            console.log(`   üè´ School: ${event.school_name}`);
            console.log(`   üìö Class: ${event.class_group}`);
            console.log(`   üõ†Ô∏è Service: ${event.service_name}`);
            console.log('');
        });

    } catch (error) {
        await client.query('ROLLBACK');
        console.error('‚ùå Error updating dates:', error);
        throw error;
    } finally {
        client.release();
        console.log('üîå Database connection released');
    }
};

// –ó–∞–ø—É—Å–∫ update –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if (process.argv[1] && process.argv[1].includes('update-dates.ts')) {
    console.log('üöÄ Starting dates update...');
    updateDates()
        .then(() => {
            console.log('üéâ Update completed');
            process.exit(0);
        })
        .catch((error) => {
            console.error('üí• Update failed:', error);
            process.exit(1);
        });
}

export { updateDates };
