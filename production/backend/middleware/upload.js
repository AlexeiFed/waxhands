/**
 * @file: upload.ts
 * @description: Middleware –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º multer
 * @dependencies: multer, path, fs
 * @created: 2024-12-19
 */
import multer from 'multer';
import path from 'path';
import fs from 'fs';
// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
const uploadsDir = path.join(process.cwd(), 'uploads');
const avatarsDir = path.join(uploadsDir, 'avatars');
const imagesDir = path.join(uploadsDir, 'images');
const videosDir = path.join(uploadsDir, 'videos');
[uploadsDir, avatarsDir, imagesDir, videosDir].forEach(dir => {
    if (!fs.existsSync(dir)) {
        fs.mkdirSync(dir, { recursive: true });
        console.log(`üìÅ Created directory: ${dir}`);
    }
});
// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        let uploadPath = uploadsDir;
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø–æ —Ç–∏–ø—É —Ñ–∞–π–ª–∞
        if (file.fieldname === 'avatar') {
            uploadPath = avatarsDir;
        }
        else if (file.fieldname === 'images') {
            uploadPath = imagesDir;
        }
        else if (file.fieldname === 'videos') {
            uploadPath = videosDir;
        }
        cb(null, uploadPath);
    },
    filename: (req, file, cb) => {
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
        const uniqueSuffix = Date.now() + '-' + Math.round(Math.random() * 1E9);
        const ext = path.extname(file.originalname);
        cb(null, file.fieldname + '-' + uniqueSuffix + ext);
    }
});
// –§–∏–ª—å—Ç—Ä —Ñ–∞–π–ª–æ–≤
const fileFilter = (req, file, cb) => {
    console.log('=== FILE FILTER DEBUG ===');
    console.log('Field name:', file.fieldname);
    console.log('MIME type:', file.mimetype);
    console.log('Original name:', file.originalname);
    console.log('File size:', file.size);
    console.log('=========================');
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø—É—Å—Ç–∏–º—ã–µ –ø–æ–ª—è
    const validFields = ['avatar', 'images', 'videos'];
    if (!validFields.includes(file.fieldname)) {
        console.log('‚ùå REJECTED - Invalid field name:', file.fieldname);
        console.log('Valid fields are:', validFields);
        cb(new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø–æ–ª—è: ${file.fieldname}. –î–æ–ø—É—Å—Ç–∏–º—ã–µ: ${validFields.join(', ')}`));
        return;
    }
    if (file.fieldname === 'avatar' || file.fieldname === 'images') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        if (file.mimetype.startsWith('image/')) {
            console.log('‚úÖ ACCEPTED as image:', file.originalname);
            cb(null, true);
        }
        else {
            console.log('‚ùå REJECTED - not an image. MIME type:', file.mimetype);
            cb(new Error(`–¢–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω—ã –¥–ª—è ${file.fieldname}. –ü–æ–ª—É—á–µ–Ω: ${file.mimetype}`));
        }
    }
    else if (file.fieldname === 'videos') {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –≤–∏–¥–µ–æ
        if (file.mimetype.startsWith('video/')) {
            console.log('‚úÖ ACCEPTED as video:', file.originalname);
            cb(null, true);
        }
        else {
            console.log('‚ùå REJECTED - not a video. MIME type:', file.mimetype);
            cb(new Error(`–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã —Ä–∞–∑—Ä–µ—à–µ–Ω—ã. –ü–æ–ª—É—á–µ–Ω: ${file.mimetype}`));
        }
    }
};
// –°–æ–∑–¥–∞–µ–º multer instance
export const upload = multer({
    storage: storage,
    fileFilter: fileFilter,
    limits: {
        fileSize: 50 * 1024 * 1024, // 50MB –º–∞–∫—Å–∏–º—É–º
        files: 20 // –º–∞–∫—Å–∏–º—É–º 20 —Ñ–∞–π–ª–æ–≤ –∑–∞ —Ä–∞–∑ (1 –∞–≤–∞—Ç–∞—Ä + 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π + 5 –≤–∏–¥–µ–æ + –∑–∞–ø–∞—Å)
    }
});
// Middleware –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –¥–ª—è —Å—Ç–∏–ª–µ–π/–æ–ø—Ü–∏–π
export const uploadServiceFiles = upload.fields([
    { name: 'avatar', maxCount: 1 },
    { name: 'images', maxCount: 10 }, // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 10 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    { name: 'videos', maxCount: 5 } // –£–≤–µ–ª–∏—á–µ–Ω–æ –¥–æ 5 –≤–∏–¥–µ–æ
]);
//# sourceMappingURL=upload.js.map