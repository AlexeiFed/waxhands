/**
 * @file: backend/src/controllers/workshopRequests.ts
 * @description: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
 * @dependencies: connection.ts, types/workshop-requests.ts
 * @created: 2024-12-19
 */
import { db } from '../database/connection';
import { wsManager } from '../websocket-server';
export class WorkshopRequestsController {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ ID –∞–¥–º–∏–Ω–∞
    static async getAdminId() {
        try {
            const query = `
                SELECT id FROM users 
                WHERE role = 'admin' 
                ORDER BY created_at ASC 
                LIMIT 1
            `;
            const result = await db.query(query);
            return result.rows.length > 0 ? result.rows[0].id : null;
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ ID –∞–¥–º–∏–Ω–∞:', error);
            return null;
        }
    }
    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    static async createRequest(data) {
        try {
            // –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            const adminId = await this.getAdminId();
            if (!adminId) {
                return {
                    success: false,
                    error: '–ù–µ –Ω–∞–π–¥–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤ —Å–∏—Å—Ç–µ–º–µ'
                };
            }
            const query = `
                INSERT INTO workshop_requests (parent_id, school_name, class_group, desired_date, notes, admin_id)
                VALUES ($1, $2, $3, $4, $5, $6)
                RETURNING id
            `;
            const result = await db.query(query, [
                data.parent_id,
                data.school_name,
                data.class_group,
                data.desired_date,
                data.notes || null,
                adminId
            ]);
            const requestId = result.rows[0].id;
            // –ü–æ–ª—É—á–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–¥–∏—Ç–µ–ª–µ
            const createdRequest = await this.getRequestById(requestId);
            if (!createdRequest) {
                return {
                    success: false,
                    error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞—è–≤–∫—É'
                };
            }
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏
            try {
                if (wsManager) {
                    wsManager.notifyWorkshopRequestCreated(requestId, {
                        parentId: data.parent_id,
                        schoolName: data.school_name,
                        classGroup: data.class_group,
                        desiredDate: data.desired_date,
                        notes: data.notes
                    });
                    console.log('üìã WebSocket: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', requestId);
                }
            }
            catch (wsError) {
                console.warn('‚ö†Ô∏è WebSocket: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', wsError);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            }
            return {
                success: true,
                data: createdRequest,
                message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞'
            };
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É'
            };
        }
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID
    static async getRequestById(id) {
        try {
            const query = `
                SELECT 
                    wr.*,
                    u.name as parent_name,
                    u.surname as parent_surname,
                    u.phone as parent_phone,
                    u.email as parent_email,
                    a.name as admin_name
                FROM workshop_requests wr
                LEFT JOIN users u ON wr.parent_id = u.id
                LEFT JOIN users a ON wr.admin_id = a.id
                WHERE wr.id = $1
            `;
            const result = await db.query(query, [id]);
            if (result.rows.length === 0) {
                return null;
            }
            return result.rows[0];
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
            return null;
        }
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–æ–¥–∏—Ç–µ–ª—è—Ö
    static async getAllRequests() {
        try {
            console.log('üîç WorkshopRequestsController.getAllRequests: –ó–∞–ø—Ä–æ—Å –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫...');
            const query = `
                SELECT 
                    wr.*,
                    u.name as parent_name,
                    u.surname as parent_surname,
                    u.phone as parent_phone,
                    u.email as parent_email,
                    a.name as admin_name
                FROM workshop_requests wr
                LEFT JOIN users u ON wr.parent_id = u.id
                LEFT JOIN users a ON wr.admin_id = a.id
                ORDER BY wr.created_at DESC
            `;
            const result = await db.query(query);
            console.log('‚úÖ WorkshopRequestsController.getAllRequests: –ù–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–æ–∫:', result.rows.length);
            console.log('üìã WorkshopRequestsController.getAllRequests: –î–∞–Ω–Ω—ã–µ –∑–∞—è–≤–æ–∫:', result.rows);
            return {
                success: true,
                data: result.rows
            };
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫:', error);
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏'
            };
        }
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—è
    static async getRequestsByParentId(parentId) {
        try {
            const query = `
                SELECT 
                    wr.*,
                    u.name as parent_name,
                    u.surname as parent_surname,
                    u.phone as parent_phone,
                    u.email as parent_email,
                    a.name as admin_name
                FROM workshop_requests wr
                LEFT JOIN users u ON wr.parent_id = u.id
                LEFT JOIN users a ON wr.admin_id = a.id
                WHERE wr.parent_id = $1 
                ORDER BY wr.created_at DESC
            `;
            const result = await db.query(query, [parentId]);
            return {
                success: true,
                data: result.rows
            };
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞—è–≤–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—è:', error);
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏'
            };
        }
    }
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    static async updateRequestStatus(id, data) {
        try {
            const updateFields = [];
            const updateValues = [];
            let paramIndex = 1;
            if (data.status !== undefined) {
                updateFields.push(`status = $${paramIndex++}`);
                updateValues.push(data.status);
            }
            if (data.admin_notes !== undefined) {
                updateFields.push(`admin_notes = $${paramIndex++}`);
                updateValues.push(data.admin_notes || null);
            }
            if (updateFields.length === 0) {
                return {
                    success: false,
                    error: '–ù–µ—Ç –ø–æ–ª–µ–π –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è'
                };
            }
            updateFields.push('updated_at = CURRENT_TIMESTAMP');
            const query = `
                UPDATE workshop_requests 
                SET ${updateFields.join(', ')}
                WHERE id = $${paramIndex}
            `;
            updateValues.push(id);
            await db.query(query, updateValues);
            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É
            const updatedRequest = await this.getRequestById(id);
            if (!updatedRequest) {
                return {
                    success: false,
                    error: '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞—è–≤–∫—É'
                };
            }
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
            try {
                if (wsManager && data.status) {
                    wsManager.notifyWorkshopRequestStatusChange(id, data.status, data.admin_notes || undefined);
                    console.log('üìã WebSocket: –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏:', id);
                }
            }
            catch (wsError) {
                console.warn('‚ö†Ô∏è WebSocket: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ:', wsError);
                // –ù–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
            }
            return {
                success: true,
                data: updatedRequest,
                message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞'
            };
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É'
            };
        }
    }
    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
    static async deleteRequest(id) {
        try {
            const query = `DELETE FROM workshop_requests WHERE id = $1`;
            await db.query(query, [id]);
            return {
                success: true,
                data: true,
                message: '–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞'
            };
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞—è–≤–∫–∏:', error);
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É'
            };
        }
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫
    static async getRequestsStats() {
        try {
            console.log('üìä WorkshopRequestsController.getRequestsStats: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...');
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –∑–∞—è–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ
            const checkQuery = `SELECT COUNT(*) as count FROM workshop_requests`;
            const checkResult = await db.query(checkQuery);
            console.log('üìä WorkshopRequestsController.getRequestsStats: –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –≤ —Ç–∞–±–ª–∏—Ü–µ:', checkResult.rows[0].count);
            const query = `
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
                    SUM(CASE WHEN status = 'approved' THEN 1 ELSE 0 END) as approved,
                    SUM(CASE WHEN status = 'rejected' THEN 1 ELSE 0 END) as rejected
                FROM workshop_requests
            `;
            console.log('üìä WorkshopRequestsController.getRequestsStats: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å:', query);
            const result = await db.query(query);
            const stats = result.rows[0];
            console.log('üìä WorkshopRequestsController.getRequestsStats: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', stats);
            console.log('üìä WorkshopRequestsController.getRequestsStats: –¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:', {
                total: typeof stats.total,
                pending: typeof stats.pending,
                approved: typeof stats.approved,
                rejected: typeof stats.rejected
            });
            const processedStats = {
                total: Number(stats.total) || 0,
                pending: Number(stats.pending) || 0,
                approved: Number(stats.approved) || 0,
                rejected: Number(stats.rejected) || 0
            };
            console.log('üìä WorkshopRequestsController.getRequestsStats: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', processedStats);
            return {
                success: true,
                data: processedStats
            };
        }
        catch (error) {
            console.error('‚ùå WorkshopRequestsController.getRequestsStats: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫:', error);
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'
            };
        }
    }
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—è
    static async getRequestsStatsByParentId(parentId) {
        try {
            console.log('üìä WorkshopRequestsController.getRequestsStatsByParentId: –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è:', parentId);
            // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º, –µ—Å—Ç—å –ª–∏ –∑–∞—è–≤–∫–∏ —É —ç—Ç–æ–≥–æ —Ä–æ–¥–∏—Ç–µ–ª—è
            const checkQuery = `SELECT COUNT(*) as count FROM workshop_requests WHERE parent_id = $1`;
            const checkResult = await db.query(checkQuery, [parentId]);
            console.log('üìä WorkshopRequestsController.getRequestsStatsByParentId: –ó–∞—è–≤–æ–∫ —É —Ä–æ–¥–∏—Ç–µ–ª—è:', checkResult.rows[0].count);
            const query = `
                SELECT 
                    COUNT(*) as total,
                    SUM(CASE WHEN status = 'pending' THEN 1 ELSE 0 END) as pending,
                    SUM(CASE WHEN status = 'approved' THEN 1 ELSE 0 END) as approved,
                    SUM(CASE WHEN status = 'rejected' THEN 1 ELSE 0 END) as rejected
                FROM workshop_requests
                WHERE parent_id = $1
            `;
            console.log('üìä WorkshopRequestsController.getRequestsStatsByParentId: –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å:', query);
            const result = await db.query(query, [parentId]);
            const stats = result.rows[0];
            console.log('üìä WorkshopRequestsController.getRequestsStatsByParentId: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', stats);
            const processedStats = {
                total: Number(stats.total) || 0,
                pending: Number(stats.pending) || 0,
                approved: Number(stats.approved) || 0,
                rejected: Number(stats.rejected) || 0
            };
            console.log('üìä WorkshopRequestsController.getRequestsStatsByParentId: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', processedStats);
            return {
                success: true,
                data: processedStats
            };
        }
        catch (error) {
            console.error('‚ùå WorkshopRequestsController.getRequestsStatsByParentId: –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–æ–¥–∏—Ç–µ–ª—è:', error);
            return {
                success: false,
                error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–æ–¥–∏—Ç–µ–ª—è'
            };
        }
    }
}
//# sourceMappingURL=workshopRequests.js.map