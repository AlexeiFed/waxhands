/**
 * @file: backend/src/controllers/chat.ts
 * @description: –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
 * @dependencies: database/connection.ts, types/chat.ts
 * @created: 2024-12-19
 */
import { db } from '../database/connection';
import { v4 as uuidv4 } from 'uuid';
import { wsManager } from '../websocket-server.js';
export class ChatController {
    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
    static async createChat(req, res) {
        try {
            const { userId, message } = req.body;
            if (!userId || !message) {
                return res.status(400).json({
                    error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã userId –∏ message'
                });
            }
            // –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
            const { rows: admins } = await db.query('SELECT id FROM users WHERE role = $1 LIMIT 1', ['admin']);
            if (admins.length === 0) {
                return res.status(500).json({
                    error: '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤'
                });
            }
            const adminId = admins[0].id;
            const chatId = uuidv4();
            const messageId = uuidv4();
            // –°–æ–∑–¥–∞–µ–º —á–∞—Ç —Å –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–º –∞–¥–º–∏–Ω–æ–º
            await db.query('INSERT INTO chats (id, user_id, admin_id, status) VALUES ($1, $2, $3, $4)', [chatId, userId, adminId, 'pending']);
            // –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await db.query('INSERT INTO chat_messages (id, chat_id, sender_id, sender_type, message) VALUES ($1, $2, $3, $4, $5)', [messageId, chatId, userId, 'user', message]);
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            await db.query('UPDATE chats SET last_message_at = CURRENT_TIMESTAMP WHERE id = $1', [chatId]);
            // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            await db.query('INSERT INTO chat_notifications (id, user_id, chat_id, unread_count) VALUES ($1, $2, $3, $4)', [uuidv4(), userId, chatId, 0]);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ
            if (wsManager) {
                try {
                    wsManager.notifyNewChat(chatId, userId, adminId, message);
                    console.log('üì° WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                }
                catch (wsError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–º —á–∞—Ç–µ:', wsError);
                }
            }
            res.status(201).json({
                success: true,
                chatId,
                message: '–ß–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ'
            });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞—Ç–∞:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async getUserChats(req, res) {
        try {
            const { userId } = req.params;
            // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const { rows: chats } = await db.query(`
                SELECT 
                    c.id, c.user_id, c.admin_id, c.status, c.created_at, c.updated_at, c.last_message_at,
                    u.name as user_name, u.email as user_email, u.role as user_role,
                    a.name as admin_name, a.email as admin_email, a.role as admin_role,
                    COALESCE(cn.unread_count, 0) as unread_count
                FROM chats c
                LEFT JOIN users u ON c.user_id = u.id
                LEFT JOIN users a ON c.admin_id = a.id
                LEFT JOIN chat_notifications cn ON c.id = cn.chat_id AND cn.user_id = $1
                WHERE c.user_id = $2
                ORDER BY c.last_message_at DESC
            `, [userId, userId]);
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const { rows: totalResult } = await db.query('SELECT COUNT(*) as total FROM chats WHERE user_id = $1', [userId]);
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            const { rows: unreadResult } = await db.query(`
                SELECT COALESCE(SUM(cn.unread_count), 0) as unread_total
                FROM chat_notifications cn
                WHERE cn.user_id = $1
            `, [userId]);
            const total = parseInt(totalResult[0]?.total || '0', 10);
            const unreadTotal = parseInt(unreadResult[0]?.unread_total || '0', 10);
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è frontend
            const formattedChats = chats.map(chat => ({
                id: chat.id,
                userId: chat.user_id,
                adminId: chat.admin_id,
                status: chat.status,
                createdAt: new Date(chat.created_at),
                updatedAt: new Date(chat.updated_at),
                lastMessageAt: new Date(chat.last_message_at),
                user: {
                    id: chat.user_id,
                    name: chat.user_name,
                    email: chat.user_email,
                    role: chat.user_role
                },
                admin: chat.admin_id ? {
                    id: chat.admin_id,
                    name: chat.admin_name || '',
                    email: chat.admin_email || '',
                    role: chat.admin_role || ''
                } : undefined,
                unreadCount: chat.unread_count
            }));
            const response = {
                chats: formattedChats,
                total,
                unreadTotal
            };
            res.json(response);
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
    // –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    static async getAllChats(req, res) {
        try {
            const status = req.query.status;
            let whereClause = '';
            const params = [];
            if (status && status !== 'all') {
                whereClause = 'WHERE c.status = $1';
                params.push(status);
            }
            // –ü–æ–ª—É—á–∞–µ–º —á–∞—Ç—ã —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
            const { rows: chats } = await db.query(`
                SELECT 
                    c.id, c.user_id, c.admin_id, c.status, c.created_at, c.updated_at, c.last_message_at,
                    u.name as user_name, u.surname as user_surname, u.email as user_email, u.role as user_role,
                    a.name as admin_name, a.surname as admin_surname, a.email as admin_email, a.role as admin_role,
                    COALESCE(cn.unread_count, 0) as unread_count,
                    cm.message as last_message
                FROM chats c
                LEFT JOIN users u ON c.user_id = u.id
                LEFT JOIN users a ON c.admin_id = a.id
                LEFT JOIN chat_notifications cn ON c.id = cn.chat_id
                LEFT JOIN chat_messages cm ON c.id = cm.chat_id AND cm.created_at = c.last_message_at
                ${whereClause}
                ORDER BY c.last_message_at DESC
            `, params);
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è frontend
            const formattedChats = chats.map((chat) => ({
                id: chat.id,
                userId: chat.user_id,
                adminId: chat.admin_id || '',
                status: chat.status,
                createdAt: new Date(chat.created_at),
                updatedAt: new Date(chat.updated_at),
                lastMessageAt: new Date(chat.last_message_at),
                lastMessage: chat.last_message || '',
                user: {
                    id: chat.user_id,
                    name: chat.user_name || '',
                    surname: chat.user_surname || '',
                    email: chat.user_email || '',
                    role: chat.user_role || 'user'
                },
                admin: chat.admin_id ? {
                    id: chat.admin_id,
                    name: chat.admin_name || '',
                    email: chat.admin_email || '',
                    role: chat.admin_role || ''
                } : {
                    id: '',
                    name: '',
                    email: '',
                    role: ''
                },
                unreadCount: chat.unread_count
            }));
            const response = {
                chats: formattedChats,
                total: chats.length, // –í—Å–µ —á–∞—Ç—ã, –Ω–µ—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                unreadTotal: 0 // –î–ª—è –∞–¥–º–∏–Ω–∞ –Ω–µ —Å—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            };
            res.json(response);
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    static async getChatMessages(req, res) {
        try {
            const { chatId } = req.params;
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
            const { rows: messages } = await db.query(`
                SELECT 
                    cm.id, cm.chat_id, cm.sender_id, cm.sender_type, cm.message, cm.message_type, cm.file_url, cm.is_read, cm.created_at,
                    u.name as sender_name, u.surname as sender_surname, u.email as sender_email, u.role as sender_role
                FROM chat_messages cm
                LEFT JOIN users u ON cm.sender_id = u.id
                WHERE cm.chat_id = $1
                ORDER BY cm.created_at ASC
            `, [chatId]);
            // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è frontend
            const formattedMessages = messages.map((msg) => {
                const message = {
                    id: msg.id,
                    chatId: msg.chat_id,
                    senderId: msg.sender_id,
                    senderType: msg.sender_type || 'user',
                    message: msg.message,
                    messageType: (msg.message_type || 'text'),
                    isRead: msg.is_read || false,
                    createdAt: new Date(msg.created_at),
                    sender: {
                        id: msg.sender_id,
                        name: msg.sender_name || '',
                        role: msg.sender_role || 'user'
                    }
                };
                // –î–æ–±–∞–≤–ª—è–µ–º fileUrl —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (msg.file_url) {
                    message.fileUrl = msg.file_url;
                }
                return message;
            });
            // –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            const { rows: totalResult } = await db.query('SELECT COUNT(*) as total FROM chat_messages WHERE chat_id = $1', [chatId]);
            const total = parseInt(totalResult[0]?.total || '0', 10);
            const hasMore = total > 0; // Always true if total > 0
            const response = {
                messages: formattedMessages.reverse(), // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                total,
                hasMore
            };
            res.json(response);
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —á–∞—Ç–∞:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    static async sendMessage(req, res) {
        try {
            console.log('üöÄ sendMessage –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', {
                body: req.body,
                user: req.user,
                headers: req.headers['authorization'] ? '—Ç–æ–∫–µ–Ω –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç' : '—Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'
            });
            const { chatId, message, messageType = 'text', fileUrl } = req.body;
            const senderId = req.user?.userId;
            const senderType = req.user?.role === 'admin' ? 'admin' : 'user';
            if (!chatId || !message) {
                return res.status(400).json({
                    error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã chatId –∏ message'
                });
            }
            if (!senderId) {
                return res.status(401).json({
                    error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω'
                });
            }
            const messageId = uuidv4();
            console.log('üìù –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤—Å—Ç–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', {
                messageId,
                chatId,
                senderId,
                senderType,
                message: typeof message === 'string' ? message.substring(0, 50) + '...' : String(message),
                messageType: messageType || 'text',
                fileUrl: fileUrl || null
            });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —á–∞—Ç–∞
            const { rows: chatExists } = await db.query('SELECT id FROM chats WHERE id = $1', [chatId]);
            if (chatExists.length === 0) {
                console.error('‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', chatId);
                return res.status(404).json({
                    error: '–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω'
                });
            }
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –Ω–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
            if (senderType === 'user') {
                const { rows: userExists } = await db.query('SELECT id FROM users WHERE id = $1', [senderId]);
                if (userExists.length === 0) {
                    console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω:', senderId);
                    return res.status(404).json({
                        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω'
                    });
                }
            }
            // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await db.query('INSERT INTO chat_messages (id, chat_id, sender_id, sender_type, message, message_type, file_url) VALUES ($1, $2, $3, $4, $5, $6, $7)', [messageId, chatId, senderId, senderType, message, messageType || 'text', fileUrl || null]);
            console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ë–î');
            // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç–µ
            await db.query('UPDATE chats SET last_message_at = CURRENT_TIMESTAMP WHERE id = $1', [chatId]);
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è
            if (senderType === 'user') {
                // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –∞–¥–º–∏–Ω–∞
                await db.query(`
                    UPDATE chat_notifications 
                    SET unread_count = unread_count + 1, updated_at = CURRENT_TIMESTAMP
                    WHERE chat_id = $1 AND user_id != $2
                `, [chatId, senderId]);
            }
            else {
                // –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const { rows: chatResult } = await db.query('SELECT user_id FROM chats WHERE id = $1', [chatId]);
                const userId = chatResult[0]?.user_id;
                if (userId) {
                    await db.query(`
                        UPDATE chat_notifications 
                        SET unread_count = unread_count + 1, updated_at = CURRENT_TIMESTAMP
                        WHERE chat_id = $1 AND user_id = $2
                    `, [chatId, userId]);
                }
            }
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if (wsManager) {
                try {
                    wsManager.notifyChatMessage(chatId, {
                        id: messageId,
                        message,
                        senderType,
                        timestamp: new Date().toISOString()
                    }, senderId, senderType);
                    console.log('üì° WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                    wsManager.notifyUnreadCountUpdate(chatId);
                    console.log('üì° WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                }
                catch (wsError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:', wsError);
                }
            }
            res.json({
                success: true,
                messageId,
                message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
            });
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                chatId: req.body.chatId,
                senderId: req.user?.userId,
                senderType: req.user?.role === 'admin' ? 'admin' : 'user',
                messageType: req.body.messageType,
                fileUrl: req.body.fileUrl,
                stack: error instanceof Error ? error.stack : 'No stack trace'
            });
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
    // –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    static async markAsRead(req, res) {
        try {
            const { chatId, userId } = req.body;
            if (!chatId || !userId) {
                return res.status(400).json({
                    error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã chatId –∏ userId'
                });
            }
            // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            await db.query(`
                UPDATE chat_messages 
                SET is_read = TRUE 
                WHERE chat_id = $1 AND sender_id != $2
            `, [chatId, userId]);
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await db.query(`
                UPDATE chat_notifications 
                SET unread_count = 0, last_read_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP
                WHERE chat_id = $1 AND user_id = $2
            `, [chatId, userId]);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
            if (wsManager) {
                try {
                    wsManager.notifyChatStatusChange(chatId, 'messages_read', userId);
                    console.log('üì° WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                }
                catch (wsError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', wsError);
                }
            }
            res.json({
                success: true,
                message: '–°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ'
            });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
    // –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    static async markMessageAsRead(req, res) {
        try {
            const { messageId, chatId, readerId, readerRole } = req.body;
            if (!messageId || !chatId || !readerId || !readerRole) {
                return res.status(400).json({
                    error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã messageId, chatId, readerId –∏ readerRole'
                });
            }
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            await db.query(`
                UPDATE chat_messages 
                SET is_read = true, read_at = CURRENT_TIMESTAMP, read_by = array_append(COALESCE(read_by, ARRAY[]::text[]), $1)
                WHERE id = $2 AND chat_id = $3
            `, [readerId, messageId, chatId]);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
            if (wsManager) {
                try {
                    wsManager.notifyChatStatusChange(chatId, 'message_read', readerId);
                    console.log('üì° WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                }
                catch (wsError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—á—Ç–µ–Ω–∏–∏:', wsError);
                }
            }
            res.json({
                success: true,
                message: '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–º–µ—á–µ–Ω–æ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ'
            });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞
    static async updateChatStatus(req, res) {
        try {
            const { chatId, status, adminId } = req.body;
            if (!chatId || !status) {
                return res.status(400).json({
                    error: '–ù–µ–æ–±—Ö–æ–¥–∏–º—ã chatId –∏ status'
                });
            }
            let updateQuery = 'UPDATE chats SET status = $1';
            const params = [status];
            if (adminId) {
                updateQuery += ', admin_id = $2';
                params.push(adminId);
            }
            updateQuery += ', updated_at = CURRENT_TIMESTAMP WHERE id = $' + (params.length + 1);
            params.push(chatId);
            await db.query(updateQuery, params);
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
            if (wsManager) {
                try {
                    wsManager.notifyChatStatusChange(chatId, status, adminId);
                    console.log('üì° WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
                }
                catch (wsError) {
                    console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ:', wsError);
                }
            }
            res.json({
                success: true,
                message: '–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω'
            });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    static async getUnreadCount(req, res) {
        try {
            const { userId } = req.params;
            const { rows: result } = await db.query(`
                SELECT COALESCE(SUM(unread_count), 0) as unread_total
                FROM chat_notifications
                WHERE user_id = $1
            `, [userId]);
            const unreadTotal = parseInt(result[0]?.unread_total || '0', 10);
            res.json({ unreadTotal });
        }
        catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
            res.status(500).json({
                error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
            });
        }
    }
}
//# sourceMappingURL=chat.js.map