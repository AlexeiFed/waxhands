import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { api } from '../lib/api';
import { User, UserRole, LoginCredentials, RegisterData, ChildData } from '../types';

// –¢–∏–ø—ã –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface AuthContextType {
    user: User | null;
    loading: boolean;
    login: (credentials: LoginCredentials) => Promise<boolean>;
    register: (userData: RegisterData) => Promise<void>;
    logout: () => void;
    updateProfile: (data: Partial<User>) => Promise<void>;
    isAuthenticated: boolean;
}

// –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
const AuthContext = createContext<AuthContextType | undefined>(undefined);

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
interface AuthProviderProps {
    children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
    const [user, setUser] = useState<User | null>(null);
    const [loading, setLoading] = useState(true);
    const [isAuthenticated, setIsAuthenticated] = useState(false);

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        const checkAuth = async () => {
            try {
                setLoading(true);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
                if (api.auth.isAuthenticated()) {
                    try {
                        // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                        const profile = await api.auth.getProfile();
                        setUser({ ...profile, role: profile.role as UserRole });
                        setIsAuthenticated(true);
                        console.log('Auth check successful, user:', profile);
                    } catch (profileError) {
                        console.error('Profile fetch failed, token may be invalid:', profileError);
                        // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        api.auth.logout();
                        setUser(null);
                        setIsAuthenticated(false);
                    }
                } else {
                    // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç, –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                    setUser(null);
                    setIsAuthenticated(false);
                    console.log('No auth token found');
                }
            } catch (error) {
                console.error('Auth check failed:', error);
                // –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º –µ–≥–æ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                api.auth.logout();
                setUser(null);
                setIsAuthenticated(false);
            } finally {
                setLoading(false);
            }
        };

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏
        const timer = setTimeout(checkAuth, 100);

        return () => clearTimeout(timer);
    }, []);

    // –§—É–Ω–∫—Ü–∏—è –≤—Ö–æ–¥–∞
    const login = async (credentials: LoginCredentials): Promise<boolean> => {
        try {
            setLoading(true);
            const response = await api.auth.login(credentials);
            setUser({ ...response.user, role: response.user.role as UserRole });
            setIsAuthenticated(true);
            return true;
        } catch (error) {
            console.error('Login failed:', error);
            return false;
        } finally {
            setLoading(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const register = async (userData: RegisterData) => {
        try {
            setLoading(true);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
            const registrationData = {
                ...userData,
                // –ï—Å–ª–∏ —ç—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å —Å –¥–µ—Ç—å–º–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                ...(userData.role === 'parent' && userData.children && {
                    children: userData.children
                })
            };

            const response = await api.auth.register(registrationData);

            // –ï—Å–ª–∏ —ç—Ç–æ —Ä–æ–¥–∏—Ç–µ–ª—å —Å –¥–µ—Ç—å–º–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–µ–π –≤ localStorage
            if (userData.role === 'parent' && userData.children && response.user.children) {
                localStorage.setItem('registered_children', JSON.stringify(response.user.children));
                console.log('üë∂ –î–µ—Ç–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ localStorage:', response.user.children);
            }

            setUser({ ...response.user, role: response.user.role as UserRole });
            setIsAuthenticated(true);
        } catch (error) {
            console.error('Registration failed:', error);
            throw error;
        } finally {
            setLoading(false);
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –≤—ã—Ö–æ–¥–∞
    const logout = () => {
        api.auth.logout();
        setUser(null);
        setIsAuthenticated(false);
    };

    // –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    const updateProfile = async (data: Partial<User>) => {
        try {
            setLoading(true);
            const updatedUser = await api.auth.updateProfile(data);
            setUser({ ...updatedUser, role: updatedUser.role as UserRole });
        } catch (error) {
            console.error('Profile update failed:', error);
            throw error;
        } finally {
            setLoading(false);
        }
    };

    const value: AuthContextType = {
        user,
        loading,
        login,
        register,
        logout,
        updateProfile,
        isAuthenticated,
    };

    return (
        <AuthContext.Provider value={value}>
            {children}
        </AuthContext.Provider>
    );
};

// –•—É–∫ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
export const useAuth = (): AuthContextType => {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

// –≠–∫—Å–ø–æ—Ä—Ç —Ç–∏–ø–æ–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export type { UserRole }; 