/**
 * @file: src/components/admin/AboutTab.tsx
 * @description: –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û –Ω–∞—Å" –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
 * @dependencies: use-about-api.ts, shadcn/ui, lucide-react
 * @created: 2024-12-19
 * @updated: 2024-12-19
 */

import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { useAboutContent, useAboutMedia, useAboutWebSocket, type AboutContent, type AboutMedia } from '@/hooks/use-about-api';
import { useServices } from '@/hooks/use-services';
import { Trash2, Edit, Save, X, Plus, Upload, GripVertical, FileImage, FileVideo, Eye } from 'lucide-react';
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogCancel,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogTrigger,
} from '@/components/ui/alert-dialog';

const AboutTab: React.FC = () => {
    const { toast } = useToast();
    const { content, loading: contentLoading, updateContent } = useAboutContent();
    const { media, loading: mediaLoading, addMedia, updateMedia, deleteMedia, reorderMedia } = useAboutMedia();
    const { lastUpdate } = useAboutWebSocket();
    const { services, loading: servicesLoading, fetchServices, updateService } = useServices();

    const [editingField, setEditingField] = useState<string | null>(null);
    const [editValue, setEditValue] = useState('');
    const [isAddingMedia, setIsAddingMedia] = useState(false);
    const [newMediaFile, setNewMediaFile] = useState<File | null>(null);
    const [newMediaData, setNewMediaData] = useState({
        title: '',
        description: '',
        type: 'image' as 'image' | 'video'
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
    const [editingMedia, setEditingMedia] = useState<AboutMedia | null>(null);
    const [editMediaData, setEditMediaData] = useState({
        title: '',
        description: ''
    });

    // Drag & Drop —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    const [draggedItem, setDraggedItem] = useState<AboutMedia | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞
    const [viewingMedia, setViewingMedia] = useState<AboutMedia | null>(null);
    const [isViewModalOpen, setIsViewModalOpen] = useState(false);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ WebSocket —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    React.useEffect(() => {
        if (lastUpdate > 0) {
            console.log('üîÑ –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ about —á–µ—Ä–µ–∑ WebSocket, –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ');
        }
    }, [lastUpdate]);

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —É—Å–ª—É–≥–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    React.useEffect(() => {
        fetchServices();
    }, [fetchServices]);

    const handleEdit = (field: string, value: string) => {
        setEditingField(field);
        setEditValue(value);
    };

    const handleSave = async (field: keyof AboutContent) => {
        if (!content) return;

        const success = await updateContent(content.id, { [field]: editValue });
        if (success) {
            setEditingField(null);
            setEditValue('');
        }
    };

    const handleCancel = () => {
        setEditingField(null);
        setEditValue('');
    };

    const handleSaveService = async (serviceId: string, field: 'name' | 'shortDescription' | 'fullDescription', value: string) => {
        try {
            await updateService(serviceId, { [field]: value });
            setEditingField(null);
            setEditValue('');
            toast({
                title: "–£—Å–ø–µ—à–Ω–æ",
                description: "–£—Å–ª—É–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞",
            });
        } catch (error) {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —É—Å–ª—É–≥—É",
                variant: "destructive",
            });
        }
    };

    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ–¥–∏–∞
    const handleEditMedia = (item: AboutMedia) => {
        setEditingMedia(item);
        setEditMediaData({
            title: item.title,
            description: item.description || ''
        });
    };

    const handleSaveMedia = async () => {
        if (!editingMedia) return;

        const success = await updateMedia(editingMedia.id, editMediaData);
        if (success) {
            setEditingMedia(null);
            setEditMediaData({ title: '', description: '' });
            toast({
                title: "–£—Å–ø–µ—à–Ω–æ",
                description: "–ú–µ–¥–∏–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ",
            });
        }
    };

    const handleCancelMedia = () => {
        setEditingMedia(null);
        setEditMediaData({ title: '', description: '' });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞
    const handleViewMedia = (media: AboutMedia) => {
        console.log('üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞:', {
            id: media.id,
            title: media.title,
            type: media.type,
            filename: media.filename,
            file_path: media.file_path
        });
        setViewingMedia(media);
        setIsViewModalOpen(true);
    };

    const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (file) {
            const maxSize = 5 * 1024 * 1024;
            if (file.size > maxSize) {
                toast({
                    title: "–û—à–∏–±–∫–∞",
                    description: `–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${maxSize / 1024 / 1024}MB`,
                    variant: "destructive",
                });
                return;
            }

            setNewMediaFile(file);
            setNewMediaData(prev => ({
                ...prev,
                type: file.type.startsWith('image/') ? 'image' : 'video',
                title: prev.title || file.name.split('.')[0]
            }));
        }
    };

    const handleAddMedia = async () => {
        if (!newMediaFile) return;

        const filename = `${newMediaData.type}-${Date.now()}-${Math.random().toString(36).substr(2, 9)}.${newMediaFile.name.split('.').pop()}`;
        const filePath = `/uploads/${newMediaData.type === 'image' ? 'images' : 'videos'}/${filename}`;

        const success = await addMedia({
            filename,
            original_name: newMediaFile.name,
            type: newMediaData.type,
            title: newMediaData.title,
            description: newMediaData.description,
            file_path: filePath
        });

        if (success) {
            setIsAddingMedia(false);
            setNewMediaFile(null);
            setNewMediaData({ title: '', description: '', type: 'image' });
            toast({
                title: "–£—Å–ø–µ—à–Ω–æ",
                description: "–ú–µ–¥–∏–∞ –¥–æ–±–∞–≤–ª–µ–Ω–æ",
            });
        }
    };

    const handleDeleteMedia = async (id: number) => {
        const success = await deleteMedia(id);
        if (success) {
            toast({
                title: "–£—Å–ø–µ—à–Ω–æ",
                description: "–ú–µ–¥–∏–∞ —É–¥–∞–ª–µ–Ω–æ",
            });
        }
    };

    // Drag & Drop —Ñ—É–Ω–∫—Ü–∏–∏
    const handleDragStart = (e: React.DragEvent, item: AboutMedia) => {
        setDraggedItem(item);
        e.dataTransfer.effectAllowed = 'move';
    };

    const handleDragOver = (e: React.DragEvent) => {
        e.preventDefault();
        e.dataTransfer.dropEffect = 'move';
    };

    const handleDrop = async (e: React.DragEvent, targetItem: AboutMedia) => {
        e.preventDefault();
        if (!draggedItem || draggedItem.id === targetItem.id) return;

        const draggedIndex = media.findIndex(item => item.id === draggedItem.id);
        const targetIndex = media.findIndex(item => item.id === targetItem.id);

        if (draggedIndex !== -1 && targetIndex !== -1) {
            const newOrder = [...media];
            const [removed] = newOrder.splice(draggedIndex, 1);
            newOrder.splice(targetIndex, 0, removed);

            // –û–±–Ω–æ–≤–ª—è–µ–º order_index –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const updatedOrder = newOrder.map((item, index) => ({
                ...item,
                order_index: index + 1
            }));

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
            const mediaIds = updatedOrder.map(item => item.id);
            await reorderMedia(mediaIds);
        }

        setDraggedItem(null);
    };

    if (contentLoading || mediaLoading) {
        return (
            <div className="flex items-center justify-center h-64">
                <div className="text-center">
                    <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500 mx-auto mb-2"></div>
                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞...</p>
                </div>
            </div>
        );
    }

    if (!content) {
        return (
            <div className="text-center py-8">
                <p className="text-red-500">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞</p>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç */}
                <div className="space-y-6">
                    {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                    <Card>
                        <CardHeader>
                            <CardTitle>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div>
                                <Label>–ó–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                                {editingField === 'title' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Input
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                        />
                                        <Button size="sm" onClick={() => handleSave('title')}>
                                            <Save className="w-4 h-4" />
                                        </Button>
                                        <Button size="sm" variant="outline" onClick={handleCancel}>
                                            <X className="w-4 h-4" />
                                        </Button>
                                    </div>
                                ) : (
                                    <div className="flex items-center justify-between mt-1">
                                        <span className="text-lg font-medium">{content.title}</span>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('title', content.title)}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>

                            <div>
                                <Label>–ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫</Label>
                                {editingField === 'subtitle' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Input
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                        />
                                        <Button size="sm" onClick={() => handleSave('subtitle')}>
                                            <Save className="w-4 h-4" />
                                        </Button>
                                        <Button size="sm" variant="outline" onClick={handleCancel}>
                                            <X className="w-4 h-4" />
                                        </Button>
                                    </div>
                                ) : (
                                    <div className="flex items-center justify-between mt-1">
                                        <span className="text-gray-600">{content.subtitle}</span>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('subtitle', content.subtitle)}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>

                            <div>
                                <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                                {editingField === 'description' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Textarea
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                            rows={4}
                                        />
                                        <div className="flex flex-col gap-2">
                                            <Button size="sm" onClick={() => handleSave('description')}>
                                                <Save className="w-4 h-4" />
                                            </Button>
                                            <Button size="sm" variant="outline" onClick={handleCancel}>
                                                <X className="w-4 h-4" />
                                            </Button>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="flex items-start justify-between mt-1">
                                        <p className="text-gray-600 flex-1">{content.description}</p>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('description', content.description)}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>
                        </CardContent>
                    </Card>

                    {/* –ö–∞—Ä—Ç–æ—á–∫–∞ "–û –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏" */}
                    <Card>
                        <CardHeader>
                            <CardTitle>–ö–∞—Ä—Ç–æ—á–∫–∞ "–û –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏"</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div>
                                <Label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏</Label>
                                {editingField === 'studio_title' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Input
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                        />
                                        <Button size="sm" onClick={() => handleSave('studio_title')}>
                                            <Save className="w-4 h-4" />
                                        </Button>
                                        <Button size="sm" variant="outline" onClick={handleCancel}>
                                            <X className="w-4 h-4" />
                                        </Button>
                                    </div>
                                ) : (
                                    <div className="flex items-center justify-between mt-1">
                                        <span className="text-gray-600">{content.studio_title}</span>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('studio_title', content.studio_title)}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>

                            <div>
                                <Label>–û–ø–∏—Å–∞–Ω–∏–µ —Å—Ç—É–¥–∏–∏</Label>
                                {editingField === 'studio_description' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Textarea
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                            rows={3}
                                        />
                                        <div className="flex flex-col gap-2">
                                            <Button size="sm" onClick={() => handleSave('studio_description')}>
                                                <Save className="w-4 h-4" />
                                            </Button>
                                            <Button size="sm" variant="outline" onClick={handleCancel}>
                                                <X className="w-4 h-4" />
                                            </Button>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="flex items-start justify-between mt-1">
                                        <p className="text-gray-600 flex-1">{content.studio_description}</p>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('studio_description', content.studio_description)}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>
                        </CardContent>
                    </Card>

                    {/* –ö–∞—Ä—Ç–æ—á–∫–∞ "–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞" */}
                    <Card>
                        <CardHeader>
                            <CardTitle>–ö–∞—Ä—Ç–æ—á–∫–∞ "–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞"</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div>
                                <Label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏</Label>
                                {editingField === 'advantages_title' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Input
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                        />
                                        <Button size="sm" onClick={() => handleSave('advantages_title')}>
                                            <Save className="w-4 h-4" />
                                        </Button>
                                        <Button size="sm" variant="outline" onClick={handleCancel}>
                                            <X className="w-4 h-4" />
                                        </Button>
                                    </div>
                                ) : (
                                    <div className="flex items-center justify-between mt-1">
                                        <span className="text-gray-600">{content.advantages_title}</span>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('advantages_title', content.advantages_title)}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>

                            <div>
                                <Label>–°–ø–∏—Å–æ–∫ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤</Label>
                                {editingField === 'advantages_list' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Textarea
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                            rows={6}
                                            placeholder="–ö–∞–∂–¥–æ–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏"
                                        />
                                        <div className="flex flex-col gap-2">
                                            <Button size="sm" onClick={() => handleSave('advantages_list')}>
                                                <Save className="w-4 h-4" />
                                            </Button>
                                            <Button size="sm" variant="outline" onClick={handleCancel}>
                                                <X className="w-4 h-4" />
                                            </Button>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="flex items-start justify-between mt-1">
                                        <div className="flex-1">
                                            <div className="space-y-2">
                                                {content.advantages_list.map((advantage, index) => (
                                                    <div key={index} className="border-l-2 border-purple-500 pl-3">
                                                        <div className="text-sm text-gray-600">{advantage}</div>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('advantages_list', content.advantages_list.join('\n'))}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>
                        </CardContent>
                    </Card>

                    {/* –ö–∞—Ä—Ç–æ—á–∫–∞ "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å" */}
                    <Card>
                        <CardHeader>
                            <CardTitle>–ö–∞—Ä—Ç–æ—á–∫–∞ "–ö–∞–∫ –ø—Ä–æ—Ö–æ–¥–∏—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å"</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div>
                                <Label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏</Label>
                                {editingField === 'process_title' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Input
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                        />
                                        <Button size="sm" onClick={() => handleSave('process_title')}>
                                            <Save className="w-4 h-4" />
                                        </Button>
                                        <Button size="sm" variant="outline" onClick={handleCancel}>
                                            <X className="w-4 h-4" />
                                        </Button>
                                    </div>
                                ) : (
                                    <div className="flex items-center justify-between mt-1">
                                        <span className="text-gray-600">{content.process_title}</span>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('process_title', content.process_title)}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>

                            <div>
                                <Label>–®–∞–≥–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞</Label>
                                {editingField === 'process_steps' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Textarea
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                            rows={8}
                                            placeholder="JSON —Ñ–æ—Ä–º–∞—Ç: [{'title': '–ó–∞–≥–æ–ª–æ–≤–æ–∫', 'description': '–û–ø–∏—Å–∞–Ω–∏–µ'}]"
                                        />
                                        <div className="flex flex-col gap-2">
                                            <Button size="sm" onClick={() => handleSave('process_steps')}>
                                                <Save className="w-4 h-4" />
                                            </Button>
                                            <Button size="sm" variant="outline" onClick={handleCancel}>
                                                <X className="w-4 h-4" />
                                            </Button>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="flex items-start justify-between mt-1">
                                        <div className="flex-1">
                                            <div className="space-y-2">
                                                {content.process_steps.map((step, index) => (
                                                    <div key={index} className="border-l-2 border-blue-500 pl-3">
                                                        <div className="font-medium text-gray-800">{step.title}</div>
                                                        <div className="text-sm text-gray-600">{step.description}</div>
                                                    </div>
                                                ))}
                                            </div>
                                        </div>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('process_steps', JSON.stringify(content.process_steps, null, 2))}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>
                        </CardContent>
                    </Card>

                    {/* –ö–∞—Ä—Ç–æ—á–∫–∞ "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ" */}
                    <Card>
                        <CardHeader>
                            <CardTitle>–ö–∞—Ä—Ç–æ—á–∫–∞ "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ"</CardTitle>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div>
                                <Label>–ó–∞–≥–æ–ª–æ–≤–æ–∫ –∫–∞—Ä—Ç–æ—á–∫–∏</Label>
                                {editingField === 'safety_title' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Input
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                        />
                                        <Button size="sm" onClick={() => handleSave('safety_title')}>
                                            <Save className="w-4 h-4" />
                                        </Button>
                                        <Button size="sm" variant="outline" onClick={handleCancel}>
                                            <X className="w-4 h-4" />
                                        </Button>
                                    </div>
                                ) : (
                                    <div className="flex items-center justify-between mt-1">
                                        <span className="text-gray-600">{content.safety_title}</span>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('safety_title', content.safety_title)}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>

                            <div>
                                <Label>–û–ø–∏—Å–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏</Label>
                                {editingField === 'safety_description' ? (
                                    <div className="flex gap-2 mt-1">
                                        <Textarea
                                            value={editValue}
                                            onChange={(e) => setEditValue(e.target.value)}
                                            className="flex-1"
                                            rows={3}
                                        />
                                        <div className="flex flex-col gap-2">
                                            <Button size="sm" onClick={() => handleSave('safety_description')}>
                                                <Save className="w-4 h-4" />
                                            </Button>
                                            <Button size="sm" variant="outline" onClick={handleCancel}>
                                                <X className="w-4 h-4" />
                                            </Button>
                                        </div>
                                    </div>
                                ) : (
                                    <div className="flex items-start justify-between mt-1">
                                        <p className="text-gray-600 flex-1">{content.safety_description}</p>
                                        <Button
                                            size="sm"
                                            variant="ghost"
                                            onClick={() => handleEdit('safety_description', content.safety_description)}
                                        >
                                            <Edit className="w-4 h-4" />
                                        </Button>
                                    </div>
                                )}
                            </div>
                        </CardContent>
                    </Card>
                </div>

                {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ú–µ–¥–∏–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ */}
                <div className="space-y-6">
                    {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞ */}
                    <Card>
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <Upload className="w-5 h-5" />
                                –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç
                            </CardTitle>
                            <p className="text-sm text-muted-foreground">
                                –£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û –Ω–∞—Å"
                            </p>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <Button
                                onClick={() => setIsAddingMedia(true)}
                                className="w-full bg-gradient-to-r from-blue-500 to-purple-500"
                            >
                                <Plus className="w-4 h-4 mr-2" />
                                –î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞
                            </Button>

                            {/* –°–ø–∏—Å–æ–∫ –º–µ–¥–∏–∞ */}
                            <div className="space-y-3">
                                {media.map((item) => (
                                    <div
                                        key={item.id}
                                        className={`flex items-center gap-3 p-3 border rounded-lg ${draggedItem?.id === item.id ? 'opacity-50' : ''}`}
                                        draggable
                                        onDragStart={(e) => handleDragStart(e, item)}
                                        onDragOver={handleDragOver}
                                        onDrop={(e) => handleDrop(e, item)}
                                    >
                                        <div className="flex-shrink-0 cursor-move">
                                            <GripVertical className="w-4 h-4 text-gray-400" />
                                        </div>

                                        <div className="flex-shrink-0">
                                            {item.type === 'image' ? (
                                                <FileImage className="w-8 h-8 text-blue-500" />
                                            ) : (
                                                <FileVideo className="w-8 h-8 text-purple-500" />
                                            )}
                                        </div>

                                        <div className="flex-1 min-w-0">
                                            {editingMedia?.id === item.id ? (
                                                <div className="space-y-2">
                                                    <Input
                                                        value={editMediaData.title}
                                                        onChange={(e) => setEditMediaData(prev => ({ ...prev, title: e.target.value }))}
                                                        placeholder="–ù–∞–∑–≤–∞–Ω–∏–µ"
                                                        size={1}
                                                    />
                                                    <Textarea
                                                        value={editMediaData.description}
                                                        onChange={(e) => setEditMediaData(prev => ({ ...prev, description: e.target.value }))}
                                                        placeholder="–û–ø–∏—Å–∞–Ω–∏–µ"
                                                        rows={2}
                                                    />
                                                </div>
                                            ) : (
                                                <>
                                                    <div className="font-medium truncate">{item.title}</div>
                                                    <div className="text-sm text-gray-500 truncate">
                                                        {item.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
                                                    </div>
                                                    <div className="text-xs text-gray-400">
                                                        {item.filename}
                                                    </div>
                                                </>
                                            )}
                                        </div>

                                        <Badge variant="secondary">
                                            {item.order_index}
                                        </Badge>

                                        <div className="flex gap-1">
                                            {editingMedia?.id === item.id ? (
                                                <>
                                                    <Button size="sm" onClick={handleSaveMedia}>
                                                        <Save className="w-4 h-4" />
                                                    </Button>
                                                    <Button size="sm" variant="outline" onClick={handleCancelMedia}>
                                                        <X className="w-4 h-4" />
                                                    </Button>
                                                </>
                                            ) : (
                                                <>
                                                    <Button size="sm" variant="ghost" onClick={() => handleViewMedia(item)}>
                                                        <Eye className="w-4 h-4" />
                                                    </Button>
                                                    <Button size="sm" variant="ghost" onClick={() => handleEditMedia(item)}>
                                                        <Edit className="w-4 h-4" />
                                                    </Button>
                                                    <AlertDialog>
                                                        <AlertDialogTrigger asChild>
                                                            <Button size="sm" variant="ghost" className="text-red-500 hover:text-red-700">
                                                                <Trash2 className="w-4 h-4" />
                                                            </Button>
                                                        </AlertDialogTrigger>
                                                        <AlertDialogContent>
                                                            <AlertDialogHeader>
                                                                <AlertDialogTitle>–£–¥–∞–ª–∏—Ç—å –º–µ–¥–∏–∞?</AlertDialogTitle>
                                                                <AlertDialogDescription>
                                                                    –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ú–µ–¥–∏–∞-—Ñ–∞–π–ª –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.
                                                                </AlertDialogDescription>
                                                            </AlertDialogHeader>
                                                            <AlertDialogFooter>
                                                                <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
                                                                <AlertDialogAction
                                                                    onClick={() => handleDeleteMedia(item.id)}
                                                                    className="bg-red-500 hover:bg-red-600"
                                                                >
                                                                    –£–¥–∞–ª–∏—Ç—å
                                                                </AlertDialogAction>
                                                            </AlertDialogFooter>
                                                        </AlertDialogContent>
                                                    </AlertDialog>
                                                </>
                                            )}
                                        </div>
                                    </div>
                                ))}

                                {media.length === 0 && (
                                    <div className="text-center py-8 text-gray-500">
                                        <Upload className="w-12 h-12 mx-auto mb-2 text-gray-300" />
                                        <p>–ú–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã</p>
                                        <p className="text-sm">–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏ –≤–∏–¥–µ–æ –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û –Ω–∞—Å"</p>
                                    </div>
                                )}
                            </div>
                        </CardContent>
                    </Card>

                    {/* –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–û –Ω–∞—à–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ" */}
                    <Card>
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <span className="text-2xl">üé®</span>
                                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ "–û –Ω–∞—à–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ"
                            </CardTitle>
                            <p className="text-sm text-muted-foreground">
                                –†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è —Ä–æ–¥–∏—Ç–µ–ª—è–º
                            </p>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            {servicesLoading ? (
                                <div className="text-center py-4">
                                    <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-orange-500 mx-auto mb-2"></div>
                                    <p>–ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥...</p>
                                </div>
                            ) : services.length > 0 ? (
                                <div className="space-y-4">
                                    {services.map((service) => (
                                        <div key={service.id} className="border border-gray-200 rounded-lg p-4">
                                            <div className="space-y-3">
                                                <div>
                                                    <Label className="text-sm font-medium text-gray-600">–ù–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏</Label>
                                                    {editingField === `service_name_${service.id}` ? (
                                                        <div className="flex gap-2 mt-1">
                                                            <Input
                                                                value={editValue}
                                                                onChange={(e) => setEditValue(e.target.value)}
                                                                className="flex-1"
                                                            />
                                                            <Button size="sm" onClick={() => handleSaveService(service.id, 'name', editValue)}>
                                                                <Save className="w-4 h-4" />
                                                            </Button>
                                                            <Button size="sm" variant="outline" onClick={handleCancel}>
                                                                <X className="w-4 h-4" />
                                                            </Button>
                                                        </div>
                                                    ) : (
                                                        <div className="flex items-center justify-between mt-1">
                                                            <span className="text-gray-800">{service.name}</span>
                                                            <Button
                                                                size="sm"
                                                                variant="ghost"
                                                                onClick={() => handleEdit(`service_name_${service.id}`, service.name)}
                                                            >
                                                                <Edit className="w-4 h-4" />
                                                            </Button>
                                                        </div>
                                                    )}
                                                </div>

                                                <div>
                                                    <Label className="text-sm font-medium text-gray-600">–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</Label>
                                                    {editingField === `service_short_${service.id}` ? (
                                                        <div className="flex gap-2 mt-1">
                                                            <Textarea
                                                                value={editValue}
                                                                onChange={(e) => setEditValue(e.target.value)}
                                                                className="flex-1"
                                                                rows={2}
                                                            />
                                                            <div className="flex flex-col gap-2">
                                                                <Button size="sm" onClick={() => handleSaveService(service.id, 'shortDescription', editValue)}>
                                                                    <Save className="w-4 h-4" />
                                                                </Button>
                                                                <Button size="sm" variant="outline" onClick={handleCancel}>
                                                                    <X className="w-4 h-4" />
                                                                </Button>
                                                            </div>
                                                        </div>
                                                    ) : (
                                                        <div className="flex items-start justify-between mt-1">
                                                            <p className="text-gray-600 flex-1">{service.shortDescription}</p>
                                                            <Button
                                                                size="sm"
                                                                variant="ghost"
                                                                onClick={() => handleEdit(`service_short_${service.id}`, service.shortDescription)}
                                                            >
                                                                <Edit className="w-4 h-4" />
                                                            </Button>
                                                        </div>
                                                    )}
                                                </div>

                                                <div>
                                                    <Label className="text-sm font-medium text-gray-600">–ü–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</Label>
                                                    {editingField === `service_full_${service.id}` ? (
                                                        <div className="flex gap-2 mt-1">
                                                            <Textarea
                                                                value={editValue}
                                                                onChange={(e) => setEditValue(e.target.value)}
                                                                className="flex-1"
                                                                rows={3}
                                                            />
                                                            <div className="flex flex-col gap-2">
                                                                <Button size="sm" onClick={() => handleSaveService(service.id, 'fullDescription', editValue)}>
                                                                    <Save className="w-4 h-4" />
                                                                </Button>
                                                                <Button size="sm" variant="outline" onClick={handleCancel}>
                                                                    <X className="w-4 h-4" />
                                                                </Button>
                                                            </div>
                                                        </div>
                                                    ) : (
                                                        <div className="flex items-start justify-between mt-1">
                                                            <p className="text-gray-600 flex-1">{service.fullDescription}</p>
                                                            <Button
                                                                size="sm"
                                                                variant="ghost"
                                                                onClick={() => handleEdit(`service_full_${service.id}`, service.fullDescription)}
                                                            >
                                                                <Edit className="w-4 h-4" />
                                                            </Button>
                                                        </div>
                                                    )}
                                                </div>
                                            </div>
                                        </div>
                                    ))}
                                </div>
                            ) : (
                                <div className="text-center py-8 text-gray-500">
                                    <p>–£—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</p>
                                    <p className="text-sm">–î–æ–±–∞–≤—å—Ç–µ —É—Å–ª—É–≥–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–£—Å–ª—É–≥–∏"</p>
                                </div>
                            )}
                        </CardContent>
                    </Card>
                </div>
            </div>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –º–µ–¥–∏–∞ */}
            {isViewModalOpen && viewingMedia && (
                <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 w-full max-w-4xl max-h-[90vh] overflow-y-auto">
                        <div className="flex items-center justify-between mb-4">
                            <h3 className="text-lg font-semibold">–ü—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞</h3>
                            <Button
                                variant="ghost"
                                size="sm"
                                onClick={() => setIsViewModalOpen(false)}
                            >
                                <X className="w-4 h-4" />
                            </Button>
                        </div>

                        <div className="space-y-4">
                            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ */}
                            <div>
                                <h4 className="font-medium text-lg">{viewingMedia.title}</h4>
                                {viewingMedia.description && (
                                    <p className="text-gray-600 mt-1">{viewingMedia.description}</p>
                                )}
                                <p className="text-sm text-gray-400 mt-1">–§–∞–π–ª: {viewingMedia.filename}</p>
                            </div>

                            {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–¥–∏–∞ */}
                            <div className="flex justify-center">
                                {viewingMedia.type === 'image' ? (
                                    <img
                                        src={viewingMedia.file_path}
                                        alt={viewingMedia.title}
                                        className="max-w-full max-h-[60vh] object-contain rounded-lg shadow-lg"
                                        onError={(e) => {
                                            const target = e.target as HTMLImageElement;
                                            target.src = '/placeholder.svg';
                                            target.alt = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è';
                                        }}
                                    />
                                ) : (
                                    <video
                                        src={viewingMedia.file_path}
                                        controls
                                        preload="metadata"
                                        className="max-w-full max-h-[60vh] rounded-lg shadow-lg"
                                        onError={(e) => {
                                            const target = e.target as HTMLVideoElement;
                                            target.poster = '/placeholder.svg';
                                        }}
                                    >
                                        –í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ.
                                    </video>
                                )}
                            </div>

                            {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
                            <div className="flex justify-end pt-4 border-t">
                                <Button onClick={() => setIsViewModalOpen(false)}>
                                    –ó–∞–∫—Ä—ã—Ç—å
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–µ–¥–∏–∞ */}
            {isAddingMedia && (
                <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50">
                    <div className="bg-white rounded-lg p-6 w-full max-w-md">
                        <h3 className="text-lg font-semibold mb-4">–î–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞</h3>

                        <div className="space-y-4">
                            <div>
                                <Label>–§–∞–π–ª</Label>
                                <Input
                                    type="file"
                                    accept="image/*,video/*"
                                    onChange={handleFileChange}
                                    className="mt-1"
                                />
                            </div>

                            <div>
                                <Label>–ù–∞–∑–≤–∞–Ω–∏–µ</Label>
                                <Input
                                    value={newMediaData.title}
                                    onChange={(e) => setNewMediaData(prev => ({ ...prev, title: e.target.value }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ"
                                    className="mt-1"
                                />
                            </div>

                            <div>
                                <Label>–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                                <Textarea
                                    value={newMediaData.description}
                                    onChange={(e) => setNewMediaData(prev => ({ ...prev, description: e.target.value }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)"
                                    rows={3}
                                    className="mt-1"
                                />
                            </div>

                            <div>
                                <Label>–¢–∏–ø</Label>
                                <select
                                    value={newMediaData.type}
                                    onChange={(e) => setNewMediaData(prev => ({ ...prev, type: e.target.value as 'image' | 'video' }))}
                                    className="w-full mt-1 p-2 border border-gray-300 rounded-md"
                                >
                                    <option value="image">–§–æ—Ç–æ</option>
                                    <option value="video">–í–∏–¥–µ–æ</option>
                                </select>
                            </div>
                        </div>

                        <div className="flex gap-2 mt-6">
                            <Button onClick={handleAddMedia} className="flex-1">
                                –î–æ–±–∞–≤–∏—Ç—å
                            </Button>
                            <Button variant="outline" onClick={() => setIsAddingMedia(false)} className="flex-1">
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
};

export default AboutTab;
