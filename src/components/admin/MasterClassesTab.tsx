/**
 * @file: MasterClassesTab.tsx
 * @description: –í–∫–ª–∞–¥–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞–º–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
 * @dependencies: Card, Button, Badge, Input, Select, Calendar, useMasterClasses
 * @created: 2024-12-19
 */

import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent, CardContentCompact, CardDescription, CardHeader, CardHeaderCompact, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Calendar } from '@/components/ui/calendar';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from '@/components/ui/alert-dialog';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useToast } from '@/hooks/use-toast';
import { MasterClassEvent, Service } from '@/types/services';
import { School } from '@/types';
import { Plus, CalendarIcon, Clock, MapPin, Users, DollarSign, Trash2, UserPlus, Filter, BarChart3, FileSpreadsheet } from 'lucide-react';
import { ru } from 'date-fns/locale';
import { api } from '@/lib/api';
import * as XLSX from 'xlsx';

interface MasterClassesTabProps {
    services: Service[];
    schools: School[];
    masterClasses: MasterClassEvent[];
    onAddMasterClass: (masterClass: Omit<MasterClassEvent, 'id' | 'createdAt' | 'updatedAt' | 'participants' | 'statistics'>) => void;
    onEditMasterClass: (id: string, masterClass: Partial<MasterClassEvent>) => void;
    onViewMasterClass: (masterClass: MasterClassEvent) => void;
    onDeleteMasterClass: (id: string) => void;
}

export default function MasterClassesTab({
    services,
    schools,
    masterClasses,
    onAddMasterClass,
    onEditMasterClass,
    onViewMasterClass,
    onDeleteMasterClass
}: MasterClassesTabProps) {
    const { toast } = useToast();

    // –û—Ç–ª–∞–¥–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    console.log('MasterClassesTab: –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');
    console.log('MasterClassesTab: props:', { services: services.length, schools: schools.length, masterClasses: masterClasses.length });
    console.log('MasterClassesTab: masterClasses:', masterClasses);



    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–æ—Ä–º—ã
    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);
    const [formData, setFormData] = useState({
        date: '',
        time: '',
        schoolId: '',
        classGroup: '',
        serviceId: '',
        executors: [] as string[],
        notes: ''
    });

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const [availableExecutors, setAvailableExecutors] = useState<Array<{ id: string; name: string }>>([]);
    const [loadingExecutors, setLoadingExecutors] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    const [executorsModalOpen, setExecutorsModalOpen] = useState(false);
    const [selectedMasterClass, setSelectedMasterClass] = useState<MasterClassEvent | null>(null);
    const [editingExecutors, setEditingExecutors] = useState<string[]>([]);

    // –§–∏–ª—å—Ç—Ä—ã
    const [filterCity, setFilterCity] = useState('all');
    const [filterSchool, setFilterSchool] = useState('all');
    const [filterClass, setFilterClass] = useState('all');
    const [filterDateFrom, setFilterDateFrom] = useState('');
    const [filterDateTo, setFilterDateTo] = useState('');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
    const getUniqueCities = (): string[] => {
        const cities = schools.map(school => {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –≥–æ—Ä–æ–¥ –∏–∑ –∞–¥—Ä–µ—Å–∞ —à–∫–æ–ª—ã
            return school.address ? school.address.split(',')[0].trim() : '';
        }).filter(Boolean);
        return [...new Set(cities)];
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∫–æ–ª
    const getFilteredSchools = (): School[] => {
        if (filterCity === 'all') return schools;
        return schools.filter(school => {
            const schoolCity = school.address ? school.address.split(',')[0].trim() : '';
            return schoolCity === filterCity;
        });
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∞—Å—Å–æ–≤
    const getFilteredClasses = (): string[] => {
        if (!formData.schoolId) return [];
        const school = schools.find(s => s.id === formData.schoolId);
        return school ? school.classes : [];
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
    const getFilteredMasterClasses = (): MasterClassEvent[] => {
        let filtered = masterClasses;

        // –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥—É
        if (filterCity !== 'all') {
            filtered = filtered.filter(mc => {
                const school = schools.find(s => s.id === mc.schoolId);
                if (school && school.address) {
                    const schoolCity = school.address.split(',')[0].trim();
                    return schoolCity === filterCity;
                }
                return false;
            });
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ —à–∫–æ–ª–µ
        if (filterSchool !== 'all') {
            filtered = filtered.filter(mc => mc.schoolId === filterSchool);
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –∫–ª–∞—Å—Å—É
        if (filterClass !== 'all') {
            filtered = filtered.filter(mc => mc.classGroup === filterClass);
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –æ—Ç
        if (filterDateFrom) {
            filtered = filtered.filter(mc => mc.date >= filterDateFrom);
        }

        // –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –¥–æ
        if (filterDateTo) {
            filtered = filtered.filter(mc => mc.date <= filterDateTo);
        }

        return filtered;
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞–º
    const getFinancialStats = () => {
        const filteredClasses = getFilteredMasterClasses();

        const totalAmount = filteredClasses.reduce((sum, mc) => sum + mc.statistics.totalAmount, 0);
        const paidAmount = filteredClasses.reduce((sum, mc) => {
            const paidParticipants = mc.participants.filter(p => p.isPaid);
            return sum + paidParticipants.reduce((pSum, p) => pSum + p.totalAmount, 0);
        }, 0);
        const unpaidAmount = totalAmount - paidAmount;

        return {
            totalAmount,
            paidAmount,
            unpaidAmount,
            totalClasses: filteredClasses.length
        };
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const loadExecutors = async () => {
        setLoadingExecutors(true);
        try {
            const response = await api.users.getUsers({ role: 'executor' });
            setAvailableExecutors(response.users.map(user => ({
                id: user.id,
                name: `${user.name}${user.surname ? ` ${user.surname}` : ''}`
            })));
        } catch (error) {
            console.error('Error loading executors:', error);
        } finally {
            setLoadingExecutors(false);
        }
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏
    const openExecutorsModal = (masterClass: MasterClassEvent) => {
        setSelectedMasterClass(masterClass);
        setEditingExecutors([...masterClass.executors]);
        setExecutorsModalOpen(true);
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const saveExecutorsChanges = async () => {
        if (!selectedMasterClass) return;

        try {
            await onEditMasterClass(selectedMasterClass.id, {
                executors: editingExecutors
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            const updatedMasterClass = { ...selectedMasterClass, executors: editingExecutors };
            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

            setExecutorsModalOpen(false);
            setSelectedMasterClass(null);
            setEditingExecutors([]);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            toast({
                title: "–£—Å–ø–µ—à–Ω–æ",
                description: "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã",
            });
        } catch (error) {
            console.error('Error saving executors:', error);
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π",
                variant: "destructive",
            });
        }
    };

    // –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const cancelExecutorsChanges = () => {
        setExecutorsModalOpen(false);
        setSelectedMasterClass(null);
        setEditingExecutors([]);
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Å—Ç–∏–ª—è–º –∏ –æ–ø—Ü–∏—è–º
    const getStylesAndOptionsStats = () => {
        console.log('üîç getStylesAndOptionsStats: –§–£–ù–ö–¶–ò–Ø –í–´–ó–í–ê–ù–ê!');
        const filteredClasses = getFilteredMasterClasses();
        const stylesStats: Record<string, number> = {};
        const optionsStats: Record<string, number> = {};

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        console.log('getStylesAndOptionsStats: –Ω–∞—á–∞–ª–æ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
        console.log('getStylesAndOptionsStats: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤:', filteredClasses.length);
        console.log('getStylesAndOptionsStats: –≤—Å–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã:', masterClasses.length);
        console.log('getStylesAndOptionsStats: –≤—Å–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã:', masterClasses);
        console.log('getStylesAndOptionsStats: –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã:', filteredClasses);

        // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        filteredClasses.forEach((mc, index) => {
            console.log(`getStylesAndOptionsStats: –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å ${index + 1}:`, {
                id: mc.id,
                date: mc.date,
                participantsCount: mc.participants?.length || 0,
                participants: mc.participants
            });

            if (mc.participants && mc.participants.length > 0) {
                mc.participants.forEach((participant, pIndex) => {
                    console.log(`getStylesAndOptionsStats: –£—á–∞—Å—Ç–Ω–∏–∫ ${pIndex + 1} –≤ –ú–ö ${index + 1}:`, {
                        id: participant.id,
                        selectedStyles: participant.selectedStyles,
                        selectedOptions: participant.selectedOptions
                    });

                    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã selectedStyles –∏ selectedOptions
                    if (participant.selectedStyles && participant.selectedStyles.length > 0) {
                        console.log(`getStylesAndOptionsStats: selectedStyles –¥–µ—Ç–∞–ª—å–Ω–æ:`, participant.selectedStyles);
                        participant.selectedStyles.forEach((style, sIndex) => {
                            console.log(`getStylesAndOptionsStats: style ${sIndex}:`, {
                                type: typeof style,
                                value: style,
                                isObject: typeof style === 'object',
                                keys: typeof style === 'object' ? Object.keys(style) : 'N/A'
                            });
                        });
                    }

                    if (participant.selectedOptions && participant.selectedOptions.length > 0) {
                        console.log(`getStylesAndOptionsStats: selectedOptions –¥–µ—Ç–∞–ª—å–Ω–æ:`, participant.selectedOptions);
                        participant.selectedOptions.forEach((option, oIndex) => {
                            console.log(`getStylesAndOptionsStats: option ${oIndex}:`, {
                                type: typeof option,
                                value: option,
                                isObject: typeof option === 'object',
                                keys: typeof option === 'object' ? Object.keys(option) : 'N/A'
                            });
                        });
                    }
                });
            }
        });

        filteredClasses.forEach((mc, mcIndex) => {
            console.log(`getStylesAndOptionsStats: –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å ${mcIndex + 1}:`, {
                id: mc.id,
                date: mc.date,
                schoolName: mc.schoolName,
                classGroup: mc.classGroup,
                participantsCount: mc.participants?.length || 0,
                participants: mc.participants
            });

            if (!mc.participants || mc.participants.length === 0) {
                console.log(`getStylesAndOptionsStats: –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å ${mcIndex + 1} –Ω–µ –∏–º–µ–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
                return;
            }

            mc.participants.forEach((participant, pIndex) => {
                console.log(`getStylesAndOptionsStats: —É—á–∞—Å—Ç–Ω–∏–∫ ${pIndex + 1}:`, {
                    id: participant.id,
                    childName: participant.childName,
                    selectedStyles: participant.selectedStyles,
                    selectedOptions: participant.selectedOptions
                });

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∏–ª—è–º
                if (participant.selectedStyles && participant.selectedStyles.length > 0) {
                    participant.selectedStyles.forEach((styleItem: string | { id: string }) => {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ ID —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å id
                        const styleId = typeof styleItem === 'string' ? styleItem : styleItem.id;

                        if (!styleId) {
                            console.log(`getStylesAndOptionsStats: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å styleId –∏–∑:`, styleItem);
                            return;
                        }

                        const service = services.find(s => s.id === mc.serviceId);
                        if (!service) {
                            console.log(`getStylesAndOptionsStats: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è serviceId: ${mc.serviceId}`);
                            return;
                        }

                        const style = service.styles.find(st => st.id === styleId);
                        if (style) {
                            stylesStats[style.name] = (stylesStats[style.name] || 0) + 1;
                            console.log(`getStylesAndOptionsStats: –¥–æ–±–∞–≤–ª–µ–Ω —Å—Ç–∏–ª—å "${style.name}" (ID: ${styleId})`);
                        } else {
                            console.log(`getStylesAndOptionsStats: —Å—Ç–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è styleId: ${styleId} –∏–∑ ${styleItem}`);
                        }
                    });
                } else {
                    console.log(`getStylesAndOptionsStats: —É—á–∞—Å—Ç–Ω–∏–∫ ${pIndex + 1} –Ω–µ –≤—ã–±—Ä–∞–ª —Å—Ç–∏–ª–∏`);
                }

                // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ–ø—Ü–∏—è–º
                if (participant.selectedOptions && participant.selectedOptions.length > 0) {
                    participant.selectedOptions.forEach((optionItem: string | { id: string }) => {
                        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ ID —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –∫–∞–∫ –æ–±—ä–µ–∫—Ç —Å id
                        const optionId = typeof optionItem === 'string' ? optionItem : optionItem.id;

                        if (!optionId) {
                            console.log(`getStylesAndOptionsStats: –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å optionId –∏–∑:`, optionItem);
                            return;
                        }

                        const service = services.find(s => s.id === mc.serviceId);
                        if (!service) {
                            console.log(`getStylesAndOptionsStats: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è serviceId: ${mc.serviceId}`);
                            return;
                        }

                        const option = service.options.find(opt => opt.id === optionId);
                        if (option) {
                            optionsStats[option.name] = (optionsStats[option.name] || 0) + 1;
                            console.log(`getStylesAndOptionsStats: –¥–æ–±–∞–≤–ª–µ–Ω–∞ –æ–ø—Ü–∏—è "${option.name}" (ID: ${optionId})`);
                        } else {
                            console.log(`getStylesAndOptionsStats: –æ–ø—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è optionId: ${optionId} –∏–∑ ${optionItem}`);
                        }
                    });
                } else {
                    console.log(`getStylesAndOptionsStats: —É—á–∞—Å—Ç–Ω–∏–∫ ${pIndex + 1} –Ω–µ –≤—ã–±—Ä–∞–ª –æ–ø—Ü–∏–∏`);
                }
            });
        });

        console.log('getStylesAndOptionsStats: –∏—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:', { stylesStats, optionsStats });

        return { stylesStats, optionsStats };
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
    const getMasterClassesForDate = useCallback((date: Date): MasterClassEvent[] => {
        const dateStr = formatDateForComparison(date);

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã
        console.log(`getMasterClassesForDate: –∏—â–µ–º –¥–ª—è –¥–∞—Ç—ã ${dateStr}`);
        console.log(`getMasterClassesForDate: –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–∞—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö:`, masterClasses.map(mc => mc.date));

        const filtered = masterClasses.filter(mc => {
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
            let mcDate = mc.date;
            if (mcDate.includes('T')) {
                mcDate = mcDate.split('T')[0];
            }
            const matches = mcDate === dateStr;

            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
            console.log(`getMasterClassesForDate: –ø—Ä–æ–≤–µ—Ä—è–µ–º ${mcDate} === ${dateStr} -> ${matches}`);

            if (matches) {
                console.log(`getMasterClassesForDate: –Ω–∞–π–¥–µ–Ω–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: ${mcDate} === ${dateStr}`);
            }
            return matches;
        });

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if (filtered.length > 0) {
            console.log(`getMasterClassesForDate: ${dateStr} -> ${filtered.length} –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤`);
        } else {
            console.log(`getMasterClassesForDate: –¥–ª—è ${dateStr} –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`);
        }

        return filtered;
    }, [masterClasses]);

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    const formatDateForComparison = (date: Date): string => {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏
        const year = date.getFullYear();
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const day = String(date.getDate()).padStart(2, '0');
        const formatted = `${year}-${month}-${day}`;

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log(`formatDateForComparison: ${date.toLocaleDateString()} -> ${formatted}`);

        return formatted;
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    const handleDateSelect = (date: Date | undefined) => {
        if (date) {
            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞—Ç–∞–º–∏
            console.log(`handleDateSelect: –ø–æ–ª—É—á–µ–Ω–∞ –¥–∞—Ç–∞:`, {
                originalDate: date,
                toLocaleDateString: date.toLocaleDateString(),
                toISOString: date.toISOString(),
                getTime: date.getTime(),
                getFullYear: date.getFullYear(),
                getMonth: date.getMonth(),
                getDate: date.getDate()
            });

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º—É –∏—Å–ø–æ–ª—å–∑—É—è –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            const formattedDate = formatDateForComparison(date);
            setFormData(prev => ({ ...prev, date: formattedDate }));

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
            setIsAddDialogOpen(true);
            console.log(`–û—Ç–∫—Ä—ã—Ç–æ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –¥–∞—Ç—ã ${date.toLocaleDateString()} -> ${formattedDate}`);
        }
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —à–∫–æ–ª—ã
    const handleSchoolChange = (schoolId: string) => {
        setFormData(prev => ({ ...prev, schoolId, classGroup: '' }));
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();

        if (formData.executors.length === 0) {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è",
                variant: "destructive",
            });
            return;
        }

        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞—Ç—ã
        console.log(`handleSubmit: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —Å –¥–∞—Ç–æ–π:`, {
            formDataDate: formData.date,
            formDataType: typeof formData.date,
            currentFormData: formData,
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–∞—Ç–∞–º–∏
            parsedDate: new Date(formData.date),
            parsedDateISO: new Date(formData.date).toISOString(),
            parsedDateLocal: new Date(formData.date).toLocaleDateString()
        });

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞—Ç—ã
        if (!formData.date) {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–î–∞—Ç–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
                variant: "destructive",
            });
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –Ω–µ –≤ –ø—Ä–æ—à–ª–æ–º
        const selectedDate = new Date(formData.date);
        const today = new Date();
        today.setHours(0, 0, 0, 0);

        if (selectedDate < today) {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ –ø—Ä–æ—à–ª–æ–º",
                variant: "destructive",
            });
            return;
        }

        onAddMasterClass({
            date: formData.date,
            time: formData.time,
            schoolId: formData.schoolId,
            classGroup: formData.classGroup,
            serviceId: formData.serviceId,
            executors: formData.executors,
            notes: formData.notes,
            city: schools.find(s => s.id === formData.schoolId)?.address?.split(',')[0]?.trim() || '',
            schoolName: schools.find(s => s.id === formData.schoolId)?.name || '',
            serviceName: services.find(s => s.id === formData.serviceId)?.name || ''
        });

        // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
        setFormData({
            date: '',
            time: '',
            schoolId: '',
            classGroup: '',
            serviceId: '',
            executors: [],
            notes: ''
        });
        setIsAddDialogOpen(false);

        toast({
            title: "–£—Å–ø–µ—à–Ω–æ",
            description: "–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —Å–æ–∑–¥–∞–Ω",
        });
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const handleExecutorChange = (executorId: string, checked: boolean) => {
        setFormData(prev => ({
            ...prev,
            executors: checked
                ? [...prev.executors, executorId]
                : prev.executors.filter(id => id !== executorId)
        }));
    };

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    useEffect(() => {
        console.log('MasterClassesTab: useEffect —Å—Ä–∞–±–æ—Ç–∞–ª');
        console.log('MasterClassesTab: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', {
            masterClassesCount: masterClasses.length,
            masterClasses: masterClasses,
            schoolsCount: schools.length,
            servicesCount: services.length
        });

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        loadExecutors();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–∂–¥–æ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
        if (masterClasses.length > 0) {
            masterClasses.forEach((mc, index) => {
                console.log(`MasterClassesTab: –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å ${index + 1} (${mc.date}):`, {
                    id: mc.id,
                    participantsCount: mc.participants?.length || 0,
                    participants: mc.participants
                });
            });
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–∫–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
        if (masterClasses.length > 0) {
            console.log('MasterClassesTab: –ü—Ä–∏–º–µ—Ä –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:', masterClasses[0]);
            console.log('MasterClassesTab: –í—Å–µ –¥–∞—Ç—ã –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤:', masterClasses.map(mc => mc.date));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–∞–∫–∏–µ –¥–∞—Ç—ã –±—É–¥—É—Ç –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            const currentDate = new Date();
            const currentMonth = currentDate.getMonth();
            const currentYear = currentDate.getFullYear();

            console.log('MasterClassesTab: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞—Ç—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞:', currentMonth + 1, currentYear);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–∞—Ç –º–µ—Å—è—Ü–∞
            for (let day = 1; day <= 31; day++) {
                const testDate = new Date(currentYear, currentMonth, day);
                const found = getMasterClassesForDate(testDate);
                if (found.length > 0) {
                    console.log(`MasterClassesTab: –¢–µ—Å—Ç –¥–∞—Ç—ã ${testDate.toLocaleDateString()}: –Ω–∞–π–¥–µ–Ω–æ ${found.length} –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤`);
                }
            }

            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log('üîç MasterClassesTab: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º getStylesAndOptionsStats()');
            const stats = getStylesAndOptionsStats();
            console.log('üîç MasterClassesTab: –†–µ–∑—É–ª—å—Ç–∞—Ç getStylesAndOptionsStats():', stats);
        }
    }, [masterClasses, schools, services, getMasterClassesForDate]);

    // –≠–∫—Å–ø–æ—Ä—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ Excel
    const exportFinancialStats = () => {
        const stats = getFinancialStats();
        const filteredClasses = getFilteredMasterClasses();
        const { stylesStats, optionsStats } = getStylesAndOptionsStats();

        // –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á—É—é –∫–Ω–∏–≥—É
        const workbook = XLSX.utils.book_new();

        // –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω –ª–∏—Å—Ç –¥–ª—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
        const worksheet = XLSX.utils.aoa_to_sheet([]);

        let currentRow = 0;

        // 1. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —à–∫–æ–ª–∞–º (–Ω–∞–∑–≤–∞–Ω–∏–µ, –∞–¥—Ä–µ—Å)
        XLSX.utils.sheet_add_aoa(worksheet, [['–ò–ù–§–û–†–ú–ê–¶–ò–Ø –ü–û –®–ö–û–õ–ê–ú']], { origin: { r: currentRow, c: 0 } });
        // –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º
        const schoolHeaderCell = XLSX.utils.encode_cell({ r: currentRow, c: 0 });
        if (!worksheet['!rows']) worksheet['!rows'] = [];
        if (!worksheet['!rows'][currentRow]) worksheet['!rows'][currentRow] = {};
        if (!worksheet[schoolHeaderCell]) worksheet[schoolHeaderCell] = {};
        worksheet[schoolHeaderCell].s = { font: { bold: true, sz: 14 } };
        currentRow += 1;

        // –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —à–∫–æ–ª
        XLSX.utils.sheet_add_aoa(worksheet, [['–ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã', '–ê–¥—Ä–µ—Å']], { origin: { r: currentRow, c: 0 } });
        // –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –∂–∏—Ä–Ω—ã–º–∏
        ['A', 'B'].forEach((col, index) => {
            const cellRef = col + (currentRow + 1);
            if (!worksheet[cellRef]) worksheet[cellRef] = {};
            worksheet[cellRef].s = { font: { bold: true } };
        });
        currentRow += 1;

        // –î–∞–Ω–Ω—ã–µ –ø–æ —à–∫–æ–ª–∞–º (—É–Ω–∏–∫–∞–ª—å–Ω—ã–µ)
        const uniqueSchools = Array.from(new Set(filteredClasses.map(mc => mc.schoolId)))
            .map(schoolId => schools.find(s => s.id === schoolId))
            .filter(Boolean);

        const schoolsData = uniqueSchools.map(school => [
            school?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —à–∫–æ–ª–∞',
            school?.address || '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω'
        ]);

        XLSX.utils.sheet_add_aoa(worksheet, schoolsData, { origin: { r: currentRow, c: 0 } });
        currentRow += schoolsData.length + 2;

        // 2. –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        XLSX.utils.sheet_add_aoa(worksheet, [['–§–ò–ù–ê–ù–°–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê']], { origin: { r: currentRow, c: 0 } });
        // –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º
        const financeHeaderCell = XLSX.utils.encode_cell({ r: currentRow, c: 0 });
        if (!worksheet['!rows'][currentRow]) worksheet['!rows'][currentRow] = {};
        if (!worksheet[financeHeaderCell]) worksheet[financeHeaderCell] = {};
        worksheet[financeHeaderCell].s = { font: { bold: true, sz: 14 } };
        currentRow += 1;

        XLSX.utils.sheet_add_aoa(worksheet, [
            ['–û–±—â–∞—è —Å—É–º–º–∞', stats.totalAmount.toLocaleString() + ' ‚ÇΩ'],
            ['–û–ø–ª–∞—Ç–∏–ª–∏', stats.paidAmount.toLocaleString() + ' ‚ÇΩ'],
            ['–ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏', stats.unpaidAmount.toLocaleString() + ' ‚ÇΩ'],
            ['–í—Å–µ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤', stats.totalClasses],
            ['–î–∞—Ç–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', new Date().toLocaleDateString('ru-RU')]
        ], { origin: { r: currentRow, c: 0 } });
        // –î–µ–ª–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∂–∏—Ä–Ω—ã–º–∏
        for (let i = 0; i < 5; i++) {
            const cellRef = 'A' + (currentRow + i + 1);
            if (!worksheet[cellRef]) worksheet[cellRef] = {};
            worksheet[cellRef].s = { font: { bold: true } };
        }
        currentRow += 6;

        // 3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Ä—É—á–µ–∫ (–≤–∞—Ä–∏–∞–Ω—Ç—ã —Ä—É—á–µ–∫)
        XLSX.utils.sheet_add_aoa(worksheet, [['–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ê–†–ò–ê–ù–¢–ê–ú –†–£–ß–ï–ö']], { origin: { r: currentRow, c: 0 } });
        // –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º
        const stylesHeaderCell = XLSX.utils.encode_cell({ r: currentRow, c: 0 });
        if (!worksheet['!rows'][currentRow]) worksheet['!rows'][currentRow] = {};
        if (!worksheet[stylesHeaderCell]) worksheet[stylesHeaderCell] = {};
        worksheet[stylesHeaderCell].s = { font: { bold: true, sz: 14 } };
        currentRow += 1;

        if (Object.keys(stylesStats).length > 0) {
            XLSX.utils.sheet_add_aoa(worksheet, [['–í–∞—Ä–∏–∞–Ω—Ç —Ä—É—á–∫–∏', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤']], { origin: { r: currentRow, c: 0 } });
            // –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –∂–∏—Ä–Ω—ã–º–∏
            ['A', 'B'].forEach((col, index) => {
                const cellRef = col + (currentRow + 1);
                if (!worksheet[cellRef]) worksheet[cellRef] = {};
                worksheet[cellRef].s = { font: { bold: true } };
            });
            currentRow += 1;

            const stylesData = Object.entries(stylesStats).map(([styleName, count]) => [
                styleName,
                count
            ]);

            XLSX.utils.sheet_add_aoa(worksheet, stylesData, { origin: { r: currentRow, c: 0 } });
            currentRow += stylesData.length + 2;
        } else {
            XLSX.utils.sheet_add_aoa(worksheet, [['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Ä—É—á–µ–∫']], { origin: { r: currentRow, c: 0 } });
            currentRow += 2;
        }

        // 4. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–ª—É–≥–∞–º (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏)
        XLSX.utils.sheet_add_aoa(worksheet, [['–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ú –£–°–õ–£–ì–ê–ú']], { origin: { r: currentRow, c: 0 } });
        // –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∂–∏—Ä–Ω—ã–º
        const optionsHeaderCell = XLSX.utils.encode_cell({ r: currentRow, c: 0 });
        if (!worksheet['!rows'][currentRow]) worksheet['!rows'][currentRow] = {};
        if (!worksheet[optionsHeaderCell]) worksheet[optionsHeaderCell] = {};
        worksheet[optionsHeaderCell].s = { font: { bold: true, sz: 14 } };
        currentRow += 1;

        if (Object.keys(optionsStats).length > 0) {
            XLSX.utils.sheet_add_aoa(worksheet, [['–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤']], { origin: { r: currentRow, c: 0 } });
            // –î–µ–ª–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ –∂–∏—Ä–Ω—ã–º–∏
            ['A', 'B'].forEach((col, index) => {
                const cellRef = col + (currentRow + 1);
                if (!worksheet[cellRef]) worksheet[cellRef] = {};
                worksheet[cellRef].s = { font: { bold: true } };
            });
            currentRow += 1;

            const optionsData = Object.entries(optionsStats).map(([optionName, count]) => [
                optionName,
                count
            ]);

            XLSX.utils.sheet_add_aoa(worksheet, optionsData, { origin: { r: currentRow, c: 0 } });
            currentRow += optionsData.length + 2;
        } else {
            XLSX.utils.sheet_add_aoa(worksheet, [['–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–ª—É–≥–∞–º']], { origin: { r: currentRow, c: 0 } });
            currentRow += 2;
        }

        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É —Å—Ç–æ–ª–±—Ü–æ–≤
        worksheet['!cols'] = [
            { wch: 30 }, // –ù–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã/–í–∞—Ä–∏–∞–Ω—Ç —Ä—É—á–∫–∏/–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —É—Å–ª—É–≥–∞
            { wch: 25 }, // –ê–¥—Ä–µ—Å/–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤
            { wch: 20 }, // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç–æ–ª–±—Ü—ã
            { wch: 20 },
            { wch: 20 },
            { wch: 20 }
        ];

        // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç –≤ –∫–Ω–∏–≥—É
        XLSX.utils.book_append_sheet(workbook, worksheet, '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞');

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
        const fileName = `–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è_—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞_${new Date().toLocaleDateString('ru-RU')}.xlsx`;

        // –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        XLSX.writeFile(workbook, fileName);

        toast({
            title: "–£—Å–ø–µ—à–Ω–æ!",
            description: "–§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞ –≤ Excel",
            variant: "default"
        });
    };

    return (
        <div className="space-y-6">
            {/* –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è */}
            <div className="flex justify-between items-center">
                <div className="flex gap-2">
                    <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>
                        <DialogTrigger asChild>
                            <Button className="flex items-center gap-2">
                                <Plus className="h-4 w-4" />
                                –°–æ–∑–¥–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
                            </Button>
                        </DialogTrigger>

                        <DialogContent className="max-w-2xl">
                            <DialogHeader>
                                <DialogTitle>–°–æ–∑–¥–∞—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å</DialogTitle>
                                <DialogDescription>
                                    –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤–æ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
                                </DialogDescription>
                            </DialogHeader>
                            <form onSubmit={handleSubmit} className="space-y-4">
                                <div className="grid grid-cols-2 gap-3">
                                    <div className="space-y-2">
                                        <Label htmlFor="date">–î–∞—Ç–∞</Label>
                                        <Input
                                            id="date"
                                            type="date"
                                            value={formData.date}
                                            onChange={(e) => {
                                                console.log(`–§–æ—Ä–º–∞: –∏–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã —Å ${formData.date} –Ω–∞ ${e.target.value}`);
                                                setFormData(prev => ({ ...prev, date: e.target.value }));
                                            }}
                                            required
                                        />
                                        {/* –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                                        <div className="text-xs text-muted-foreground">
                                            –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –¥–∞—Ç–∞: {formData.date}
                                        </div>
                                    </div>
                                    <div className="space-y-2">
                                        <Label htmlFor="time">–í—Ä–µ–º—è</Label>
                                        <Input
                                            id="time"
                                            type="time"
                                            value={formData.time}
                                            onChange={(e) => setFormData(prev => ({ ...prev, time: e.target.value }))}
                                            required
                                        />
                                    </div>
                                </div>

                                <div className="space-y-2">
                                    <Label htmlFor="school">–®–∫–æ–ª–∞/–°–∞–¥–∏–∫</Label>
                                    <Select value={formData.schoolId} onValueChange={handleSchoolChange}>
                                        <SelectTrigger>
                                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É/—Å–∞–¥–∏–∫" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {schools.map(school => (
                                                <SelectItem key={school.id} value={school.id}>
                                                    {school.name}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>

                                <div className="space-y-2">
                                    <Label htmlFor="class">–ö–ª–∞—Å—Å/–ì—Ä—É–ø–ø–∞</Label>
                                    <Select
                                        value={formData.classGroup}
                                        onValueChange={(value) => setFormData(prev => ({ ...prev, classGroup: value }))}
                                        disabled={!formData.schoolId}
                                    >
                                        <SelectTrigger>
                                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å/–≥—Ä—É–ø–ø—É" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {getFilteredClasses().map(className => (
                                                <SelectItem key={className} value={className}>
                                                    {className}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>

                                <div className="space-y-2">
                                    <Label htmlFor="service">–£—Å–ª—É–≥–∞</Label>
                                    <Select value={formData.serviceId} onValueChange={(value) => setFormData(prev => ({ ...prev, serviceId: value }))}>
                                        <SelectTrigger>
                                            <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É" />
                                        </SelectTrigger>
                                        <SelectContent>
                                            {services.map(service => (
                                                <SelectItem key={service.id} value={service.id}>
                                                    {service.name}
                                                </SelectItem>
                                            ))}
                                        </SelectContent>
                                    </Select>
                                </div>

                                <div className="space-y-2">
                                    <Label>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏</Label>
                                    {loadingExecutors ? (
                                        <div className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...</div>
                                    ) : (
                                        <div className="grid grid-cols-2 gap-2">
                                            {availableExecutors.map((executor) => (
                                                <div key={executor.id} className="flex items-center space-x-2">
                                                    <input
                                                        type="checkbox"
                                                        id={`executor-${executor.id}`}
                                                        checked={formData.executors.includes(executor.id)}
                                                        onChange={(e) => handleExecutorChange(executor.id, e.target.checked)}
                                                        className="rounded"
                                                    />
                                                    <Label htmlFor={`executor-${executor.id}`}>{executor.name}</Label>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                    {availableExecutors.length === 0 && !loadingExecutors && (
                                        <div className="text-sm text-muted-foreground">
                                            –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                                        </div>
                                    )}
                                </div>

                                <div className="space-y-2">
                                    <Label htmlFor="notes">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è</Label>
                                    <Textarea
                                        id="notes"
                                        value={formData.notes}
                                        onChange={(e) => setFormData(prev => ({ ...prev, notes: e.target.value }))}
                                        placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è..."
                                    />
                                </div>

                                <DialogFooter>
                                    <Button type="button" variant="outline" onClick={() => setIsAddDialogOpen(false)}>
                                        –û—Ç–º–µ–Ω–∞
                                    </Button>
                                    <Button type="submit">–°–æ–∑–¥–∞—Ç—å</Button>
                                </DialogFooter>
                            </form>
                        </DialogContent>
                    </Dialog>

                    <Button
                        variant="outline"
                        onClick={() => {
                            console.log('–¢–µ–∫—É—â–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã:', masterClasses);
                            console.log('–î–∞—Ç—ã –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤:', masterClasses.map(mc => mc.date));
                        }}
                    >
                        –û—Ç–ª–∞–¥–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                    </Button>
                </div>

                <div className="text-sm text-muted-foreground">
                    –ù–∞–π–¥–µ–Ω–æ: {getFilteredMasterClasses().length} –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
                </div>
            </div>

            {/* –§–∏–ª—å—Ç—Ä—ã –∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ */}
            <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
                {/* –§–∏–ª—å—Ç—Ä—ã - —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ 3 –∫–æ–ª–æ–Ω–∫–∏ */}
                <Card className="lg:col-span-3">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <Filter className="h-5 w-5" />
                            –§–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
                        </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-6 gap-4">
                            <div className="space-y-2">
                                <Label htmlFor="city-filter">–ì–æ—Ä–æ–¥</Label>
                                <Select value={filterCity} onValueChange={setFilterCity}>
                                    <SelectTrigger>
                                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ä–æ–¥" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="all">–í—Å–µ –≥–æ—Ä–æ–¥–∞</SelectItem>
                                        {getUniqueCities().map(city => (
                                            <SelectItem key={city} value={city}>
                                                {city}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="school-filter">–®–∫–æ–ª–∞/–°–∞–¥–∏–∫</Label>
                                <Select value={filterSchool} onValueChange={setFilterSchool}>
                                    <SelectTrigger>
                                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="all">–í—Å–µ —à–∫–æ–ª—ã</SelectItem>
                                        {getFilteredSchools().map(school => (
                                            <SelectItem key={school.id} value={school.id}>
                                                {school.name}
                                            </SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="class-filter">–ö–ª–∞—Å—Å/–ì—Ä—É–ø–ø–∞</Label>
                                <Select value={filterClass} onValueChange={setFilterClass}>
                                    <SelectTrigger>
                                        <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∞—Å—Å" />
                                    </SelectTrigger>
                                    <SelectContent>
                                        <SelectItem value="all">–í—Å–µ –∫–ª–∞—Å—Å—ã</SelectItem>
                                        {getFilteredMasterClasses()
                                            .map(mc => mc.classGroup)
                                            .filter((value, index, self) => self.indexOf(value) === index)
                                            .map(className => (
                                                <SelectItem key={className} value={className}>
                                                    {className}
                                                </SelectItem>
                                            ))}
                                    </SelectContent>
                                </Select>
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="date-from-filter">–î–∞—Ç–∞ –æ—Ç</Label>
                                <Input
                                    id="date-from-filter"
                                    type="date"
                                    value={filterDateFrom}
                                    onChange={(e) => setFilterDateFrom(e.target.value)}
                                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
                                />
                            </div>

                            <div className="space-y-2">
                                <Label htmlFor="date-to-filter">–î–∞—Ç–∞ –¥–æ</Label>
                                <Input
                                    id="date-to-filter"
                                    type="date"
                                    value={filterDateTo}
                                    onChange={(e) => setFilterDateTo(e.target.value)}
                                    placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É"
                                />
                            </div>

                            <div className="space-y-2 flex items-end">
                                <Button
                                    variant="outline"
                                    onClick={() => {
                                        setFilterCity("all");
                                        setFilterSchool("all");
                                        setFilterClass("all");
                                        setFilterDateFrom("");
                                        setFilterDateTo("");
                                    }}
                                    className="w-full"
                                >
                                    –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
                                </Button>
                            </div>
                        </div>

                        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Ä—É—á–µ–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–ª—É–≥–∞–º */}
                        <div className="mt-6 pt-6 border-t">
                            <div className="flex items-center gap-2 mb-4">
                                <BarChart3 className="h-5 w-5" />
                                <h4 className="font-semibold text-lg">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Ä—É—á–µ–∫ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–ª—É–≥–∞–º</h4>
                            </div>
                            {(() => {
                                console.log('–ö–æ–º–ø–æ–Ω–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: –Ω–∞—á–∞–ª–æ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞');
                                const { stylesStats, optionsStats } = getStylesAndOptionsStats();
                                const totalStyles = Object.values(stylesStats).reduce((sum, count) => sum + count, 0);
                                const totalOptions = Object.values(optionsStats).reduce((sum, count) => sum + count, 0);

                                // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
                                console.log('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–µ:', {
                                    stylesStats,
                                    optionsStats,
                                    totalStyles,
                                    totalOptions,
                                    masterClassesCount: masterClasses.length,
                                    filteredCount: getFilteredMasterClasses().length
                                });

                                return (
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Ä—É—á–µ–∫ */}
                                        <div className="space-y-3">
                                            <div className="flex items-center justify-between">
                                                <span className="font-medium text-sm">–í–∞—Ä–∏–∞–Ω—Ç—ã —Ä—É—á–µ–∫</span>
                                                <Badge variant="secondary" className="text-xs px-2 py-1">
                                                    –í—Å–µ–≥–æ: {totalStyles}
                                                </Badge>
                                            </div>
                                            <div className="space-y-2">
                                                {Object.entries(stylesStats).length > 0 ? (
                                                    Object.entries(stylesStats)
                                                        .sort(([, a], [, b]) => b - a)
                                                        .map(([styleName, count]) => (
                                                            <div key={styleName} className="flex items-center justify-between p-2 bg-muted/30 rounded text-sm">
                                                                <span className="font-medium">{styleName}</span>
                                                                <Badge variant="outline" className="text-xs">
                                                                    {count}
                                                                </Badge>
                                                            </div>
                                                        ))
                                                ) : (
                                                    <div className="text-center text-muted-foreground py-2 text-sm">
                                                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Ä—É—á–µ–∫
                                                    </div>
                                                )}
                                            </div>
                                        </div>

                                        {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–ª—É–≥–∞–º */}
                                        <div className="space-y-3">
                                            <div className="flex items-center justify-between">
                                                <span className="font-medium text-sm">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏</span>
                                                <Badge variant="secondary" className="text-xs px-2 py-1">
                                                    –í—Å–µ–≥–æ: {totalOptions}
                                                </Badge>
                                            </div>
                                            <div className="space-y-2">
                                                {Object.entries(optionsStats).length > 0 ? (
                                                    Object.entries(optionsStats)
                                                        .sort(([, a], [, b]) => b - a)
                                                        .map(([optionName, count]) => (
                                                            <div key={optionName} className="flex items-center justify-between p-2 bg-muted/30 rounded text-sm">
                                                                <span className="font-medium">{optionName}</span>
                                                                <Badge variant="outline" className="text-xs">
                                                                    {count}
                                                                </Badge>
                                                            </div>
                                                        ))
                                                ) : (
                                                    <div className="text-center text-muted-foreground py-2 text-sm">
                                                        –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–ª—É–≥–∞–º
                                                    </div>
                                                )}
                                            </div>
                                        </div>
                                    </div>
                                );
                            })()}
                        </div>
                    </CardContent>
                </Card>

                {/* –ö–∞–ª–µ–Ω–¥–∞—Ä—å - —Å–ø—Ä–∞–≤–∞ */}
                <Card className="w-fit">
                    <CardHeader>
                        <CardTitle className="flex items-center gap-2">
                            <CalendarIcon className="h-5 w-5" />
                            –ö–∞–ª–µ–Ω–¥–∞—Ä—å
                        </CardTitle>
                        <CardDescription>
                            –ö–ª–∏–∫–Ω–∏—Ç–µ –Ω–∞ –¥–∞—Ç—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <Calendar
                            mode="single"
                            onSelect={handleDateSelect}
                            locale={ru}
                            className="rounded-md border"
                            components={{
                                DayContent: ({ date, displayMonth, activeModifiers, ...props }) => {
                                    const masterClasses = getMasterClassesForDate(date);

                                    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
                                    if (masterClasses.length > 0) {
                                        const formattedDate = formatDateForComparison(date);
                                        console.log(`DayContent: ${date.toLocaleDateString()} (${formattedDate}) -> ${masterClasses.length} –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤`);
                                    } else {
                                        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –¥–∞—Ç –±–µ–∑ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ (—Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–∞—Ç)
                                        const day = date.getDate();
                                        if (day <= 5) { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 5 –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
                                            const formattedDate = formatDateForComparison(date);
                                            console.log(`DayContent: ${date.toLocaleDateString()} (${formattedDate}) -> 0 –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤`);
                                        }
                                    }

                                    return (
                                        <div className="relative w-full h-full">
                                            <div
                                                {...props}
                                                className="w-full h-full p-2 text-center hover:bg-accent rounded-md cursor-pointer"
                                            >
                                                {date.getDate()}
                                            </div>
                                            {masterClasses.length > 0 && (
                                                <div className="absolute -top-1 -right-1 bg-white/90 text-black text-xs rounded-full w-6 h-6 flex items-center justify-center font-bold shadow-lg z-10 border border-gray-300">
                                                    {masterClasses.length}
                                                </div>
                                            )}
                                        </div>
                                    );
                                }
                            }}
                            onMonthChange={(month) => {
                                console.log(`Calendar: –º–µ—Å—è—Ü –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${month.toLocaleDateString()}`);
                            }}
                        />
                    </CardContent>
                </Card>
            </div>

            {/* –ö–∞—Ä—Ç–æ—á–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ */}
            <Card>
                <CardHeader>
                    <div className="flex items-center justify-between">
                        <div>
                            <CardTitle className="flex items-center gap-2">
                                <DollarSign className="h-5 w-5 text-green-600" />
                                –§–∏–Ω–∞–Ω—Å–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                            </CardTitle>
                            <CardDescription>
                                –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ñ–∏–Ω–∞–Ω—Å–∞–º {getFinancialStats().totalClasses > 0 ? `(${getFinancialStats().totalClasses} –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤)` : ''}
                            </CardDescription>
                        </div>
                        <Button
                            variant="outline"
                            className="flex items-center gap-2"
                            onClick={() => exportFinancialStats()}
                        >
                            <FileSpreadsheet className="h-4 w-4" />
                            –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                        </Button>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                        <div className="text-center p-4 bg-green-50 rounded-lg border">
                            <div className="text-2xl font-bold text-green-600">
                                {getFinancialStats().totalAmount.toLocaleString()} ‚ÇΩ
                            </div>
                            <div className="text-sm text-green-700 font-medium">–û–±—â–∞—è —Å—É–º–º–∞</div>
                        </div>
                        <div className="text-center p-4 bg-blue-50 rounded-lg border">
                            <div className="text-2xl font-bold text-blue-600">
                                {getFinancialStats().paidAmount.toLocaleString()} ‚ÇΩ
                            </div>
                            <div className="text-sm text-blue-700 font-medium">–û–ø–ª–∞—Ç–∏–ª–∏</div>
                        </div>
                        <div className="text-center p-4 bg-orange-50 rounded-lg border">
                            <div className="text-2xl font-bold text-orange-600">
                                {getFinancialStats().unpaidAmount.toLocaleString()} ‚ÇΩ
                            </div>
                            <div className="text-sm text-orange-700 font-medium">–ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏</div>
                        </div>
                    </div>
                </CardContent>
            </Card>

            {/* –°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤ */}
            <Card>
                <CardHeader>
                    <CardTitle>–°–ø–∏—Å–æ–∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤</CardTitle>
                    <CardDescription>
                        –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="space-y-3">
                        {getFilteredMasterClasses().map(masterClass => (
                            <Card key={masterClass.id} className="cursor-pointer hover:shadow-md transition-shadow">
                                <CardContent className="p-4">
                                    <div className="flex items-center justify-between">
                                        <div className="flex items-center gap-4">
                                            <div className="flex items-center gap-2">
                                                <CalendarIcon className="h-4 w-4 text-muted-foreground" />
                                                <span className="font-medium">
                                                    {new Date(masterClass.date).toLocaleDateString('ru-RU')}
                                                </span>
                                            </div>
                                            <div className="flex items-center gap-2">
                                                <Clock className="h-4 w-4 text-muted-foreground" />
                                                <span>{masterClass.time}</span>
                                            </div>
                                            <div className="flex items-center gap-2">
                                                <MapPin className="h-4 w-4 text-muted-foreground" />
                                                <span>{schools.find(s => s.id === masterClass.schoolId)?.name || '–®–∫–æ–ª–∞'}</span>
                                            </div>
                                            <Badge variant="outline">{masterClass.classGroup}</Badge>
                                            <div className="flex items-center gap-2">
                                                <span className="text-sm text-muted-foreground">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</span>
                                                <div className="flex gap-1">
                                                    {masterClass.executors.map((executorId, index) => {
                                                        const executorName = availableExecutors.find(e => e.id === executorId)?.name || executorId;
                                                        return (
                                                            <Badge key={index} variant="secondary" className="text-xs">
                                                                {executorName}
                                                            </Badge>
                                                        );
                                                    })}
                                                </div>
                                                <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    className="h-6 w-6 p-0"
                                                    onClick={(e) => {
                                                        e.stopPropagation();
                                                        openExecutorsModal(masterClass);
                                                    }}
                                                >
                                                    <UserPlus className="h-3 w-3" />
                                                </Button>
                                            </div>

                                            {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏—è */}
                                            {masterClass.notes && (
                                                <div className="flex items-center gap-2">
                                                    <span className="text-sm text-muted-foreground">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</span>
                                                    <span className="text-sm text-muted-foreground max-w-48 truncate" title={masterClass.notes}>
                                                        {masterClass.notes}
                                                    </span>
                                                </div>
                                            )}
                                        </div>
                                        <div className="flex items-center gap-4">
                                            <div className="flex items-center gap-2">
                                                <Users className="h-4 w-4 text-muted-foreground" />
                                                <span>{masterClass.statistics.totalParticipants}</span>
                                            </div>
                                            <div className="flex items-center gap-2">
                                                <DollarSign className="h-4 w-4 text-muted-foreground" />
                                                <span>{masterClass.statistics.totalAmount} ‚ÇΩ</span>
                                            </div>
                                            <Button
                                                variant="outline"
                                                size="sm"
                                                onClick={() => onViewMasterClass(masterClass)}
                                            >
                                                –ü–æ–¥—Ä–æ–±–Ω–µ–µ
                                            </Button>
                                            <AlertDialog>
                                                <AlertDialogTrigger asChild>
                                                    <Button
                                                        variant="destructive"
                                                        size="sm"
                                                        className="h-8 w-8 p-0"
                                                        onClick={(e) => e.stopPropagation()}
                                                    >
                                                        <Trash2 className="h-4 w-4" />
                                                    </Button>
                                                </AlertDialogTrigger>
                                                <AlertDialogContent>
                                                    <AlertDialogHeader>
                                                        <AlertDialogTitle>–£–¥–∞–ª–∏—Ç—å –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å?</AlertDialogTitle>
                                                        <AlertDialogDescription>
                                                            –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å. –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω –Ω–∞–≤—Å–µ–≥–¥–∞.
                                                        </AlertDialogDescription>
                                                    </AlertDialogHeader>
                                                    <AlertDialogFooter>
                                                        <AlertDialogCancel>–û—Ç–º–µ–Ω–∞</AlertDialogCancel>
                                                        <AlertDialogAction
                                                            onClick={() => onDeleteMasterClass(masterClass.id)}
                                                            className="bg-destructive text-destructive-foreground hover:bg-destructive/90"
                                                        >
                                                            –£–¥–∞–ª–∏—Ç—å
                                                        </AlertDialogAction>
                                                    </AlertDialogFooter>
                                                </AlertDialogContent>
                                            </AlertDialog>
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>
                        ))}
                    </div>
                </CardContent>
            </Card>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏ */}
            <Dialog open={executorsModalOpen} onOpenChange={setExecutorsModalOpen}>
                <DialogContent className="max-w-md">
                    <DialogHeader>
                        <DialogTitle>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º–∏</DialogTitle>
                        <DialogDescription>
                            {selectedMasterClass && (
                                <div className="space-y-2">
                                    <p>–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: <strong>{selectedMasterClass.serviceName}</strong></p>
                                    <p>–î–∞—Ç–∞: <strong>{new Date(selectedMasterClass.date).toLocaleDateString('ru-RU')}</strong></p>
                                    <p>–í—Ä–µ–º—è: <strong>{selectedMasterClass.time}</strong></p>
                                    <p>–ú–µ—Å—Ç–æ: <strong>{schools.find(s => s.id === selectedMasterClass.schoolId)?.name}</strong></p>
                                    <p>–ö–ª–∞—Å—Å: <strong>{selectedMasterClass.classGroup}</strong></p>
                                </div>
                            )}
                        </DialogDescription>
                    </DialogHeader>

                    <div className="space-y-4">
                        <div>
                            <Label className="text-base font-semibold">–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π:</Label>
                            {loadingExecutors ? (
                                <div className="text-sm text-muted-foreground py-4">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...</div>
                            ) : (
                                <div className="space-y-2 max-h-60 overflow-y-auto border rounded-md p-3">
                                    {availableExecutors.map((executor) => (
                                        <label key={executor.id} className="flex items-center space-x-2 cursor-pointer hover:bg-muted/50 p-2 rounded">
                                            <input
                                                type="checkbox"
                                                checked={editingExecutors.includes(executor.id)}
                                                onChange={(e) => {
                                                    if (e.target.checked) {
                                                        setEditingExecutors(prev => [...prev, executor.id]);
                                                    } else {
                                                        setEditingExecutors(prev => prev.filter(id => id !== executor.id));
                                                    }
                                                }}
                                                className="rounded"
                                            />
                                            <span className="text-sm">{executor.name}</span>
                                        </label>
                                    ))}
                                </div>
                            )}
                            {availableExecutors.length === 0 && !loadingExecutors && (
                                <div className="text-sm text-muted-foreground py-4 text-center">
                                    –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
                                </div>
                            )}
                        </div>

                        {editingExecutors.length > 0 && (
                            <div className="bg-muted/30 p-3 rounded-md">
                                <Label className="text-sm font-medium">–í—ã–±—Ä–∞–Ω–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π: {editingExecutors.length}</Label>
                                <div className="flex flex-wrap gap-1 mt-2">
                                    {editingExecutors.map((executorId) => {
                                        const executorName = availableExecutors.find(e => e.id === executorId)?.name || executorId;
                                        return (
                                            <Badge key={executorId} variant="secondary" className="text-xs">
                                                {executorName}
                                            </Badge>
                                        );
                                    })}
                                </div>
                            </div>
                        )}
                    </div>

                    <DialogFooter>
                        <Button variant="outline" onClick={cancelExecutorsChanges}>
                            –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                            onClick={saveExecutorsChanges}
                            disabled={loadingExecutors}
                        >
                            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        </Button>
                    </DialogFooter>
                </DialogContent>
            </Dialog>
        </div>
    );
} 