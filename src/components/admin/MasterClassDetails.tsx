/**
 * @file: MasterClassDetails.tsx
 * @description: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
 * @dependencies: ui components, types, api
 * @created: 2024-12-19
 */

import React, { useState, useEffect, useMemo } from 'react';
import {
    Card,
    CardContent,
    CardDescription,
    CardHeader,
    CardTitle,
} from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Switch } from '@/components/ui/switch';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Label } from '@/components/ui/label';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import { useUpdateParticipantPaymentStatus } from '@/hooks/use-master-classes';
import { MasterClassParticipant, MasterClassStatistics, Service } from '@/types/services';
import { UserCheck, UserX, MessageCircle, Users, DollarSign, Calendar, Clock, MapPin, Building, Filter, RefreshCw, FileText, Phone, User, CheckCircle, AlertCircle, CreditCard, TrendingUp, Download, FileSpreadsheet, FileText as FileTextIcon } from 'lucide-react';
import { api } from '@/lib/api';
import { exportToExcel } from '@/lib/export-utils';

interface MasterClassDetailsProps {
    masterClass: {
        id: string;
        date: string;
        time: string;
        schoolId: string;
        schoolName: string;
        classGroup: string;
        city: string;
        serviceId: string;
        serviceName: string;
        executors: string[];
        notes?: string;
        participants: MasterClassParticipant[];
        statistics: {
            totalParticipants: number;
            totalAmount: number;
            paidAmount: number;
            unpaidAmount: number;
            stylesStats: { [key: string]: number };
            optionsStats: { [key: string]: number };
        };
        createdAt: string;
        updatedAt: string;
    };
    service: Service;
}

export const MasterClassDetails: React.FC<MasterClassDetailsProps> = ({ masterClass, service }) => {
    const [stats, setStats] = useState<MasterClassStatistics | null>(null);
    const [loading, setLoading] = useState(false);
    const [schoolData, setSchoolData] = useState<{ teacher?: string; teacherPhone?: string } | null>(null);
    const [participants, setParticipants] = useState<MasterClassParticipant[]>(
        masterClass.participants.map(p => ({
            ...p,
            hasReceived: p.hasReceived || false
        }))
    );

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç—ã
    const [paymentStatusFilter, setPaymentStatusFilter] = useState<'all' | 'paid' | 'unpaid'>('all');

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const [isEditing, setIsEditing] = useState(false);
    const [editData, setEditData] = useState({
        date: masterClass.date,
        time: masterClass.time,
        executors: masterClass.executors, // executors —É–∂–µ string[]
        notes: masterClass.notes || ''
    });
    const [availableExecutors, setAvailableExecutors] = useState<Array<{ id: string; name: string }>>([]);
    const [loadingExecutors, setLoadingExecutors] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const [isMessagePreviewOpen, setIsMessagePreviewOpen] = useState(false);
    const [previewMessage, setPreviewMessage] = useState('');
    const [messageType, setMessageType] = useState<'teacher' | 'admin'>('teacher');

    const { toast } = useToast();
    const updatePaymentStatusMutation = useUpdateParticipantPaymentStatus();

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ masterClass
    useEffect(() => {
        if (masterClass.participants && masterClass.participants.length > 0) {
            console.log('üîç MasterClassDetails: –ó–∞–≥—Ä—É–∂–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:', masterClass.participants);
            setParticipants(masterClass.participants.map(p => ({
                ...p,
                hasReceived: p.hasReceived || false
            })));
        } else {
            console.log('‚ö†Ô∏è MasterClassDetails: –ù–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ masterClass');
            setParticipants([]);
        }
    }, [masterClass.participants]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    const getFilteredParticipants = (): MasterClassParticipant[] => {
        switch (paymentStatusFilter) {
            case 'paid':
                return participants.filter(p => p.isPaid);
            case 'unpaid':
                return participants.filter(p => !p.isPaid);
            default:
                return participants;
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
    const getFilteredStatistics = () => {
        const filteredParticipants = getFilteredParticipants();
        const totalAmount = filteredParticipants.reduce((sum, p) => sum + p.totalAmount, 0);
        const paidAmount = filteredParticipants.filter(p => p.isPaid).reduce((sum, p) => sum + p.totalAmount, 0);
        const unpaidAmount = totalAmount - paidAmount;

        return {
            totalParticipants: filteredParticipants.length,
            totalAmount,
            paidAmount,
            unpaidAmount
        };
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É—á–∏—Ç–µ–ª—è
    const formatTeacherMessage = () => {
        const participants = masterClass.participants || [];
        const allParticipants = participants.filter(p => !p.isPaid || p.isPaid); // –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
        const participantNames = allParticipants.map(p => `‚Ä¢ ${p.childName}`).join('\n');

        return `–£—á–∞—â–∏–µ—Å—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ ‚Ññ${masterClass.classGroup} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ ${allParticipants.length} —á–µ–ª–æ–≤–µ–∫ —É—á–∞—Å—Ç–≤—É—é—Ç –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ "${service.name}" ${masterClass.date} –≤ ${masterClass.time}.

–£—á–∞—Å—Ç–Ω–∏–∫–∏:
${participantNames}

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è`;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    const formatAdminMessage = () => {
        const participants = masterClass.participants || [];
        const paidParticipants = participants.filter(p => p.isPaid);
        const unpaidParticipants = participants.filter(p => !p.isPaid);

        const paidNames = paidParticipants.map(p => `‚Ä¢ ${p.childName}`).join('\n');
        const unpaidNames = unpaidParticipants.map(p => `‚Ä¢ ${p.childName}`).join('\n');

        let message = `–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å "${service.name}" ${masterClass.date} –≤ ${masterClass.time}

–ö–ª–∞—Å—Å: ‚Ññ${masterClass.classGroup}
–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: ${participants.length}

`;

        if (paidParticipants.length > 0) {
            message += `‚úÖ –û–ü–õ–ê–ß–ï–ù–ù–´–ï (${paidParticipants.length}):
${paidNames}

`;
        }

        if (unpaidParticipants.length > 0) {
            message += `‚ùå –ù–ï –û–ü–õ–ê–ß–ï–ù–ù–´–ï (${unpaidParticipants.length}):
${unpaidNames}

`;
        }

        message += `–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è`;

        return message;
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∏—Ç–µ–ª—é
    const sendTeacherMessage = () => {
        const message = formatTeacherMessage();
        setPreviewMessage(message);
        setMessageType('teacher');
        setIsMessagePreviewOpen(true);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    const sendAdminMessage = () => {
        const message = formatAdminMessage();
        setPreviewMessage(message);
        setMessageType('admin');
        setIsMessagePreviewOpen(true);
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WhatsApp
    const sendWhatsAppMessage = (message: string) => {
        const encodedMessage = encodeURIComponent(message);
        const whatsappUrl = `https://wa.me/?text=${encodedMessage}`;
        window.open(whatsappUrl, '_blank');

        setIsMessagePreviewOpen(false);
        toast({
            title: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
            description: `–û—Ç–∫—Ä–æ–π—Ç–µ WhatsApp –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ${messageType === 'teacher' ? '—É—á–∏—Ç–µ–ª—é' : '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É'}`,
        });
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±—Ä–æ—Å–∞ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É —Å–æ–æ–±—â–µ–Ω–∏—è
    const resetToOriginalMessage = () => {
        if (messageType === 'teacher') {
            setPreviewMessage(formatTeacherMessage());
        } else {
            setPreviewMessage(formatAdminMessage());
        }
    };

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    const closeMessagePreview = () => {
        setIsMessagePreviewOpen(false);
        setPreviewMessage('');
    };

    useEffect(() => {
        loadStats();
        loadSchoolData();
        loadExecutors(); // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        console.log('MasterClass data:', masterClass);
        console.log('Participants:', participants);
    }, [masterClass.id]);

    const loadStats = async () => {
        setLoading(true);
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–º–µ—Å—Ç–æ API –≤—ã–∑–æ–≤–∞
            const localStats: MasterClassStatistics = {
                ...masterClass.statistics,
                stylesStats: {},
                optionsStats: {}
            };
            setStats(localStats);
        } catch (error) {
            console.error('Error loading stats:', error);
        } finally {
            setLoading(false);
        }
    };

    const loadSchoolData = async () => {
        try {
            // –£–ø—Ä–æ—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö —à–∫–æ–ª—ã
            setSchoolData({
                teacher: '–£—á–∏—Ç–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω',
                teacherPhone: '–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω'
            });
        } catch (error) {
            console.error('Error loading school data:', error);
        }
    };

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
    const loadExecutors = async () => {
        setLoadingExecutors(true);
        try {
            // –£–ø—Ä–æ—â–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
            setAvailableExecutors([
                { id: '1', name: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 1' },
                { id: '2', name: '–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å 2' }
            ]);
        } catch (error) {
            console.error('Error loading executors:', error);
        } finally {
            setLoadingExecutors(false);
        }
    };

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    const handleSaveChanges = async () => {
        try {
            // –£–ø—Ä–æ—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            console.log('Saving changes:', editData);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            Object.assign(masterClass, {
                date: editData.date,
                time: editData.time,
                executors: editData.executors.map(id => ({ id, name: availableExecutors.find(e => e.id === id)?.name || id })),
                notes: editData.notes
            });

            setIsEditing(false);
            toast({
                title: "–£—Å–ø–µ—à–Ω–æ",
                description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã",
            });
        } catch (error) {
            console.error('Error saving changes:', error);
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è",
                variant: "destructive"
            });
        }
    };

    // –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const handleCancelEdit = () => {
        setEditData({
            date: masterClass.date,
            time: masterClass.time,
            executors: masterClass.executors, // executors —É–∂–µ string[]
            notes: masterClass.notes || ''
        });
        setIsEditing(false);
    };

    const formatDate = (dateString: string) => {
        try {
            const date = new Date(dateString);
            if (isNaN(date.getTime())) {
                return dateString;
            }
            return date.toLocaleDateString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
            });
        } catch (error) {
            return dateString;
        }
    };

    const formatCurrency = (amount: number) => {
        return new Intl.NumberFormat('ru-RU', {
            style: 'currency',
            currency: 'RUB',
        }).format(amount);
    };

    const formatDateTime = (dateString: string, timeString: string) => {
        try {
            const date = new Date(dateString + 'T' + timeString);
            if (isNaN(date.getTime())) {
                return `${dateString} ${timeString}`;
            }
            return date.toLocaleString('ru-RU', {
                year: 'numeric',
                month: 'long',
                day: 'numeric',
                hour: '2-digit',
                minute: '2-digit'
            });
        } catch (error) {
            return `${dateString} ${timeString}`;
        }
    };

    const handlePaymentStatusChange = async (participantId: string, isPaid: boolean) => {
        try {
            await updatePaymentStatusMutation.mutateAsync({
                masterClassId: masterClass.id,
                participantId,
                isPaid
            });

            // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            setParticipants(prev => prev.map(p =>
                p.id === participantId ? { ...p, isPaid } : p
            ));

            toast({
                title: "–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω",
                description: `–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${isPaid ? '–æ–ø–ª–∞—á–µ–Ω–æ' : '–Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ'}`,
            });
        } catch (error) {
            console.error('Error updating payment status:', error);
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã",
                variant: "destructive",
            });
        }
    };

    const handleServiceReceivedChange = async (participantId: string, hasReceived: boolean) => {
        try {
            // TODO: API call to update service received status
            setParticipants(prev => prev.map(p =>
                p.id === participantId ? { ...p, hasReceived } : p
            ));

            toast({
                title: "–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω",
                description: `–°—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ ${hasReceived ? '–ø–æ–ª—É—á–µ–Ω–æ' : '–Ω–µ –ø–æ–ª—É—á–µ–Ω–æ'}`,
            });
        } catch (error) {
            console.error('Error updating service received status:', error);
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å–ª—É–≥–∏",
                variant: "destructive",
            });
        }
    };

    const getStyleOptionNames = (styleIds: string[], optionIds: string[]) => {
        if (!service) {
            return {
                styles: styleIds.join(', '),
                options: optionIds.join(', ')
            };
        }

        const styleNames = styleIds.map(id => {
            const style = service.styles.find(s => s.id === id);
            return style ? style.name : id;
        });

        const optionNames = optionIds.map(id => {
            const option = service.options.find(o => o.id === id);
            return option ? option.name : id;
        });

        return {
            styles: styleNames.join(', '),
            options: optionNames.join(', ')
        };
    };

    return (
        <div className="space-y-6 p-6 max-h-screen overflow-y-auto">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
            <div className="flex items-center justify-between">
                <div>
                    <h2 className="text-3xl font-bold text-primary">{service.name}</h2>
                </div>
                <Badge variant="outline" className="text-xl px-6 py-3">
                    {masterClass.classGroup}
                </Badge>
            </div>

            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ */}
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-2xl">
                        <FileText className="h-6 w-6" />
                        –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
                        <Button
                            variant="outline"
                            size="sm"
                            onClick={() => setIsEditing(!isEditing)}
                            className="ml-auto"
                        >
                            {isEditing ? '–û—Ç–º–µ–Ω–∏—Ç—å' : '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å'}
                        </Button>
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
                        <div className="flex items-center space-x-3 p-4 bg-blue-50 rounded-lg">
                            <Calendar className="w-6 h-6 text-blue-600" />
                            <div className="flex-1">
                                <p className="font-medium">–î–∞—Ç–∞</p>
                                {isEditing ? (
                                    <input
                                        type="date"
                                        value={editData.date}
                                        onChange={(e) => setEditData(prev => ({ ...prev, date: e.target.value }))}
                                        className="text-sm text-blue-600 bg-white border border-blue-200 rounded px-2 py-1 w-full"
                                    />
                                ) : (
                                    <p className="text-sm text-blue-600">{formatDate(masterClass.date)}</p>
                                )}
                            </div>
                        </div>

                        <div className="flex items-center space-x-3 p-4 bg-green-50 rounded-lg">
                            <Clock className="w-6 h-6 text-green-600" />
                            <div className="flex-1">
                                <p className="font-medium">–í—Ä–µ–º—è</p>
                                {isEditing ? (
                                    <input
                                        type="time"
                                        value={editData.time}
                                        onChange={(e) => setEditData(prev => ({ ...prev, time: e.target.value }))}
                                        className="text-sm text-green-600 bg-white border border-green-200 rounded px-2 py-1 w-full"
                                    />
                                ) : (
                                    <p className="text-sm text-green-600">{masterClass.time}</p>
                                )}
                            </div>
                        </div>

                        <div className="flex items-center space-x-3 p-4 bg-purple-50 rounded-lg">
                            <MapPin className="w-6 h-6 text-purple-600" />
                            <div>
                                <p className="font-medium">–ú–µ—Å—Ç–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è</p>
                                <p className="text-sm text-purple-600">{masterClass.schoolName}</p>
                            </div>
                        </div>

                        <div className="flex items-center space-x-3 p-4 bg-orange-50 rounded-lg">
                            <Users className="w-6 h-6 text-orange-600" />
                            <div>
                                <p className="font-medium">–ö–ª–∞—Å—Å</p>
                                <p className="text-sm text-orange-600">{masterClass.classGroup}</p>
                            </div>
                        </div>
                    </div>

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mt-6">
                        <div className="space-y-3">
                            <Label className="text-lg font-semibold">–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–∏:</Label>
                            {isEditing ? (
                                <div className="space-y-3">
                                    {loadingExecutors ? (
                                        <p className="text-sm text-muted-foreground">–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π...</p>
                                    ) : (
                                        <div className="space-y-2">
                                            {availableExecutors.map((executor) => (
                                                <label key={executor.id} className="flex items-center space-x-2">
                                                    <input
                                                        type="checkbox"
                                                        checked={editData.executors.includes(executor.id)}
                                                        onChange={(e) => {
                                                            if (e.target.checked) {
                                                                setEditData(prev => ({
                                                                    ...prev,
                                                                    executors: [...prev.executors, executor.id]
                                                                }));
                                                            } else {
                                                                setEditData(prev => ({
                                                                    ...prev,
                                                                    executors: prev.executors.filter(id => id !== executor.id)
                                                                }));
                                                            }
                                                        }}
                                                        className="rounded"
                                                    />
                                                    <span className="text-sm">{executor.name}</span>
                                                </label>
                                            ))}
                                        </div>
                                    )}
                                </div>
                            ) : (
                                <div className="space-y-2">
                                    {masterClass.executors.map((executor) => (
                                        <div key={executor} className="flex items-center space-x-2">
                                            <User className="w-4 h-4 text-muted-foreground" />
                                            <span className="text-sm">{executor}</span>
                                        </div>
                                    ))}
                                </div>
                            )}
                        </div>

                        <div className="space-y-3">
                            <Label className="text-lg font-semibold">–ö–æ–Ω—Ç–∞–∫—Ç–Ω–æ–µ –ª–∏—Ü–æ:</Label>
                            <div className="space-y-2">
                                {schoolData?.teacher ? (
                                    <div className="flex items-center space-x-2 p-3 bg-muted rounded-md">
                                        <User className="w-4 h-4 text-blue-600" />
                                        <span className="text-sm">{schoolData.teacher}</span>
                                    </div>
                                ) : (
                                    <p className="text-muted-foreground text-sm">–ù–µ —É–∫–∞–∑–∞–Ω–æ</p>
                                )}
                                {schoolData?.teacherPhone && (
                                    <div className="flex items-center space-x-2 p-3 bg-muted rounded-md">
                                        <Phone className="w-4 h-4 text-green-600" />
                                        <span className="text-sm">{schoolData.teacherPhone}</span>
                                    </div>
                                )}
                            </div>
                        </div>
                    </div>

                    {isEditing && (
                        <div className="flex space-x-3 mt-6">
                            <Button onClick={handleSaveChanges} className="bg-green-600 hover:bg-green-700">
                                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
                            </Button>
                            <Button onClick={handleCancelEdit} variant="outline">
                                –û—Ç–º–µ–Ω–∞
                            </Button>
                        </div>
                    )}

                    {/* –ü—Ä–∏–º–µ—á–∞–Ω–∏—è - –≤—Å–µ–≥–¥–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
                    <div className="mt-6">
                        <div className="space-y-3">
                            <Label className="text-lg font-semibold">–ü—Ä–∏–º–µ—á–∞–Ω–∏—è:</Label>
                            {isEditing ? (
                                <textarea
                                    value={editData.notes}
                                    onChange={(e) => setEditData(prev => ({ ...prev, notes: e.target.value }))}
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è –∫ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—É..."
                                    className="text-sm text-blue-600 bg-white border border-blue-200 rounded px-2 py-1 w-full h-24"
                                />
                            ) : (
                                <div className="min-h-[6rem]">
                                    {masterClass.notes ? (
                                        <p className="text-muted-foreground bg-muted p-4 rounded-md text-base">
                                            {masterClass.notes}
                                        </p>
                                    ) : (
                                        <p className="text-muted-foreground bg-muted/30 p-4 rounded-md text-base italic">
                                            –ü—Ä–∏–º–µ—á–∞–Ω–∏—è –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã
                                        </p>
                                    )}
                                </div>
                            )}
                        </div>
                    </div>
                </CardContent>
            </Card>

            {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-2xl">
                        <TrendingUp className="h-6 w-6 text-green-600" />
                        –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    </CardTitle>
                </CardHeader>
                <CardContent>
                    <div className="grid grid-cols-2 md:grid-cols-4 gap-6 mb-6">
                        <div className="text-center p-6 bg-blue-50 rounded-lg">
                            <div className="text-3xl font-bold text-blue-600">{masterClass.statistics.totalParticipants}</div>
                            <div className="text-base text-blue-600">–£—á–∞—Å—Ç–Ω–∏–∫–æ–≤</div>
                        </div>
                        <div className="text-center p-6 bg-green-50 rounded-lg">
                            <div className="text-3xl font-bold text-green-600">{formatCurrency(masterClass.statistics.totalAmount)}</div>
                            <div className="text-base text-green-600">–û–±—â–∞—è —Å—É–º–º–∞</div>
                        </div>
                        <div className="text-center p-6 bg-purple-50 rounded-lg">
                            <div className="text-3xl font-bold text-purple-600">{formatCurrency(masterClass.statistics.paidAmount)}</div>
                            <div className="text-base text-purple-600">–û–ø–ª–∞—Ç–∏–ª–∏</div>
                        </div>
                        <div className="text-center p-6 bg-orange-50 rounded-lg">
                            <div className="text-3xl font-bold text-orange-600">{formatCurrency(masterClass.statistics.unpaidAmount)}</div>
                            <div className="text-base text-orange-600">–ù–µ –æ–ø–ª–∞—Ç–∏–ª–∏</div>
                        </div>
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∏ WhatsApp */}
                    <div className="mb-6 p-4 bg-green-50 rounded-lg border border-green-200">
                        <h4 className="text-lg font-semibold text-green-800 mb-3 flex items-center gap-2">
                            <MessageCircle className="h-5 w-5" />
                            –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —á–µ—Ä–µ–∑ WhatsApp
                        </h4>
                        <div className="flex flex-col sm:flex-row gap-3">
                            <Button
                                onClick={sendTeacherMessage}
                                className="bg-green-600 hover:bg-green-700 text-white"
                                size="lg"
                            >
                                <MessageCircle className="w-4 h-4 mr-2" />
                                –£—á–∏—Ç–µ–ª—é –∫–ª–∞—Å—Å–∞
                            </Button>
                            <Button
                                onClick={sendAdminMessage}
                                className="bg-blue-600 hover:bg-blue-700 text-white"
                                size="lg"
                            >
                                <MessageCircle className="w-4 h-4 mr-2" />
                                –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
                            </Button>
                        </div>
                        <div className="mt-3 text-sm text-green-700">
                            <p>‚Ä¢ <strong>–£—á–∏—Ç–µ–ª—é:</strong> —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–ª–∞—Å—Å–∞</p>
                            <p>‚Ä¢ <strong>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:</strong> —Ä–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç—ã</p>
                        </div>
                    </div>

                    <Separator className="my-6" />

                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div className="space-y-4">
                            <h4 className="text-lg font-semibold">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º —Ä—É—á–µ–∫:</h4>
                            <div className="space-y-2">
                                {Object.entries(masterClass.statistics.stylesStats).map(([styleId, count]) => (
                                    <div key={styleId} className="flex justify-between items-center p-2 bg-muted rounded">
                                        <span className="text-sm">{styleId}</span>
                                        <Badge variant="secondary">{count}</Badge>
                                    </div>
                                ))}
                            </div>
                        </div>

                        <div className="space-y-4">
                            <h4 className="text-lg font-semibold">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Å–ª—É–≥–∞–º:</h4>
                            <div className="space-y-2">
                                {Object.entries(masterClass.statistics.optionsStats).map(([optionId, count]) => (
                                    <div key={optionId} className="flex justify-between items-center p-2 bg-muted rounded">
                                        <span className="text-sm">{optionId}</span>
                                        <Badge variant="secondary">{count}</Badge>
                                    </div>
                                ))}
                            </div>
                        </div>
                    </div>
                </CardContent>
            </Card>

            {/* –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
            <Card>
                <CardHeader>
                    <CardTitle className="flex items-center gap-3 text-2xl">
                        <Users className="h-6 w-6" />
                        –£—á–∞—Å—Ç–Ω–∏–∫–∏
                        {paymentStatusFilter !== 'all' && (
                            <Badge variant="secondary" className="text-sm ml-2">
                                {paymentStatusFilter === 'paid' ? '–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ' : '–û–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã'}
                            </Badge>
                        )}
                        <Badge variant="outline" className="text-sm ml-auto">
                            {getFilteredParticipants().length} –∏–∑ {participants.length}
                        </Badge>
                    </CardTitle>
                    <CardDescription>
                        {paymentStatusFilter === 'all'
                            ? '–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞'
                            : paymentStatusFilter === 'paid'
                                ? '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç–æ–π'
                                : '–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã'
                        }
                        {paymentStatusFilter !== 'all' && (
                            <span className="ml-2 text-xs text-muted-foreground">
                                ‚Ä¢ –ü–æ–∫–∞–∑–∞–Ω–æ {getFilteredParticipants().length} –∏–∑ {participants.length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                            </span>
                        )}
                    </CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="mb-4 p-3 bg-muted rounded">
                        <div className="flex items-center justify-between">
                            <p className="text-sm text-muted-foreground">
                                –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {getFilteredParticipants().length} –∏–∑ {participants.length}
                            </p>
                            <div className="flex items-center space-x-4 text-sm">
                                <span className="text-green-600">
                                    –û–ø–ª–∞—á–µ–Ω–æ: {getFilteredStatistics().paidAmount.toLocaleString('ru-RU')} ‚ÇΩ
                                </span>
                                <span className="text-red-600">
                                    –û–∂–∏–¥–∞–µ—Ç: {getFilteredStatistics().unpaidAmount.toLocaleString('ru-RU')} ‚ÇΩ
                                </span>
                                <span className="text-blue-600">
                                    –í—Å–µ–≥–æ: {getFilteredStatistics().totalAmount.toLocaleString('ru-RU')} ‚ÇΩ
                                </span>
                            </div>
                        </div>
                    </div>

                    {/* –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç—ã */}
                    <div className="flex items-center justify-between mb-4 p-3 bg-muted/50 rounded-lg border">
                        <div className="flex items-center space-x-3">
                            <Filter className="w-4 h-4 text-muted-foreground" />
                            <Label className="text-sm font-medium">–§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –æ–ø–ª–∞—Ç—ã:</Label>
                            <Select onValueChange={(value) => setPaymentStatusFilter(value as 'all' | 'paid' | 'unpaid')} value={paymentStatusFilter}>
                                <SelectTrigger className="w-[180px]">
                                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å" />
                                </SelectTrigger>
                                <SelectContent>
                                    <SelectItem value="all">–í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏</SelectItem>
                                    <SelectItem value="paid">–û–ø–ª–∞—á–µ–Ω–Ω—ã–µ</SelectItem>
                                    <SelectItem value="unpaid">–û–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã</SelectItem>
                                </SelectContent>
                            </Select>
                        </div>
                        <div className="flex items-center space-x-2">
                            {paymentStatusFilter !== 'all' && (
                                <>
                                    <Button
                                        variant="outline"
                                        size="sm"
                                        onClick={() => setPaymentStatusFilter('all')}
                                        className="text-xs"
                                    >
                                        –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä
                                    </Button>
                                    <Separator orientation="vertical" className="h-4" />
                                </>
                            )}
                            <div className="text-xs text-muted-foreground">
                                {paymentStatusFilter === 'all' && '–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏'}
                                {paymentStatusFilter === 'paid' && `–ü–æ–∫–∞–∑–∞–Ω—ã ${getFilteredParticipants().length} –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`}
                                {paymentStatusFilter === 'unpaid' && `–ü–æ–∫–∞–∑–∞–Ω—ã ${getFilteredParticipants().length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã`}
                            </div>
                        </div>
                    </div>

                    {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ */}
                    {paymentStatusFilter !== 'all' && getFilteredParticipants().length > 0 && (
                        <div className="mb-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                            <div className="flex items-center justify-between">
                                <div className="flex items-center space-x-2">
                                    <span className="text-sm font-medium text-blue-800">
                                        –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è {getFilteredParticipants().length} –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:
                                    </span>
                                </div>
                                <div className="flex space-x-2">
                                    {paymentStatusFilter === 'unpaid' && (
                                        <Button
                                            size="sm"
                                            variant="outline"
                                            className="text-green-600 border-green-200 hover:bg-green-50"
                                            onClick={() => {
                                                // TODO: –ú–∞—Å—Å–æ–≤–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
                                                alert(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –¥–ª—è ${getFilteredParticipants().length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
                                            }}
                                        >
                                            <UserCheck className="w-3 h-3 mr-1" />
                                            –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤—Å–µ–º
                                        </Button>
                                    )}
                                    {paymentStatusFilter === 'paid' && (
                                        <Button
                                            size="sm"
                                            variant="outline"
                                            className="text-red-600 border-red-200 hover:bg-red-50"
                                            onClick={() => {
                                                // TODO: –ú–∞—Å—Å–æ–≤–æ–µ –æ—Ç–º–µ–Ω–∞ –æ–ø–ª–∞—Ç—ã
                                                alert(`–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –¥–ª—è ${getFilteredParticipants().length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤`);
                                            }}
                                        >
                                            <UserX className="w-3 h-3 mr-1" />
                                            –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É –≤—Å–µ–º
                                        </Button>
                                    )}
                                </div>
                            </div>
                        </div>
                    )}

                    {/* –¢–∞–±–ª–∏—Ü–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –≤—Å–µ–≥–¥–∞ –≤–∏–¥–∏–º–∞ */}
                    <div className="overflow-x-auto">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead className="font-semibold">–£—á–∞—Å—Ç–Ω–∏–∫</TableHead>
                                    {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–∏–ª–µ–π */}
                                    {service?.styles.map(style => (
                                        <TableHead key={style.id} className="font-semibold text-center min-w-[100px]">
                                            {style.name}
                                        </TableHead>
                                    ))}
                                    {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ–ø—Ü–∏–π */}
                                    {service?.options.map(option => (
                                        <TableHead key={option.id} className="font-semibold text-center min-w-[100px]">
                                            {option.name}
                                        </TableHead>
                                    ))}
                                    <TableHead className="font-semibold">–°—É–º–º–∞</TableHead>
                                    <TableHead className="font-semibold">–°—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã</TableHead>
                                    <TableHead className="font-semibold">–ü–æ–ª—É—á–∏–ª —É—Å–ª—É–≥—É</TableHead>
                                    <TableHead className="font-semibold">–î–µ–π—Å—Ç–≤–∏—è</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {getFilteredParticipants().length > 0 ? (
                                    getFilteredParticipants().map((participant) => {
                                        const isPendingPayment = !participant.isPaid;
                                        const hasReceivedService = participant.hasReceived || false;

                                        // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–∞
                                        console.log(`üîç MasterClassDetails: –î–∞–Ω–Ω—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ ${participant.childName}:`, {
                                            id: participant.id,
                                            childName: participant.childName,
                                            parentName: participant.parentName,
                                            selectedStyles: participant.selectedStyles,
                                            selectedOptions: participant.selectedOptions,
                                            totalAmount: participant.totalAmount,
                                            isPaid: participant.isPaid,
                                            hasReceived: participant.hasReceived
                                        });

                                        // –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±—Ä–∞–Ω –ª–∏ —Å—Ç–∏–ª—å/–æ–ø—Ü–∏—è
                                        const isStyleSelected = (styleId: string) => {
                                            const result = participant.selectedStyles?.some((selected: unknown) =>
                                                typeof selected === 'string' ? selected === styleId : (selected as { id: string }).id === styleId
                                            ) || false;

                                            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                            if (participant.selectedStyles && participant.selectedStyles.length > 0) {
                                                console.log(`üîç isStyleSelected –¥–ª—è ${participant.childName}, —Å—Ç–∏–ª—å ${styleId}:`, {
                                                    selectedStyles: participant.selectedStyles,
                                                    result,
                                                    styleId
                                                });
                                            }

                                            return result;
                                        };

                                        const isOptionSelected = (optionId: string) => {
                                            const result = participant.selectedOptions?.some((selected: unknown) =>
                                                typeof selected === 'string' ? selected === optionId : (selected as { id: string }).id === optionId
                                            ) || false;

                                            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                            if (participant.selectedOptions && participant.selectedOptions.length > 0) {
                                                console.log(`üîç isOptionSelected –¥–ª—è ${participant.childName}, –æ–ø—Ü–∏—è ${optionId}:`, {
                                                    selectedOptions: participant.selectedOptions,
                                                    result,
                                                    optionId
                                                });
                                            }

                                            return result;
                                        };

                                        return (
                                            <TableRow
                                                key={participant.id}
                                                className={`
                                                    ${isPendingPayment ? 'bg-red-100 border-l-4 border-l-red-500' : ''}
                                                    ${hasReceivedService ? 'bg-green-100 border-l-4 border-l-green-500' : ''}
                                                `}
                                            >
                                                <TableCell className="font-medium">
                                                    <div>
                                                        <p className="font-semibold">{participant.childName}</p>
                                                        {participant.childName !== participant.parentName && (
                                                            <p className="text-sm text-muted-foreground">–†–æ–¥–∏—Ç–µ–ª—å: {participant.parentName}</p>
                                                        )}
                                                    </div>
                                                </TableCell>
                                                {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã —Å—Ç–∏–ª–µ–π —Å –≥–∞–ª–æ—á–∫–∞–º–∏ */}
                                                {service?.styles.map(style => (
                                                    <TableCell key={style.id} className="text-center">
                                                        {isStyleSelected(style.id) ? (
                                                            <CheckCircle className="h-5 w-5 text-green-600 mx-auto" />
                                                        ) : (
                                                            <div className="h-5 w-5 mx-auto border-2 border-gray-300 rounded"></div>
                                                        )}
                                                    </TableCell>
                                                ))}
                                                {/* –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç–æ–ª–±—Ü—ã –æ–ø—Ü–∏–π —Å –≥–∞–ª–æ—á–∫–∞–º–∏ */}
                                                {service?.options.map(option => (
                                                    <TableCell key={option.id} className="text-center">
                                                        {isOptionSelected(option.id) ? (
                                                            <CheckCircle className="h-5 w-5 text-blue-600 mx-auto" />
                                                        ) : (
                                                            <div className="h-5 w-5 mx-auto border-2 border-gray-300 rounded"></div>
                                                        )}
                                                    </TableCell>
                                                ))}
                                                <TableCell className="font-semibold text-green-600">
                                                    {formatCurrency(participant.totalAmount)}
                                                </TableCell>
                                                <TableCell>
                                                    <div className="flex items-center space-x-2">
                                                        <Switch
                                                            checked={participant.isPaid}
                                                            onCheckedChange={(checked) =>
                                                                handlePaymentStatusChange(participant.id, checked)
                                                            }
                                                        />
                                                        <Badge variant={participant.isPaid ? "default" : "destructive"}>
                                                            {participant.isPaid ? (
                                                                <>
                                                                    <UserCheck className="w-3 h-3 mr-1" />
                                                                    –û–ø–ª–∞—á–µ–Ω–æ
                                                                </>
                                                            ) : (
                                                                <>
                                                                    <UserX className="w-3 h-3 mr-1" />
                                                                    –û–∂–∏–¥–∞–µ—Ç
                                                                </>
                                                            )}
                                                        </Badge>
                                                    </div>
                                                </TableCell>
                                                <TableCell>
                                                    <div className="flex items-center space-x-2">
                                                        <Switch
                                                            checked={hasReceivedService}
                                                            onCheckedChange={(checked) =>
                                                                handleServiceReceivedChange(participant.id, checked)
                                                            }
                                                        />
                                                        <Badge variant={hasReceivedService ? "default" : "secondary"}>
                                                            {hasReceivedService ? (
                                                                <>
                                                                    <CheckCircle className="w-3 h-3 mr-1" />
                                                                    –ü–æ–ª—É—á–∏–ª
                                                                </>
                                                            ) : (
                                                                <>
                                                                    <AlertCircle className="w-3 h-3 mr-1" />
                                                                    –ù–µ –ø–æ–ª—É—á–∏–ª
                                                                </>
                                                            )}
                                                        </Badge>
                                                    </div>
                                                </TableCell>
                                                <TableCell>
                                                    <div className="flex space-x-2">
                                                        <Button
                                                            size="sm"
                                                            variant="outline"
                                                            onClick={() => handlePaymentStatusChange(participant.id, !participant.isPaid)}
                                                            className={participant.isPaid ? 'text-green-600 border-green-200' : 'text-red-600 border-red-200'}
                                                        >
                                                            {participant.isPaid ? '–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'}
                                                        </Button>
                                                        <Button
                                                            size="sm"
                                                            variant="outline"
                                                            onClick={() => handleServiceReceivedChange(participant.id, !hasReceivedService)}
                                                            className={hasReceivedService ? 'text-green-600 border-green-200' : 'text-blue-600 border-blue-200'}
                                                        >
                                                            {hasReceivedService ? '–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ' : '–û—Ç–º–µ—Ç–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ'}
                                                        </Button>
                                                    </div>
                                                </TableCell>
                                            </TableRow>
                                        );
                                    })
                                ) : (
                                    // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ø—É—Å—Ç–æ–π —Ç–∞–±–ª–∏—Ü—ã
                                    <TableRow>
                                        <TableCell colSpan={7} className="text-center py-8">
                                            <div className="flex flex-col items-center space-y-3">
                                                <Users className="w-12 h-12 text-muted-foreground opacity-50" />
                                                <div>
                                                    <p className="text-lg font-medium text-muted-foreground">
                                                        –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ–∫–∞ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã
                                                    </p>
                                                    <p className="text-sm text-muted-foreground">
                                                        –¢–∞–±–ª–∏—Ü–∞ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
                                                    </p>
                                                </div>
                                            </div>
                                        </TableCell>
                                    </TableRow>
                                )}
                            </TableBody>
                        </Table>
                    </div>
                </CardContent>
            </Card>

            {/* –î–µ–π—Å—Ç–≤–∏—è */}
            <Card>
                <CardHeader>
                    <CardTitle>–î–µ–π—Å—Ç–≤–∏—è</CardTitle>
                </CardHeader>
                <CardContent className="space-y-3">
                    <Button
                        variant="outline"
                        className="w-full"
                        disabled={loading}
                    >
                        {loading ? '–û–±–Ω–æ–≤–ª—è–µ–º...' : '–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É'}
                    </Button>

                    {/* –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ */}
                    <div className="space-y-2">
                        <Button
                            variant="outline"
                            className="w-full"
                            onClick={() => {
                                try {
                                    exportToExcel(masterClass, service, participants);
                                    toast({
                                        title: "–£—Å–ø–µ—à–Ω–æ!",
                                        description: "–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ Excel —Ñ–∞–π–ª",
                                        variant: "default"
                                    });
                                } catch (error) {
                                    toast({
                                        title: "–û—à–∏–±–∫–∞!",
                                        description: "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ Excel",
                                        variant: "destructive"
                                    });
                                }
                            }}
                        >
                            <FileSpreadsheet className="w-4 h-4 mr-2" />
                            –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
                        </Button>

                    </div>

                    {paymentStatusFilter !== 'all' && (
                        <div className="space-y-2">
                            <Button
                                variant="outline"
                                className="w-full"
                                onClick={() => {
                                    try {
                                        const filteredParticipants = getFilteredParticipants();
                                        exportToExcel(masterClass, service, filteredParticipants);
                                        toast({
                                            title: "–£—Å–ø–µ—à–Ω–æ!",
                                            description: `–≠–∫—Å–ø–æ—Ä—Ç ${paymentStatusFilter === 'paid' ? '–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö' : '–æ–∂–∏–¥–∞—é—â–∏—Ö –æ–ø–ª–∞—Ç—ã'} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ Excel`,
                                            variant: "default"
                                        });
                                    } catch (error) {
                                        toast({
                                            title: "–û—à–∏–±–∫–∞!",
                                            description: "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ",
                                            variant: "destructive"
                                        });
                                    }
                                }}
                            >
                                <FileSpreadsheet className="w-4 h-4 mr-2" />
                                Excel ({getFilteredParticipants().length} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤)
                            </Button>


                        </div>
                    )}
                    <div className="text-xs text-muted-foreground text-center pt-2 border-t">
                        {paymentStatusFilter === 'all'
                            ? '–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞'
                            : `–ü–æ–∫–∞–∑–∞–Ω—ã ${paymentStatusFilter === 'paid' ? '–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ' : '–æ–∂–∏–¥–∞—é—â–∏–µ –æ–ø–ª–∞—Ç—ã'} —É—á–∞—Å—Ç–Ω–∏–∫–∏ (${getFilteredParticipants().length} –∏–∑ ${participants.length})`
                        }
                    </div>
                </CardContent>
            </Card>

            {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */}
            {isMessagePreviewOpen && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
                    <div className="bg-white p-6 rounded-lg max-w-2xl w-full max-h-[90vh] overflow-y-auto">
                        <div className="flex items-center justify-between mb-4">
                            <h3 className="text-xl font-bold">
                                –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è
                            </h3>
                            <Button
                                variant="ghost"
                                size="sm"
                                onClick={closeMessagePreview}
                                className="text-gray-500 hover:text-gray-700"
                            >
                                ‚úï
                            </Button>
                        </div>

                        <div className="mb-4">
                            <Label className="text-base font-medium">
                                {messageType === 'teacher' ? '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–∏—Ç–µ–ª—è:' : '–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:'}
                            </Label>
                        </div>

                        <div className="mb-4">
                            <textarea
                                value={previewMessage}
                                onChange={(e) => setPreviewMessage(e.target.value)}
                                className="w-full h-80 p-4 border border-gray-300 rounded-md text-sm font-mono resize-none focus:ring-2 focus:ring-blue-500 focus:border-transparent leading-relaxed"
                                placeholder="–†–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è..."
                                style={{ whiteSpace: 'pre-wrap' }}
                            />
                        </div>

                        <div className="flex items-center justify-between">
                            <div className="text-sm text-gray-600">
                                –°–∏–º–≤–æ–ª–æ–≤: {previewMessage.length}
                            </div>
                            <div className="flex space-x-3">
                                <Button
                                    variant="outline"
                                    onClick={resetToOriginalMessage}
                                    className="px-4"
                                >
                                    <RefreshCw className="w-4 h-4 mr-2" />
                                    –°–±—Ä–æ—Å–∏—Ç—å
                                </Button>
                                <Button
                                    variant="outline"
                                    onClick={closeMessagePreview}
                                    className="px-6"
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </Button>
                                <Button
                                    onClick={() => sendWhatsAppMessage(previewMessage)}
                                    className="bg-green-600 hover:bg-green-700 px-6"
                                >
                                    <MessageCircle className="w-4 h-4 mr-2" />
                                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ WhatsApp
                                </Button>
                            </div>
                        </div>
                    </div>
                </div>
            )}
        </div>
    );
}; 