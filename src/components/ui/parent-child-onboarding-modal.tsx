/**
 * @file: parent-child-onboarding-modal.tsx
 * @description: –û–±–æ–±—â–µ–Ω–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –∏ —Ä–µ–±–µ–Ω–∫–∞ —Å –º–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
 * @dependencies: Dialog, Button, useMemo
 * @created: 2024-12-19
 */

import React, { useState, useMemo } from 'react';
import { useNavigate } from 'react-router-dom';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Button } from '@/components/ui/button';
import { PlayCircle, Baby, Palette, Users, Calendar, CheckCircle, Star } from 'lucide-react';

interface ParentChildOnboardingModalProps {
    isOpen: boolean;
    onOpenChange: (open: boolean) => void;
}

const ParentChildOnboardingModal: React.FC<ParentChildOnboardingModalProps> = ({
    isOpen,
    onOpenChange
}) => {
    const [onboardingStep, setOnboardingStep] = useState(0);
    const navigate = useNavigate();

    // –ü–æ—Å—Ç–µ—Ä—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ‚Äî –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ src/assets/onboarding
    const posterImages = useMemo(() => {
        const mods = import.meta.glob("@/assets/onboarding/*.{png,jpg,jpeg,webp}", { eager: true }) as Record<string, { default: string }>;
        console.log('üîç –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', mods);

        const list = Object.entries(mods).map(([path, mod]) => ({
            src: (mod as { default: string }).default,
            order: (() => {
                const match = path.match(/(\d+)/i);
                return match ? parseInt(match[1], 10) : 999;
            })(),
        }));

        const sortedList = list.sort((a, b) => a.order - b.order);
        console.log('üìã –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', sortedList);

        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        const imageMap = new Map(sortedList.map(img => [img.order, img.src]));
        console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø–æ –Ω–æ–º–µ—Ä–∞–º:', imageMap);

        return imageMap;
    }, []);

    // –í–∏–¥–µ–æ–≥–∞–ª–µ—Ä–µ—è –∫–æ–º–ø–∞–Ω–∏–∏ ‚Äî –≤—Å–µ .mp4 –∏–∑ src/assets/onboarding
    const videoModules = useMemo(() => {
        const mods = import.meta.glob("@/assets/onboarding/*.mp4", { eager: true }) as Record<string, { default: string }>;
        console.log('üé• –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', mods);

        const list = Object.entries(mods).map(([path, mod]) => ({
            src: (mod as { default: string }).default,
            order: (() => {
                const match = path.match(/(\d+)/i);
                return match ? parseInt(match[1], 10) : 999;
            })(),
        }));

        const sortedList = list.sort((a, b) => a.order - b.order);
        console.log('üìã –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', sortedList);

        // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É
        const videoMap = new Map(sortedList.map(video => [video.order, video.src]));
        console.log('üó∫Ô∏è –ö–∞—Ä—Ç–∞ –≤–∏–¥–µ–æ –ø–æ –Ω–æ–º–µ—Ä–∞–º:', videoMap);

        return videoMap;
    }, []);

    const slides = [
        {
            title: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é! üé®',
            text: '–ú—ã —Å–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ—Å–∫–æ–≤—ã–µ —Ä—É—á–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π. –ö–∞–∂–¥—ã–π —Ä–µ–±–µ–Ω–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–∏—Ç—å —Å–≤–æ—é –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ—Å—Ç—å!',
            icon: <Star className="w-12 h-12 text-orange-500" />,
            slideNumber: 1
        },
        {
            title: '–ü—Ä–æ—Å—Ç–æ–π –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ üë®‚Äçüë©‚Äçüëß‚Äçüë¶',
            text: '–í—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É –∏ –∫–ª–∞—Å—Å –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞, –º—ã –ø–æ–∫–∞–∂–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã. –ó–∞–ø–∏—Å—å –∑–∞–π–º–µ—Ç 2 –º–∏–Ω—É—Ç—ã!',
            icon: <Users className="w-12 h-12 text-purple-500" />,
            slideNumber: 2
        },
        {
            title: '–î–ª—è –¥–µ—Ç–µ–π: –ü—Ä–∏–¥—É–º–∞–π —Å–≤–æ–π –∂–µ—Å—Ç! ‚úã',
            text: '–†–µ–±–µ–Ω–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç –ª—é–±—É—é —Ñ–æ—Ä–º—É —Ä—É–∫–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—é–±–∏–º—ã–π –∂–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å—Ç–∞–Ω–µ—Ç –æ—Å–Ω–æ–≤–æ–π —Ä—É—á–∫–∏',
            icon: <Baby className="w-12 h-12 text-blue-500" />,
            slideNumber: 3
        },
        {
            title: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—Ä–µ–≤—ã—à–µ –≤—Å–µ–≥–æ üõ°Ô∏è',
            text: '–ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–ø–ª—ã–π –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –≤–æ—Å–∫. –ü—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –æ–ø—ã—Ç–Ω—ã–º–∏ –º–∞—Å—Ç–µ—Ä–∞–º–∏',
            icon: <CheckCircle className="w-12 h-12 text-green-500" />,
            slideNumber: 4
        },
        {
            title: '–£–∫—Ä–∞—à–∞–µ–º, –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —Å–æ–∑–¥–∞–µ–º! ‚ú®üéâ',
            text: '–í—ã–±–∏—Ä–∞–µ–º —Å—Ç–∏–ª—å: —Å–≤–µ—Ç–æ–≤—ã–µ —Ä—É—á–∫–∏, –±–ª–µ—Å—Ç–∫–∏, –ª–∞–∫–∏—Ä–æ–≤–∫–∞, –Ω–∞–¥–ø–∏—Å–∏. –ö–∞–∂–¥–∞—è —Ä—É—á–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞! –ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç, —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏ –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É–≤–µ–Ω–∏—Ä –Ω–∞ –ø–∞–º—è—Ç—å. –î–µ—Ç–∏ –≤ –≤–æ—Å—Ç–æ—Ä–≥–µ!',
            icon: <Palette className="w-12 h-12 text-pink-500" />,
            slideNumber: 6
        }
    ];

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —Å–ª–∞–π–¥–æ–≤
    console.log('üéØ –°–ª–∞–π–¥—ã –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:', slides.map((slide, index) => ({
        index,
        title: slide.title,
        slideNumber: slide.slideNumber,
        hasImage: !!posterImages.get(slide.slideNumber),
        hasVideo: !!videoModules.get(slide.slideNumber)
    })));

    const currentSlide = slides[Math.min(onboardingStep, slides.length - 1)];

    const handleNext = () => {
        if (onboardingStep < slides.length - 1) {
            setOnboardingStep(onboardingStep + 1);
        }
    };

    const handlePrev = () => {
        if (onboardingStep > 0) {
            setOnboardingStep(onboardingStep - 1);
        }
    };

    const handleComplete = () => {
        onOpenChange(false);
        setOnboardingStep(0);
    };

    const handleSkip = () => {
        onOpenChange(false);
        setOnboardingStep(0);
    };

    return (
        <Dialog open={isOpen} onOpenChange={onOpenChange}>
            <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
                <DialogHeader className="text-center">
                    <DialogTitle className="text-2xl sm:text-3xl font-bold text-gray-800 mb-2">
                        {currentSlide.title}
                    </DialogTitle>
                    <DialogDescription className="text-base sm:text-lg text-gray-600 leading-relaxed">
                        {currentSlide.text}
                    </DialogDescription>
                </DialogHeader>

                <div className="space-y-6">
                    {/* –ú–µ–¥–∏–∞-–∫–æ–Ω—Ç–µ–Ω—Ç */}
                    <div className="w-full overflow-hidden rounded-xl bg-white/50 shadow-lg">
                        {(() => {
                            const slideNumber = currentSlide.slideNumber;
                            const image = posterImages.get(slideNumber);
                            const video = videoModules.get(slideNumber);

                            console.log(`üéØ –°–ª–∞–π–¥ ${slideNumber}:`, { image, video });

                            if (image) {
                                return (
                                    <img
                                        src={image}
                                        className="w-full aspect-video object-cover"
                                        alt={currentSlide.title}
                                        onError={(e) => {
                                            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:', image);
                                            e.currentTarget.style.display = 'none';
                                        }}
                                        onLoad={() => {
                                            console.log('‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', image);
                                        }}
                                    />
                                );
                            } else if (video) {
                                return (
                                    <video
                                        src={video}
                                        className="w-full aspect-video object-cover"
                                        muted
                                        autoPlay
                                        loop
                                        playsInline
                                    />
                                );
                            } else {
                                return (
                                    <div className="w-full aspect-video bg-gradient-to-r from-orange-100 to-purple-100 flex items-center justify-center">
                                        {currentSlide.icon}
                                    </div>
                                );
                            }
                        })()}
                    </div>

                    {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ */}
                    <div className="flex justify-center gap-2">
                        {slides.map((_, idx) => (
                            <div
                                key={idx}
                                className={`h-3 w-3 rounded-full transition-all duration-200 ${idx === onboardingStep
                                    ? 'bg-orange-500 scale-110'
                                    : 'bg-orange-200'
                                    }`}
                            />
                        ))}
                    </div>

                    {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
                    <div className="flex flex-col sm:flex-row gap-3 justify-center">
                        {onboardingStep > 0 && (
                            <Button
                                variant="outline"
                                onClick={handlePrev}
                                className="flex-1 sm:flex-none min-w-[120px]"
                            >
                                ‚Üê –ù–∞–∑–∞–¥
                            </Button>
                        )}

                        {onboardingStep < slides.length - 1 ? (
                            <Button
                                className="bg-gradient-to-r from-orange-500 to-purple-500 text-white hover:from-orange-600 hover:to-purple-600 flex-1 sm:flex-none min-w-[120px]"
                                onClick={handleNext}
                            >
                                –î–∞–ª–µ–µ ‚Üí
                            </Button>
                        ) : (
                            <div className="flex flex-col sm:flex-row gap-3 w-full">
                                <Button
                                    variant="secondary"
                                    onClick={() => navigate('/about')}
                                    className="flex-1 sm:flex-none min-w-[120px]"
                                >
                                    –ù–∞—à–∏ —Ä–∞–±–æ—Ç—ã –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
                                </Button>
                                <Button
                                    className="bg-gradient-to-r from-orange-500 to-purple-500 text-white hover:from-orange-600 hover:to-purple-600 flex-1 sm:flex-none min-w-[120px]"
                                    onClick={handleComplete}
                                >
                                    –ù–∞—á–∞—Ç—å! üöÄ
                                </Button>
                            </div>
                        )}
                    </div>

                    {/* –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å–∫–∞ */}
                    <div className="text-center">
                        <Button
                            variant="ghost"
                            onClick={handleSkip}
                            className="text-sm text-gray-500 hover:text-gray-700"
                        >
                            –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥
                        </Button>
                    </div>
                </div>
            </DialogContent>
        </Dialog>
    );
};

export default ParentChildOnboardingModal;
