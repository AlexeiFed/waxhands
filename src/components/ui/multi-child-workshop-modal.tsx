/**
 * @file: multi-child-workshop-modal.tsx
 * @description: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –¥–µ—Ç–µ–π –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å —Å –ø–æ—à–∞–≥–æ–≤—ã–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
 * @dependencies: Dialog, Card, Button, Checkbox, useAuth, useServices, useToast
 * @created: 2024-12-19
 */

import { useState, useEffect, useRef } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '@/components/ui/dialog';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Checkbox } from '@/components/ui/checkbox';
import { Badge } from '@/components/ui/badge';
import { AnimatedStars } from '@/components/ui/animated-stars';
import { PhotoGalleryModal } from '@/components/ui/photo-gallery-modal';
import { VideoPlayerModal } from '@/components/ui/video-player-modal';
import { useAuth } from '@/contexts/AuthContext';
import { useServices } from '@/hooks/use-services';
import { useToast } from '@/hooks/use-toast';
import { useIsSmallScreen } from '@/hooks/use-mobile';
import { api } from '@/lib/api';
import { Service, ServiceStyle, ServiceOption } from '@/types/services';
import { WorkshopRegistration, Invoice } from '@/types';
import YandexPaymentButton from '@/components/ui/yandex-payment-button';
import {
    Calendar,
    Clock,
    MapPin,
    Users,
    Palette,
    Sparkles,
    CheckCircle,
    AlertCircle,
    Info,
    Image,
    Video,
    X,
    Star,
    Brain,
    Camera,
    Gift,
    Lock,
    CreditCard
} from 'lucide-react';

interface WorkshopCardData {
    id: string;
    title: string;
    schoolId: string;
    schoolName: string;
    classGroup: string;
    date: string;
    time: string;
    serviceId: string;
    eligibleChildren: ChildData[];
    participationStatus?: 'none' | 'pending' | 'paid' | 'cancelled';
    childrenWithStatus?: Array<{
        childId: string;
        childName: string;
        status: 'none' | 'pending' | 'paid' | 'cancelled';
        invoiceId?: string;
        registrationId?: string;
        registration?: WorkshopRegistration;
        invoice?: Invoice;
    }>;
    invoiceStatus?: 'pending' | 'paid' | 'cancelled';
}

interface ChildData {
    id: string;
    name: string;
    age: number;
    schoolId: string;
    classGroup: string;
}

interface MultiChildWorkshopModalProps {
    isOpen: boolean;
    onOpenChange: (open: boolean) => void;
    workshop: WorkshopCardData | null;
    children: ChildData[];
    onRegistrationSuccess?: () => void;
    masterClasses?: Array<{
        id: string;
        participants?: Array<{
            childId: string;
            selectedStyles: string[];
            selectedOptions: string[];
            totalAmount: number;
        }>;
    }>;
}

interface SelectedOptions {
    [childId: string]: {
        styles: string[];
        options: string[];
        totalAmount: number;
        isCompleted: boolean;
    };
}

interface ChildRegistration {
    childId: string;
    childName: string;
    childAge: number;
    selectedStyles: string[];
    selectedOptions: string[];
    totalAmount: number;
    isCompleted: boolean;
}

// –í–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ –≥—Ä—É–ø–ø—ã —Å—Ç–∏–ª–µ–π
const EXCLUSIVE_STYLE_GROUPS = [
    ['–û–±—ã—á–Ω–∞—è —Ä—É—á–∫–∞', '–°–≤–µ—Ç–æ–≤–∞—è —Ä—É—á–∫–∞'],
    ['–î–≤–æ–π–Ω—ã–µ —Ä—É—á–∫–∏', '–î–≤–æ–π–Ω—ã–µ —Å–≤–µ—Ç–æ–≤—ã–µ —Ä—É—á–∫–∏']
];

// –ì—Ä—É–ø–ø—ã –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö –æ–ø—Ü–∏–π
const EXCLUSIVE_OPTION_GROUPS = [
    ['–õ–∞–∫–∏—Ä–æ–≤–∫–∞', '–õ–∞–∫–∏—Ä–æ–≤–∫–∞ —Å –±–ª–µ—Å—Ç–∫–∞–º–∏'],
    ['–ù–∞–¥–ø–∏—Å—å', '–ù–∞–¥–ø–∏—Å—å —Å–≤–µ—Ç–æ–≤–∞—è'],
    ['–ù–∞–∫–ª–µ–π–∫–∞', '–ù–∞–∫–ª–µ–π–∫–∞ –æ–±—ä–µ–º–Ω–∞—è']
];

// –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –¥–ª—è —Å—Ç–∏–ª–µ–π
const AGE_RESTRICTIONS = {
    '–î–≤–æ–π–Ω—ã–µ —Ä—É—á–∫–∏': { min: 5, max: 18 },
    '–î–≤–æ–π–Ω—ã–µ —Å–≤–µ—Ç–æ–≤—ã–µ —Ä—É—á–∫–∏': { min: 5, max: 18 }
};

export default function MultiChildWorkshopModal({
    isOpen,
    onOpenChange,
    workshop,
    children,
    onRegistrationSuccess,
    masterClasses = []
}: MultiChildWorkshopModalProps) {
    console.log('üîÑ MODAL: MultiChildWorkshopModal —Ä–µ–Ω–¥–µ—Ä–∏—Ç—Å—è, onRegistrationSuccess:', !!onRegistrationSuccess);

    const { user } = useAuth();
    const { services } = useServices();
    const { toast } = useToast();
    const isSmallScreen = useIsSmallScreen();

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –º–µ–¥–∏–∞
    const [isPhotoCarouselOpen, setIsPhotoCarouselOpen] = useState(false);
    const [isVideoPlayerOpen, setIsVideoPlayerOpen] = useState(false);
    const [currentMedia, setCurrentMedia] = useState<{
        type: 'photo' | 'video';
        urls: string[];
        currentIndex: number;
        title: string;
    } | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–µ—Ç–µ–π
    const [childRegistrations, setChildRegistrations] = useState<ChildRegistration[]>([]);
    const [currentStep, setCurrentStep] = useState(0);
    const [currentService, setCurrentService] = useState<Service | null>(null);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [isCancelled, setIsCancelled] = useState(false);
    const [submitProgress, setSubmitProgress] = useState(0);
    const [currentSubmittingChild, setCurrentSubmittingChild] = useState('');
    const [isSuccess, setIsSuccess] = useState(false);

    // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–ø–ª–∞—Ç—ã
    const [createdInvoices, setCreatedInvoices] = useState<Invoice[]>([]);
    const [showPaymentSection, setShowPaymentSection] = useState(false);

    // –§–ª–∞–≥ –¥–ª—è –æ—Ç–º–µ–Ω—ã –æ—Ç–ø—Ä–∞–≤–∫–∏
    const cancelRef = useRef(false);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
    const isViewMode = workshop?.participationStatus && workshop.participationStatus !== 'none';

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
    useEffect(() => {
        if (children && children.length > 0) {
            const registrations = children.map(child => ({
                childId: child.id,
                childName: child.name,
                childAge: child.age,
                selectedStyles: [],
                selectedOptions: [],
                totalAmount: 0,
                isCompleted: false
            }));
            setChildRegistrations(registrations);
        }
    }, [children]);

    // –ü–æ–∏—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞
    useEffect(() => {
        if (workshop && services) {
            const service = services.find(s => s.id === workshop.serviceId);
            setCurrentService(service || null);
        }
    }, [workshop, services]);

    const getCurrentChild = () => childRegistrations[currentStep];
    const getCurrentChildTotal = () => getCurrentChild()?.totalAmount || 0;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö —Å—Ç–∏–ª–µ–π
    const isStyleExclusive = (styleName: string, selectedStyles: string[]) => {
        const group = EXCLUSIVE_STYLE_GROUPS.find(g => g.includes(styleName));
        if (!group) return false;

        return group.some(otherStyle =>
            otherStyle !== styleName && selectedStyles.includes(otherStyle)
        );
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π
    const isStyleAgeRestricted = (styleName: string, childAge: number) => {
        const restriction = AGE_RESTRICTIONS[styleName as keyof typeof AGE_RESTRICTIONS];
        if (!restriction) return true;

        return childAge >= restriction.min && childAge <= restriction.max;
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å—Ç–∏–ª—è
    const isStyleBlocked = (styleName: string, childAge: number, selectedStyles: string[]) => {
        return isStyleExclusive(styleName, selectedStyles) || !isStyleAgeRestricted(styleName, childAge);
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
    const getAvailableStyles = (childAge: number, selectedStyles: string[]) => {
        if (!currentService) return [];

        return currentService.styles.filter(style => {
            const isBlocked = isStyleBlocked(style.name, childAge, selectedStyles);
            return !isBlocked;
        });
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞
    const getBlockedStyles = (childAge: number, selectedStyles: string[]) => {
        if (!currentService) return [];

        return currentService.styles.filter(style => {
            return isStyleBlocked(style.name, childAge, selectedStyles);
        });
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è —Å—Ç–∏–ª—è
    const getStyleDescription = (styleName: string): string => {
        const descriptions: { [key: string]: string } = {
            '–û–±—ã—á–Ω–∞—è —Ä—É—á–∫–∞': '–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è —Ä–∞—Å–∫—Ä–∞—Å–∫–∞ —Ä—É–∫–∏ —Å –≤—ã–±–æ—Ä–æ–º –∂–µ—Å—Ç–æ–≤ –∏ –ø–æ–¥—Å—Ç–∞–≤–æ–∫',
            '–°–≤–µ—Ç–æ–≤–∞—è —Ä—É—á–∫–∞': '–í–æ –≤–Ω—É—Ç—Ä—å —Ä—É–∫–∏ –ø–æ–º–µ—â–∞–µ—Ç—Å—è —Å–≤–µ—Ç–æ–¥–∏–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –º–∏–≥–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏',
            '–î–≤–æ–π–Ω—ã–µ —Ä—É—á–∫–∏': '–î–≤–æ–π–Ω—ã–µ –æ–±—ã—á–Ω—ã–µ —Ä—É—á–∫–∏ –¥–ª—è –¥–µ—Ç–µ–π –æ—Ç 5 –ª–µ—Ç: –∑–∞–ø—è—Å—Ç—å—è –≤–º–µ—Å—Ç–µ, –≤—ã–±–æ—Ä —Ñ–æ—Ä–º—ã (—Å–µ—Ä–¥–µ—á–∫–æ, –∑–∞–º–æ–∫ –∏ –¥—Ä.) –∏ —Ä–∞—Å–∫—Ä–∞—Å–∫–∞ –≤ –ª—é–±—ã–µ —Ü–≤–µ—Ç–∞',
            '–î–≤–æ–π–Ω—ã–µ —Å–≤–µ—Ç–æ–≤—ã–µ —Ä—É—á–∫–∏': '–í–æ –≤–Ω—É—Ç—Ä—å —Ä—É–∫ –ø–æ–º–µ—â–∞–µ—Ç—Å—è 2 —Å–≤–µ—Ç–æ–¥–∏–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–µ –º–∏–≥–∞—é—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —Ü–≤–µ—Ç–∞–º–∏'
        };
        return descriptions[styleName] || styleName;
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–ø—Ü–∏–∏
    const getOptionDescription = (optionName: string): string => {
        const descriptions: { [key: string]: string } = {
            '–õ–∞–∫–∏—Ä–æ–≤–∫–∞': '–ü–æ–∫—Ä—ã—Ç–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º –ª–∞–∫–æ–º –¥–ª—è –±–ª–µ—Å–∫–∞ –∏ –∑–∞—â–∏—Ç—ã',
            '–õ–∞–∫–∏—Ä–æ–≤–∫–∞ —Å –±–ª–µ—Å—Ç–∫–∞–º–∏': '–õ–∞–∫–∏—Ä–æ–≤–∫–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –±–ª–µ—Å—Ç–æ–∫ –¥–ª—è –æ—Å–æ–±–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞',
            '–ù–∞–¥–ø–∏—Å—å': '–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å –Ω–∞ —Ä—É—á–∫–µ',
            '–ù–∞–¥–ø–∏—Å—å —Å–≤–µ—Ç–æ–≤–∞—è': '–°–≤–µ—Ç—è—â–∞—è—Å—è –Ω–∞–¥–ø–∏—Å—å —Å LED –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π',
            '–ù–∞–∫–ª–µ–π–∫–∞': '–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω–∞—è –Ω–∞–∫–ª–µ–π–∫–∞ –Ω–∞ —Ä—É—á–∫—É',
            '–ù–∞–∫–ª–µ–π–∫–∞ –æ–±—ä–µ–º–Ω–∞—è': '–û–±—ä–µ–º–Ω–∞—è 3D –Ω–∞–∫–ª–µ–π–∫–∞ –¥–ª—è –æ—Å–æ–±–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞'
        };
        return descriptions[optionName] || optionName;
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
    const checkFileExists = async (url: string): Promise<boolean> => {
        if (!url || typeof url !== 'string') return false;

        try {
            // –ï—Å–ª–∏ URL –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å /), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –±—ç–∫–µ–Ω–¥–∞
            let absoluteUrl = url;
            if (url.startsWith('/')) {
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –±—ç–∫–µ–Ω–¥–∞ –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö URL
                absoluteUrl = `http://localhost:3001${url}`;
                console.log(`–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π URL ${url} –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π: ${absoluteUrl}`);
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ URL –≤–∞–ª–∏–¥–Ω—ã–π
            const urlObj = new URL(absoluteUrl);
            if (!urlObj.protocol.startsWith('http')) return false;

            console.log(`–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª: ${absoluteUrl}`);
            const response = await fetch(absoluteUrl, {
                method: 'HEAD',
                mode: 'cors',
                cache: 'no-cache'
            });

            const exists = response.ok;
            console.log(`–§–∞–π–ª ${absoluteUrl} –¥–æ—Å—Ç—É–ø–µ–Ω: ${exists} (—Å—Ç–∞—Ç—É—Å: ${response.status})`);
            return exists;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–∞–π–ª–∞ ${url}:`, error);
            return false;
        }
    };

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    const filterExistingFiles = async (urls: string[]): Promise<string[]> => {
        if (!Array.isArray(urls) || urls.length === 0) return [];

        const existingFiles: string[] = [];
        const validUrls = urls.filter(url => url && typeof url === 'string');

        console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã:', validUrls);

        for (const url of validUrls) {
            const exists = await checkFileExists(url);
            console.log(`–§–∞–π–ª ${url} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${exists}`);
            if (exists) {
                // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–π URL –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
                const absoluteUrl = url.startsWith('/') ? `http://localhost:3001${url}` : url;
                existingFiles.push(absoluteUrl);
            }
        }

        console.log('–ù–∞–π–¥–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:', existingFiles);
        return existingFiles;
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –≥–∞–ª–µ—Ä–µ–∏ —Ñ–æ—Ç–æ
    const openPhotoCarousel = async (images: string[], title: string) => {
        console.log(`openPhotoCarousel: –ü–æ–ª—É—á–µ–Ω—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è "${title}":`, images);

        if (!Array.isArray(images) || images.length === 0) {
            toast({
                title: "–ù–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
                description: "–î–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                variant: "destructive",
            });
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            const existingImages = await filterExistingFiles(images);

            if (existingImages.length === 0) {
                toast({
                    title: "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                    description: "–§–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                    variant: "destructive",
                });
                return;
            }

            console.log(`openPhotoCarousel: –û—Ç–∫—Ä—ã–≤–∞–µ–º –≥–∞–ª–µ—Ä–µ—é –¥–ª—è "${title}" —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏:`, existingImages);

            // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è
            setCurrentMedia({ type: 'photo', urls: existingImages, currentIndex: 0, title });

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            setTimeout(() => {
                setIsPhotoCarouselOpen(true);
            }, 100);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≥–∞–ª–µ—Ä–µ–∏:', error);
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≥–∞–ª–µ—Ä–µ—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π",
                variant: "destructive",
            });
        }
    };

    // –û—Ç–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä–∞
    const openVideoPlayer = async (videos: string[], title: string) => {
        console.log(`openVideoPlayer: –ü–æ–ª—É—á–µ–Ω—ã –≤–∏–¥–µ–æ –¥–ª—è "${title}":`, videos);

        if (!Array.isArray(videos) || videos.length === 0) {
            toast({
                title: "–ù–µ—Ç –≤–∏–¥–µ–æ",
                description: "–î–ª—è —ç—Ç–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã",
                variant: "destructive",
            });
            return;
        }

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
            const existingVideos = await filterExistingFiles(videos);

            if (existingVideos.length === 0) {
                toast({
                    title: "–í–∏–¥–µ–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ",
                    description: "–§–∞–π–ª—ã –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã",
                    variant: "destructive",
                });
                return;
            }

            console.log(`openVideoPlayer: –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∏–¥–µ–æ –¥–ª—è "${title}" —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –≤–∏–¥–µ–æ:`, existingVideos);

            // –ü–ª–∞–≤–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è
            setCurrentMedia({ type: 'video', urls: existingVideos, currentIndex: 0, title });

            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø–ª–∞–≤–Ω–æ—Å—Ç–∏
            setTimeout(() => {
                setIsVideoPlayerOpen(true);
            }, 100);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –≤–∏–¥–µ–æ:', error);
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –≤–∏–¥–µ–æ –ø–ª–µ–µ—Ä",
                variant: "destructive",
            });
        }
    };

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∏–ª—è
    const handleStyleToggle = (styleId: string, isChecked: boolean) => {
        const currentChild = getCurrentChild();
        if (!currentChild) return;

        setChildRegistrations(prev => prev.map(reg => {
            if (reg.childId === currentChild.childId) {
                let newStyles = [...reg.selectedStyles];

                if (isChecked) {
                    // –£–¥–∞–ª—è–µ–º –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å—Ç–∏–ª–∏
                    const style = currentService?.styles.find(s => s.id === styleId);
                    if (style) {
                        const group = EXCLUSIVE_STYLE_GROUPS.find(g => g.includes(style.name));
                        if (group) {
                            newStyles = newStyles.filter(s => {
                                const styleObj = currentService?.styles.find(ss => ss.id === s);
                                return !styleObj || !group.includes(styleObj.name);
                            });
                        }
                    }
                    newStyles.push(styleId);
                } else {
                    newStyles = newStyles.filter(id => id !== styleId);
                }

                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                const stylesCost = newStyles.reduce((sum, id) => {
                    const style = currentService?.styles.find(s => s.id === id);
                    return sum + (style?.price || 0);
                }, 0);

                const optionsCost = reg.selectedOptions.reduce((sum, id) => {
                    const option = currentService?.options.find(o => o.id === id);
                    return sum + (option?.price || 0);
                }, 0);

                return {
                    ...reg,
                    selectedStyles: newStyles,
                    totalAmount: stylesCost + optionsCost
                };
            }
            return reg;
        }));
    };

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–ø—Ü–∏–∏
    const handleOptionToggle = (optionId: string, isChecked: boolean) => {
        const currentChild = getCurrentChild();
        if (!currentChild) return;

        const option = currentService?.options.find(o => o.id === optionId);
        if (!option) return;

        setChildRegistrations(prev => prev.map(reg => {
            if (reg.childId === currentChild.childId) {
                let newOptions = [...reg.selectedOptions];

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ –≥—Ä—É–ø–ø—ã –æ–ø—Ü–∏–π
                for (const group of EXCLUSIVE_OPTION_GROUPS) {
                    if (group.includes(option.name)) {
                        // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –æ–ø—Ü–∏–∏ –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                        const groupOptionIds = currentService?.options
                            .filter(o => group.includes(o.name))
                            .map(o => o.id) || [];

                        // –£–±–∏—Ä–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏ –∏–∑ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                        newOptions = newOptions.filter(id => !groupOptionIds.includes(id));

                        // –ï—Å–ª–∏ —Ç–µ–∫—É—â–∞—è –æ–ø—Ü–∏—è –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è, –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                        if (isChecked) {
                            newOptions.push(optionId);
                        }

                        // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                        const stylesCost = reg.selectedStyles.reduce((sum, id) => {
                            const style = currentService?.styles.find(s => s.id === id);
                            return sum + (style?.price || 0);
                        }, 0);

                        const optionsCost = newOptions.reduce((sum, id) => {
                            const opt = currentService?.options.find(o => o.id === id);
                            return sum + (opt?.price || 0);
                        }, 0);

                        return {
                            ...reg,
                            selectedOptions: newOptions,
                            totalAmount: stylesCost + optionsCost
                        };
                    }
                }

                // –î–ª—è –æ–±—ã—á–Ω—ã—Ö –æ–ø—Ü–∏–π (–Ω–µ –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏—Ö)
                if (isChecked) {
                    newOptions.push(optionId);
                } else {
                    newOptions = newOptions.filter(id => id !== optionId);
                }

                // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å
                const stylesCost = reg.selectedStyles.reduce((sum, id) => {
                    const style = currentService?.styles.find(s => s.id === id);
                    return sum + (style?.price || 0);
                }, 0);

                const optionsCost = newOptions.reduce((sum, id) => {
                    const opt = currentService?.options.find(o => o.id === id);
                    return sum + (opt?.price || 0);
                }, 0);

                return {
                    ...reg,
                    selectedOptions: newOptions,
                    totalAmount: stylesCost + optionsCost
                };
            }
            return reg;
        }));
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —à–∞–≥—É
    const handleNextStep = () => {
        const currentChild = getCurrentChild();
        if (!currentChild) return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–∏–ª—å
        if (currentChild.selectedStyles.length === 0) {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: `–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–∏–ª—å –¥–ª—è ${currentChild.childName}`,
                variant: "destructive"
            });
            return;
        }

        // –û—Ç–º–µ—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ
        setChildRegistrations(prev => prev.map(reg => {
            if (reg.childId === currentChild.childId) {
                return { ...reg, isCompleted: true };
            }
            return reg;
        }));

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–±–µ–Ω–∫—É –∏–ª–∏ –∫ –∏—Ç–æ–≥–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
        if (currentStep < children.length - 1) {
            setCurrentStep(currentStep + 1);
        } else {
            // –í—Å–µ –¥–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            setCurrentStep(currentStep + 1);
        }
    };

    // –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É
    const handlePrevStep = () => {
        if (currentStep > 0) {
            setCurrentStep(currentStep - 1);
        }
    };

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const validateRegistrationData = (): { isValid: boolean; errors: string[] } => {
        const errors: string[] = [];

        if (!currentService) {
            errors.push("–°–µ—Ä–≤–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω");
            return { isValid: false, errors };
        }

        for (const reg of childRegistrations) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Å—Ç–∏–ª—å
            if (reg.selectedStyles.length === 0) {
                errors.push(`${reg.childName}: –Ω–µ –≤—ã–±—Ä–∞–Ω –Ω–∏ –æ–¥–∏–Ω —Å—Ç–∏–ª—å`);
                continue;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π
            for (const styleId of reg.selectedStyles) {
                const style = currentService.styles.find(s => s.id === styleId);
                if (!style) {
                    errors.push(`${reg.childName}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∏–ª—å (ID: ${styleId})`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –æ–ø—Ü–∏–π
            for (const optionId of reg.selectedOptions) {
                const option = currentService.options.find(o => o.id === optionId);
                if (!option) {
                    errors.push(`${reg.childName}: –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ–ø—Ü–∏—è (ID: ${optionId})`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å—Ç–∏–ª–µ–π –∏ –æ–ø—Ü–∏–π
            const selectedStyleNames = reg.selectedStyles.map(id => {
                const style = currentService.styles.find(s => s.id === id);
                return style?.name;
            }).filter(Boolean);

            const selectedOptionNames = reg.selectedOptions.map(id => {
                const option = currentService.options.find(o => o.id === id);
                return option?.name;
            }).filter(Boolean);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å—Ç–∏–ª–∏
            for (const group of EXCLUSIVE_STYLE_GROUPS) {
                const selectedFromGroup = selectedStyleNames.filter(name => group.includes(name));
                if (selectedFromGroup.length > 1) {
                    errors.push(`${reg.childName}: –≤—ã–±—Ä–∞–Ω—ã –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ —Å—Ç–∏–ª–∏: ${selectedFromGroup.join(', ')}`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ –æ–ø—Ü–∏–∏
            for (const group of EXCLUSIVE_OPTION_GROUPS) {
                const selectedFromGroup = selectedOptionNames.filter(name => group.includes(name));
                if (selectedFromGroup.length > 1) {
                    errors.push(`${reg.childName}: –≤—ã–±—Ä–∞–Ω—ã –≤–∑–∞–∏–º–æ–∏—Å–∫–ª—é—á–∞—é—â–∏–µ –æ–ø—Ü–∏–∏: ${selectedFromGroup.join(', ')}`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
            for (const styleName of selectedStyleNames) {
                if (styleName && !isStyleAgeRestricted(styleName, reg.childAge)) {
                    errors.push(`${reg.childName}: —Å—Ç–∏–ª—å "${styleName}" –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–∞ ${reg.childAge} –ª–µ—Ç`);
                }
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
            const calculatedStylesCost = reg.selectedStyles.reduce((sum, id) => {
                const style = currentService.styles.find(s => s.id === id);
                return sum + (style?.price || 0);
            }, 0);

            const calculatedOptionsCost = reg.selectedOptions.reduce((sum, id) => {
                const option = currentService.options.find(o => o.id === id);
                return sum + (option?.price || 0);
            }, 0);

            const calculatedTotal = calculatedStylesCost + calculatedOptionsCost;
            if (Math.abs(calculatedTotal - reg.totalAmount) > 0.01) {
                errors.push(`${reg.childName}: –Ω–µ—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ (–æ–∂–∏–¥–∞–µ—Ç—Å—è: ${calculatedTotal}‚ÇΩ, —É–∫–∞–∑–∞–Ω–æ: ${reg.totalAmount}‚ÇΩ)`);
            }
        }

        return { isValid: errors.length === 0, errors };
    };

    // –û—Ç–º–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫
    const handleCancelSubmit = () => {
        console.log('‚èπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–º–µ–Ω–∏–ª –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫');
        cancelRef.current = true;
        setIsSubmitting(false);
        setSubmitProgress(0);
        setCurrentSubmittingChild('');
        toast({
            title: "–û—Ç–º–µ–Ω–µ–Ω–æ",
            description: "–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞",
            variant: "default"
        });
    };

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–æ–∫ —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–æ–Ω–Ω–æ—Å—Ç—å—é –∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    const handleSubmit = async () => {
        console.log('üîÑ MODAL: handleSubmit: –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫');
        if (!workshop || !user) return;

        // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
        console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∑–∞—è–≤–æ–∫ –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞:', {
            workshopId: workshop.id,
            workshopTitle: workshop.title,
            childrenCount: childRegistrations.length,
            userId: user.id,
            timestamp: new Date().toISOString()
        });

        // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        const validation = validateRegistrationData();
        if (!validation.isValid) {
            console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏:', validation.errors);
            toast({
                title: "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                description: validation.errors.join('\n'),
                variant: "destructive",
                duration: 10000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–∫–∞–∑–∞ –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            });
            return;
        }

        console.log('‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...');
        try {
            const existingRegistrations = await api.workshopRegistrations.getRegistrations(workshop.id);
            const existingUserIds = existingRegistrations.map(reg => reg.userId);

            const alreadyRegistered = childRegistrations.filter(reg =>
                existingUserIds.includes(reg.childId)
            );

            if (alreadyRegistered.length > 0) {
                const names = alreadyRegistered.map(reg => reg.childName).join(', ');
                throw new Error(`–°–ª–µ–¥—É—é—â–∏–µ –¥–µ—Ç–∏ —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: ${names}`);
            }

            console.log('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –ø—Ä–æ–π–¥–µ–Ω–∞');
        } catch (checkError) {
            console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', checkError);
            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, backend –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç
        }

        console.log('üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏...');
        setIsSubmitting(true);
        cancelRef.current = false;
        setSubmitProgress(0);
        setCurrentSubmittingChild('');

        console.log('‚úÖ –°–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:', {
            isSubmitting: true,
            isCancelled: false,
            submitProgress: 0,
            currentSubmittingChild: ''
        });

        try {
            // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –≤—Å–µ—Ö –¥–µ—Ç–µ–π
            const totalChildren = childRegistrations.length;
            console.log(`üìù –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è ${totalChildren} –¥–µ—Ç–µ–π...`);

            // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
            const groupRegistrationData = {
                workshopId: workshop.id,
                parentId: user.id,
                children: childRegistrations.map(reg => ({
                    childId: reg.childId,
                    childName: reg.childName,
                    style: reg.selectedStyles.join(', '),
                    options: reg.selectedOptions,
                    totalPrice: reg.totalAmount
                }))
            };

            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø–æ–≤–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', groupRegistrationData);

            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥—Ä—É–ø–ø–æ–≤–æ–π API
            console.log('üîÑ MODAL: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥—Ä—É–ø–ø–æ–≤—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é...');
            const response = await api.workshopRegistrations.createGroupRegistration(groupRegistrationData);
            console.log('‚úÖ MODAL: –ì—Ä—É–ø–ø–æ–≤–æ–π API —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª, –æ—Ç–≤–µ—Ç:', response);

            // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            setSubmitProgress(100);
            setCurrentSubmittingChild('');

            console.log('üéâ MODAL: –ì—Ä—É–ø–ø–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', {
                invoiceId: response.invoice.id,
                totalRegistrations: response.registrations.length,
                participantsCount: response.participants,
                registrations: response.registrations.map((r, index) => ({
                    childName: childRegistrations[index]?.childName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
                    registrationId: r.id,
                    totalPrice: r.totalPrice
                }))
            });

            console.log('üîÑ MODAL: –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º isSuccess = true');
            setIsSuccess(true);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã
            if (response.invoice) {
                setCreatedInvoices([response.invoice]);
                setShowPaymentSection(true);
            }

            // –í—ã–∑—ã–≤–∞–µ–º callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Dashboard
            console.log('üîÑ MODAL: –í—ã–∑—ã–≤–∞–µ–º callback onRegistrationSuccess');
            if (onRegistrationSuccess) {
                console.log('‚úÖ MODAL: Callback –Ω–∞–π–¥–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º...');
                onRegistrationSuccess();
                console.log('‚úÖ MODAL: Callback –≤—ã–∑–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
            } else {
                console.warn('‚ö†Ô∏è MODAL: Callback onRegistrationSuccess –Ω–µ –Ω–∞–π–¥–µ–Ω!');
            }

            toast({
                title: "–£—Å–ø–µ—à–Ω–æ!",
                description: `–í—Å–µ ${childRegistrations.length} –¥–µ—Ç–µ–π –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å. –°–æ–∑–¥–∞–Ω –æ–¥–∏–Ω —Å—á–µ—Ç –∑–∞ ${response.participants} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ.`,
                variant: "default"
            });

        } catch (error) {
            console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å:', {
                error: error.message,
                stack: error.stack,
                workshopId: workshop.id,
                userId: user.id,
                childrenCount: childRegistrations.length,
                timestamp: new Date().toISOString()
            });

            // –î–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            const errorMessage = error.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
            toast({
                title: "–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏",
                description: `–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –¥–µ—Ç–µ–π –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: ${errorMessage}`,
                variant: "destructive",
                duration: 8000,
            });
        } finally {
            console.log('üèÅ MODAL: –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–æ–∫');
            setIsSubmitting(false);
            cancelRef.current = false;
            setSubmitProgress(0);
            setCurrentSubmittingChild('');

            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            console.log('üîç MODAL: –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
                isSubmitting: false,
                canCancel: false,
                submitProgress: 0,
                currentSubmittingChild: ''
            });
        }
    };

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–π —Å—É–º–º—ã
    const getTotalAmount = () => {
        return childRegistrations.reduce((sum, reg) => sum + reg.totalAmount, 0);
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤—Å–µ –¥–µ—Ç–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    const allChildrenCompleted = childRegistrations.every(reg => reg.isCompleted);

    if (!workshop || !currentService) return null;

    const schoolName = workshop.schoolName; // –£–ø—Ä–æ—â–µ–Ω–Ω–æ, –≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã
    const classGroup = workshop.classGroup;

    if (isSuccess) {
        console.log('üéâ MODAL: –†–µ–Ω–¥–µ—Ä–∏–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ');
        return (
            <Dialog open={isOpen} onOpenChange={onOpenChange}>
                <DialogContent className="max-w-2xl p-6">
                    <div className="text-center mb-6">
                        <CheckCircle className="w-16 h-16 text-green-500 mx-auto mb-4" />
                        <DialogTitle className="text-xl font-bold text-green-600 mb-2">
                            –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞!
                        </DialogTitle>
                        <DialogDescription className="text-gray-600">
                            –í—Å–µ –¥–µ—Ç–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å "{workshop.title}"
                        </DialogDescription>
                    </div>

                    {/* –°–µ–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã */}
                    {showPaymentSection && createdInvoices.length > 0 && (
                        <div className="bg-gradient-to-r from-blue-50 to-purple-50 rounded-lg p-6 mb-6 border border-blue-200">
                            <div className="flex items-center space-x-2 mb-4">
                                <CreditCard className="w-6 h-6 text-blue-600" />
                                <h3 className="text-lg font-semibold text-gray-800">
                                    –û–ø–ª–∞—Ç–∞ —É—á–∞—Å—Ç–∏—è
                                </h3>
                            </div>

                            <div className="space-y-4">
                                {createdInvoices.map((invoice) => (
                                    <div key={invoice.id} className="bg-white rounded-lg p-4 border border-gray-200">
                                        <div className="flex justify-between items-center mb-3">
                                            <div>
                                                <p className="font-medium text-gray-900">
                                                    –°—á–µ—Ç ‚Ññ{invoice.id.slice(-8)}
                                                </p>
                                                <p className="text-sm text-gray-600">
                                                    {invoice.participant_name} - {new Date(invoice.workshop_date || '').toLocaleDateString('ru-RU')}
                                                </p>
                                            </div>
                                            <div className="text-right">
                                                <p className="text-lg font-bold text-green-600">
                                                    {invoice.amount} ‚ÇΩ
                                                </p>
                                                <p className="text-xs text-gray-500">
                                                    {invoice.status === 'pending' ? '–û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã' : invoice.status}
                                                </p>
                                            </div>
                                        </div>

                                        {invoice.status === 'pending' && (
                                            <YandexPaymentButton
                                                invoiceId={invoice.id}
                                                amount={invoice.amount}
                                                description={`–£—á–∞—Å—Ç–∏–µ –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ "${workshop.title}" –¥–ª—è ${invoice.participant_name}`}
                                                children={[{
                                                    id: invoice.participant_id || '',
                                                    name: invoice.participant_name || '',
                                                    selectedServices: ['–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å'],
                                                    totalAmount: invoice.amount
                                                }]}
                                                masterClassName={workshop.title}
                                                eventDate={workshop.date}
                                                eventTime={workshop.time}
                                                onPaymentSuccess={() => {
                                                    toast({
                                                        title: "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞! üéâ",
                                                        description: "–°—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!",
                                                    });
                                                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ
                                                    setCreatedInvoices(prev =>
                                                        prev.map(inv =>
                                                            inv.id === invoice.id
                                                                ? { ...inv, status: 'paid' as const }
                                                                : inv
                                                        )
                                                    );
                                                }}
                                                onPaymentError={(error) => {
                                                    console.error('–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã:', error);
                                                }}
                                                className="w-full"
                                                variant="default"
                                                size="lg"
                                            />
                                        )}

                                        {invoice.status === 'paid' && (
                                            <div className="flex items-center justify-center space-x-2 text-green-600 bg-green-50 rounded-lg p-3">
                                                <CheckCircle className="w-5 h-5" />
                                                <span className="font-medium">–û–ø–ª–∞—á–µ–Ω–æ</span>
                                            </div>
                                        )}
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}

                    <div className="flex justify-center space-x-4">
                        <Button
                            onClick={() => onOpenChange(false)}
                            variant="outline"
                            className="px-6"
                        >
                            –ó–∞–∫—Ä—ã—Ç—å
                        </Button>

                        {showPaymentSection && (
                            <Button
                                onClick={() => {
                                    setShowPaymentSection(false);
                                    setCreatedInvoices([]);
                                    setIsSuccess(false);
                                    setCurrentStep(0);
                                    setChildRegistrations([]);
                                }}
                                className="px-6 bg-blue-600 hover:bg-blue-700"
                            >
                                –ó–∞–ø–∏—Å–∞—Ç—å –µ—â–µ –¥–µ—Ç–µ–π
                            </Button>
                        )}
                    </div>
                </DialogContent>
            </Dialog>
        );
    }

    console.log('üîÑ MODAL: –†–µ–Ω–¥–µ—Ä–∏–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ–æ—Ä–º—É');
    return (
        <>
            <Dialog open={isOpen} onOpenChange={onOpenChange}>
                <DialogContent className={`w-[98vw] max-w-[98vw] sm:w-[95vw] sm:max-w-[95vw] md:max-w-4xl max-h-[95vh] sm:max-h-[90vh] overflow-y-auto bg-gradient-to-br from-yellow-50 via-pink-50 to-blue-50 border-0 shadow-2xl ${isSmallScreen ? 'p-1 px-4 scrollbar-hide' : 'p-2 sm:p-4 md:p-6'} animate-in fade-in-0 zoom-in-95 duration-300`}>


                    {/* –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–≤–µ–∑–¥–æ—á–∫–∏ */}
                    <AnimatedStars count={15} className="opacity-40" />

                    {/* –ü–ª–∞–≤–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–±—Ä–∞–Ω—ã */}

                    <div className={`text-center ${isSmallScreen ? 'mt-2 mb-2' : 'mt-8 mb-6 sm:mt-12 sm:mb-8'} animate-in fade-in-0 slide-in-from-top-4 duration-500 delay-100`}>
                        <div className={`flex items-center justify-center space-x-2 sm:space-x-4 ${isSmallScreen ? 'mb-2' : 'mb-4 sm:mb-6'}`}>
                            <div className={`bg-gradient-to-r from-orange-500 to-purple-500 rounded-full ${isSmallScreen ? 'p-1.5' : 'p-3 sm:p-4'} shadow-lg`}>
                                <Sparkles className={`${isSmallScreen ? 'w-5 h-5' : 'w-8 h-8 sm:w-10 sm:h-10'} text-white`} />
                            </div>
                            <DialogTitle className={`${isSmallScreen ? 'text-lg sm:text-xl' : 'text-3xl sm:text-4xl md:text-5xl'} font-bold bg-gradient-to-r from-orange-600 via-purple-600 to-blue-600 bg-clip-text text-transparent leading-tight`}>
                                {isViewMode ?
                                    (isSmallScreen ? '–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞' : '–î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å') :
                                    (isSmallScreen ? '–ó–∞–ø–∏—Å—å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å' : '–ó–∞–ø–∏—Å—å –¥–µ—Ç–µ–π –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å')
                                }
                            </DialogTitle>
                        </div>
                        <DialogDescription className={`${isSmallScreen ? 'text-xs' : 'text-base sm:text-lg'} text-gray-600 max-w-2xl mx-auto`}>
                            {isViewMode ?
                                (isSmallScreen ? '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π –∏ –æ–ø—Ü–∏–π' : '–ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª–µ–π, –æ–ø—Ü–∏–π –∏ –æ–±—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞') :
                                (isSmallScreen ? '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞' : '–ü–æ—à–∞–≥–æ–≤–æ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª–∏ –∏ –æ–ø—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É.')
                            }
                        </DialogDescription>
                    </div>

                    <div className={`space-y-2 sm:space-y-4`}>

                        {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ */}
                        <Card className={`bg-white/90 backdrop-blur-sm border-orange-200 shadow-card ${isSmallScreen ? 'mb-3' : 'mb-4 sm:mb-6'} animate-in fade-in-0 slide-in-from-top-4 duration-500 delay-200`}>
                            <CardHeader className={`${isSmallScreen ? 'pb-2' : 'pb-3 sm:pb-4'}`}>
                                <CardTitle className={`${isSmallScreen ? 'text-base sm:text-lg' : 'text-xl sm:text-2xl'} font-bold text-orange-500 flex items-center space-x-2`}>
                                    <Star className={`${isSmallScreen ? 'w-4 h-4' : 'w-5 h-5 sm:w-6 sm:h-6'} text-yellow-500`} />
                                    <span>{workshop.title}</span>
                                </CardTitle>
                                <CardDescription className={`text-gray-600 ${isSmallScreen ? 'text-sm' : 'text-base sm:text-lg'}`}>
                                    –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
                                </CardDescription>
                            </CardHeader>
                            <CardContent className={`${isSmallScreen ? 'space-y-2' : 'space-y-3 sm:space-y-4'}`}>
                                <div className={`grid ${isSmallScreen ? 'grid-cols-2' : 'grid-cols-1 sm:grid-cols-2'} gap-2 sm:gap-3 sm:gap-4`}>
                                    <div className={`flex items-center space-x-2 sm:space-x-3 ${isSmallScreen ? 'p-2' : 'p-2 sm:p-3'} bg-gradient-to-r from-orange-50 to-yellow-50 rounded-lg border border-orange-200`}>
                                        <MapPin className={`${isSmallScreen ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5'} text-orange-600 flex-shrink-0`} />
                                        <span className={`text-gray-700 font-medium ${isSmallScreen ? 'text-sm' : 'text-sm sm:text-base'} truncate`}>{schoolName}, –∫–ª–∞—Å—Å {classGroup}</span>
                                    </div>
                                    <div className={`flex items-center space-x-2 sm:space-x-3 ${isSmallScreen ? 'p-2' : 'p-2 sm:p-3'} bg-gradient-to-r from-purple-50 to-pink-50 rounded-lg border border-purple-200`}>
                                        <Calendar className={`${isSmallScreen ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5'} text-purple-600 flex-shrink-0`} />
                                        <span className={`text-gray-700 font-medium ${isSmallScreen ? 'text-sm' : 'text-sm sm:text-base'}`}>{new Date(workshop.date).toLocaleDateString('ru-RU')}</span>
                                    </div>
                                    <div className={`flex items-center space-x-2 sm:space-x-3 ${isSmallScreen ? 'p-2' : 'p-2 sm:p-3'} bg-gradient-to-r from-blue-50 to-cyan-50 rounded-lg border border-blue-200`}>
                                        <Clock className={`${isSmallScreen ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5'} text-blue-600 flex-shrink-0`} />
                                        <span className={`text-gray-700 font-medium ${isSmallScreen ? 'text-sm' : 'text-sm sm:text-base'}`}>{workshop.time}</span>
                                    </div>
                                    <div className={`flex items-center space-x-2 sm:space-x-3 ${isSmallScreen ? 'p-2' : 'p-2 sm:p-3'} bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg border border-green-200`}>
                                        <div className={`${isSmallScreen ? 'w-4 h-4' : 'w-4 h-4 sm:w-5 sm:h-5'} text-green-600 flex-shrink-0`}>
                                            <Users className="w-full h-full" />
                                        </div>
                                        <span className={`text-gray-700 font-medium ${isSmallScreen ? 'text-sm' : 'text-sm sm:text-base'}`}>{workshop.eligibleChildren.length} –¥–µ—Ç–µ–π</span>
                                    </div>
                                </div>
                            </CardContent>
                        </Card>

                        {/* –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞ (—Ä–µ–∂–∏–º –ø—Ä–æ—Å–º–æ—Ç—Ä–∞) */}
                        {isViewMode && workshop.childrenWithStatus && (
                            <Card className={`bg-white/90 backdrop-blur-sm border-green-200 shadow-card ${isSmallScreen ? 'mb-3' : 'mb-4 sm:mb-6'} animate-in fade-in-0 slide-in-from-top-4 duration-500 delay-300`}>
                                <CardHeader className={`${isSmallScreen ? 'pb-2' : 'pb-3 sm:pb-4'}`}>
                                    <div className={`flex items-center space-x-2 sm:space-x-3`}>
                                        <div className={`bg-gradient-to-r from-green-500 to-emerald-500 rounded-full ${isSmallScreen ? 'p-1.5' : 'p-1.5 sm:p-2'}`}>
                                            <CheckCircle className={`${isSmallScreen ? 'w-4 h-4' : 'w-5 h-5 sm:w-6 sm:h-6'} text-white`} />
                                        </div>
                                        <div className="flex-1">
                                            <CardTitle className={`${isSmallScreen ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'} font-bold text-green-700`}>
                                                –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
                                            </CardTitle>
                                            <CardDescription className={`text-green-600 ${isSmallScreen ? 'text-sm' : 'text-base sm:text-lg'}`}>
                                                –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏, –æ–ø—Ü–∏–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞
                                            </CardDescription>
                                        </div>
                                    </div>
                                </CardHeader>
                                <CardContent className={`${isSmallScreen ? 'space-y-2' : 'space-y-3 sm:gap-4'}`}>
                                    {workshop.childrenWithStatus.map((childStatus, index) => {
                                        const child = children.find(c => c.id === childStatus.childId);
                                        if (!child) return null;

                                        // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Å—Ç–∏–ª—è—Ö –∏ –æ–ø—Ü–∏—è—Ö –∏–∑ API
                                        // –ò—â–µ–º –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –≤ —Å–ø–∏—Å–∫–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
                                        const masterClass = masterClasses.find(mc => mc.id === workshop.id);
                                        let selectedStyleIds: string[] = [];
                                        let selectedOptionIds: string[] = [];
                                        let totalAmount = 0;

                                        if (masterClass && masterClass.participants) {
                                            const participant = masterClass.participants.find(p => p.childId === child.id);
                                            if (participant) {
                                                selectedStyleIds = participant.selectedStyles || [];
                                                selectedOptionIds = participant.selectedOptions || [];
                                                totalAmount = participant.totalAmount || 0;
                                            }
                                        }

                                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º ID –≤ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∏–ª–µ–π –∏ –æ–ø—Ü–∏–π
                                        const selectedStyles = selectedStyleIds.map(styleId => {
                                            const style = currentService?.styles.find(s => s.id === styleId);
                                            return style?.name || styleId; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                                        });

                                        const selectedOptions = selectedOptionIds.map(optionId => {
                                            const option = currentService?.options.find(o => o.id === optionId);
                                            return option?.name || optionId; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ ID –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
                                        });

                                        // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ workshop.childrenWithStatus
                                        if (selectedStyleIds.length === 0 && selectedOptionIds.length === 0 && totalAmount === 0) {
                                            // TODO: –í –±—É–¥—É—â–µ–º –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∞—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ –∏–∑ workshop.childrenWithStatus
                                            console.log(`üîç –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ ${child.name} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ API, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫–∏`);
                                        } else {
                                            console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞ ${child.name}:`, {
                                                styleIds: selectedStyleIds,
                                                styleNames: selectedStyles,
                                                optionIds: selectedOptionIds,
                                                optionNames: selectedOptions,
                                                amount: totalAmount
                                            });
                                        }

                                        return (
                                            <div key={childStatus.childId} className={`p-3 ${isSmallScreen ? 'p-2' : 'p-4'} bg-gradient-to-br from-green-50 to-emerald-50 rounded-lg border border-green-200 animate-in fade-in-0 slide-in-from-left-4 duration-300 delay-${400 + index * 100}`}>
                                                <div className="flex items-center justify-between mb-3">
                                                    <div className="flex items-center space-x-2">
                                                        <div className="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center text-white font-bold text-sm">
                                                            {index + 1}
                                                        </div>
                                                        <div>
                                                            <div className="font-semibold text-gray-800">{child.name}</div>
                                                            <div className="text-sm text-gray-600">{child.age} –ª–µ—Ç</div>
                                                        </div>
                                                    </div>
                                                    <Badge
                                                        variant={
                                                            childStatus.status === 'paid' ? 'default' :
                                                                childStatus.status === 'pending' ? 'secondary' : 'destructive'
                                                        }
                                                        className="text-xs"
                                                    >
                                                        {childStatus.status === 'paid' ? '‚úÖ –û–ø–ª–∞—á–µ–Ω–æ' :
                                                            childStatus.status === 'pending' ? '‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã' :
                                                                '‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ'}
                                                    </Badge>
                                                </div>

                                                {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ */}
                                                {selectedStyles.length > 0 && (
                                                    <div className="mb-3">
                                                        <div className="text-sm font-medium text-gray-700 mb-2">–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏:</div>
                                                        <div className="flex flex-wrap gap-2">
                                                            {selectedStyles.map((style, styleIndex) => (
                                                                <Badge key={styleIndex} variant="outline" className="bg-purple-50 text-purple-700 border-purple-200">
                                                                    üé® {style}
                                                                </Badge>
                                                            ))}
                                                        </div>
                                                    </div>
                                                )}

                                                {/* –í—ã–±—Ä–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ */}
                                                {selectedOptions.length > 0 && (
                                                    <div className="mb-3">
                                                        <div className="text-sm font-medium text-gray-700 mb-2">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:</div>
                                                        <div className="flex flex-wrap gap-2">
                                                            {selectedOptions.map((option, optionIndex) => (
                                                                <Badge key={optionIndex} variant="outline" className="bg-blue-50 text-blue-700 border-blue-200">
                                                                    üéÅ {option}
                                                                </Badge>
                                                            ))}
                                                        </div>
                                                    </div>
                                                )}

                                                {/* –°—Ç–æ–∏–º–æ—Å—Ç—å */}
                                                <div className="flex items-center justify-between pt-2 border-t border-green-200">
                                                    <span className="text-sm font-medium text-gray-700">–°—Ç–æ–∏–º–æ—Å—Ç—å:</span>
                                                    <span className="text-lg font-bold text-green-600">{totalAmount} ‚ÇΩ</span>
                                                </div>
                                            </div>
                                        );
                                    })}

                                    {/* –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ */}
                                    <div className="mt-4 p-3 bg-gradient-to-br from-blue-50 to-indigo-50 rounded-lg border border-blue-200 animate-in fade-in-0 slide-in-from-bottom-4 duration-300 delay-500">
                                        <div className="flex items-center justify-between mb-2">
                                            <span className="font-semibold text-gray-800">–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</span>
                                            <Badge
                                                variant={
                                                    workshop.invoiceStatus === 'paid' ? 'default' :
                                                        workshop.invoiceStatus === 'pending' ? 'secondary' : 'destructive'
                                                }
                                                className="text-xs"
                                            >
                                                {workshop.invoiceStatus === 'paid' ? 'üí∞ –°—á–µ—Ç –æ–ø–ª–∞—á–µ–Ω' :
                                                    workshop.invoiceStatus === 'pending' ? 'üìã –°—á–µ—Ç –æ–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã' :
                                                        '‚ùå –°—á–µ—Ç –æ—Ç–º–µ–Ω–µ–Ω'}
                                            </Badge>
                                        </div>
                                        <div className="text-sm text-gray-600">
                                            <div>–î–∞—Ç–∞: {new Date(workshop.date).toLocaleDateString('ru-RU')}</div>
                                            <div>–í—Ä–µ–º—è: {workshop.time}</div>
                                            <div>–ú–µ—Å—Ç–æ: {workshop.schoolName}, –∫–ª–∞—Å—Å {workshop.classGroup}</div>
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>
                        )}

                        {/* –¢–µ–∫—É—â–∏–π —Ä–µ–±–µ–Ω–æ–∫ */}
                        {!isViewMode && currentStep < children.length && (
                            <Card className={`bg-white/90 backdrop-blur-sm border-orange-300 border-2 shadow-card ${isSmallScreen ? 'mb-3' : 'mb-4 sm:mb-6'}`}>
                                <CardHeader className={`${isSmallScreen ? 'pb-2' : 'pb-3 sm:pb-4'}`}>
                                    <div className={`flex items-center space-x-2 sm:space-x-3`}>
                                        <div className={`bg-gradient-to-r from-orange-500 to-yellow-500 rounded-full ${isSmallScreen ? 'p-1.5' : 'p-1.5 sm:p-2'}`}>
                                            <Palette className={`${isSmallScreen ? 'w-4 h-4' : 'w-5 h-5 sm:w-6 sm:h-6'} text-white`} />
                                        </div>
                                        <div>
                                            <CardTitle className={`${isSmallScreen ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'} font-bold text-orange-700`}>
                                                –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –¥–ª—è: {getCurrentChild()?.childName}
                                            </CardTitle>
                                            <CardDescription className={`text-orange-600 ${isSmallScreen ? 'text-sm' : 'text-base sm:text-lg'}`}>
                                                –í–æ–∑—Ä–∞—Å—Ç: {getCurrentChild()?.childAge} –ª–µ—Ç
                                            </CardDescription>
                                        </div>
                                    </div>
                                </CardHeader>
                            </Card>
                        )}

                        {/* –í—ã–±–æ—Ä —Å—Ç–∏–ª–µ–π */}
                        {!isViewMode && currentStep < children.length && (
                            <Card className={`bg-white/90 backdrop-blur-sm border-purple-200 shadow-card ${isSmallScreen ? 'mb-3' : 'mb-4 sm:mb-6'}`}>
                                <CardHeader className={`${isSmallScreen ? 'pb-2' : 'pb-3 sm:pb-4'}`}>
                                    <div className={`flex items-center space-x-2 sm:space-x-3`}>
                                        <div className={`bg-gradient-to-r from-purple-500 to-pink-500 rounded-full ${isSmallScreen ? 'p-1.5' : 'p-1.5 sm:p-2'}`}>
                                            <Brain className={`${isSmallScreen ? 'w-4 h-4' : 'w-5 h-5 sm:w-6 sm:h-6'} text-white`} />
                                        </div>
                                        <div className="flex-1">
                                            <CardTitle className={`${isSmallScreen ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'} font-bold text-gray-800`}>
                                                –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä—É–∫–∏
                                            </CardTitle>
                                            <CardDescription className={`text-gray-600 ${isSmallScreen ? 'text-sm' : 'text-base sm:text-lg'}`}>
                                                –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç —Ä—É–∫–∏ –¥–ª—è {getCurrentChild()?.childName}
                                            </CardDescription>
                                        </div>
                                    </div>
                                </CardHeader>
                                <CardContent className={`${isSmallScreen ? 'space-y-2' : 'space-y-3 sm:space-y-4'}`}>
                                    {/* –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è—Ö - –≤—ã–Ω–µ—Å–µ–Ω–æ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ */}
                                    {getCurrentChild()?.childAge && getCurrentChild()?.childAge < 5 && (
                                        <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-2 sm:p-3 mb-3 sm:mb-4">
                                            <div className="flex items-start space-x-2 sm:space-x-3">
                                                <AlertCircle className={`${isSmallScreen ? 'w-4 h-4' : 'w-5 h-5'} text-yellow-600 flex-shrink-0 mt-0.5`} />
                                                <div className="flex-1">
                                                    <div className={`font-medium text-yellow-800 ${isSmallScreen ? 'text-sm' : 'text-base'}`}>
                                                        –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
                                                    </div>
                                                    <div className={`text-yellow-700 ${isSmallScreen ? 'text-xs' : 'text-sm'} mt-1`}>
                                                        <span>"–î–≤–æ–π–Ω—ã–µ —Ä—É—á–∫–∏" –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ —Å 5 –ª–µ—Ç</span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                    )}

                                    {/* –°—Ç–∏–ª–∏ */}
                                    <div className={`grid ${isSmallScreen ? 'grid-cols-1' : 'grid-cols-1 sm:grid-cols-2'} gap-2 sm:gap-4`}>
                                        {currentService?.styles.map((style) => {
                                            const isSelected = getCurrentChild()?.selectedStyles.includes(style.id);
                                            const isBlocked = isStyleBlocked(style.name, getCurrentChild()?.childAge || 0, getCurrentChild()?.selectedStyles || []);
                                            const isAgeRestricted = !isStyleAgeRestricted(style.name, getCurrentChild()?.childAge || 0);

                                            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
                                            const avatarUrl = style.avatar?.startsWith('/') ? `http://localhost:3001${style.avatar}` : style.avatar;
                                            console.log(`–°—Ç–∏–ª—å "${style.name}":`, {
                                                id: style.id,
                                                avatar: style.avatar,
                                                avatarUrl: avatarUrl,
                                                hasAvatar: !!style.avatar
                                            });

                                            return (
                                                <div
                                                    key={style.id}
                                                    className={`relative border-2 rounded-xl ${isSmallScreen ? 'p-2' : 'p-4 sm:p-5'} transition-all duration-300 cursor-pointer transform hover:scale-[1.02] ${isSelected
                                                        ? 'border-purple-500 bg-gradient-to-br from-purple-50 to-purple-100 shadow-lg shadow-purple-200'
                                                        : isBlocked
                                                            ? 'border-gray-300 bg-gradient-to-br from-gray-50 to-gray-100 cursor-not-allowed opacity-60'
                                                            : 'border-gray-200 bg-gradient-to-br from-white to-gray-50 hover:border-purple-300 hover:shadow-md hover:shadow-purple-100'
                                                        }`}
                                                    onClick={() => !isBlocked && handleStyleToggle(style.id, !isSelected)}
                                                >
                                                    {/* –ë–µ–π–¥–∂ –¥–ª—è –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π */}
                                                    {isAgeRestricted && (
                                                        <div className="absolute top-3 right-3">
                                                            <Badge variant="secondary" className={`${isSmallScreen ? 'text-xs px-2 py-1' : 'text-sm px-3 py-1.5'} bg-red-100 text-red-700 border-red-200 shadow-sm`}>
                                                                <Lock className={`${isSmallScreen ? 'w-3 h-3' : 'w-4 h-4'} mr-1.5`} />
                                                                {isSmallScreen ? '5+' : '5+ –ª–µ—Ç'}
                                                            </Badge>
                                                        </div>
                                                    )}

                                                    <div className={`${isSmallScreen ? 'space-y-2' : 'space-y-3'}`}>
                                                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —á–µ–∫–±–æ–∫—Å */}
                                                        <div className="flex items-start justify-between">
                                                            <div className="flex items-start space-x-2 sm:space-x-3 flex-1 min-w-0">
                                                                {/* –ê–≤–∞—Ç–∞—Ä —Å—Ç–∏–ª—è */}
                                                                <div className={`flex-shrink-0 ${isSmallScreen ? 'w-10 h-12' : 'w-14 h-18'} rounded-xl overflow-hidden shadow-md`}>
                                                                    {style.avatar ? (
                                                                        <img
                                                                            src={style.avatar.startsWith('/') ? `http://localhost:3001${style.avatar}` : style.avatar}
                                                                            alt={style.name}
                                                                            className="w-full h-full object-cover"
                                                                            onError={(e) => {
                                                                                // Fallback –∫ –∏–∫–æ–Ω–∫–µ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                                                                                const target = e.target as HTMLImageElement;
                                                                                target.style.display = 'none';
                                                                                target.nextElementSibling?.classList.remove('hidden');
                                                                            }}
                                                                        />
                                                                    ) : null}
                                                                    <div className={`${isSmallScreen ? 'w-10 h-12' : 'w-14 h-18'} bg-gradient-to-br from-purple-400 to-pink-400 rounded-xl flex items-center justify-center ${style.avatar ? 'hidden' : ''}`}>
                                                                        <Palette className={`${isSmallScreen ? 'w-5 h-5' : 'w-7 h-7'} text-white`} />
                                                                    </div>
                                                                </div>
                                                                <div className="flex-1 min-w-0">
                                                                    <div className={`font-bold text-gray-900 ${isSmallScreen ? 'text-base' : 'text-lg'} mb-2`}>
                                                                        {style.name}
                                                                    </div>
                                                                    <div className={`text-gray-600 ${isSmallScreen ? 'text-sm' : 'text-base'} leading-relaxed`}>
                                                                        {getStyleDescription(style.name)}
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <Checkbox
                                                                checked={isSelected}
                                                                disabled={isBlocked}
                                                                className={`mt-1 ${isSmallScreen ? 'scale-110' : 'scale-125'}`}
                                                            />
                                                        </div>

                                                        {/* –¶–µ–Ω–∞ */}
                                                        <div className={`font-bold text-purple-600 ${isSmallScreen ? 'text-lg' : 'text-xl'} bg-purple-50 px-3 py-2 rounded-lg inline-block`}>
                                                            {style.price} ‚ÇΩ
                                                        </div>

                                                        {/* –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç */}
                                                        <div className={`flex items-center ${isSmallScreen ? 'space-x-2' : 'space-x-3'} pt-2`}>
                                                            {style.images && style.images.length > 0 && (
                                                                <Button
                                                                    type="button"
                                                                    variant="outline"
                                                                    size="sm"
                                                                    onClick={(e) => {
                                                                        e.stopPropagation();
                                                                        openPhotoCarousel(style.images || [], style.name);
                                                                    }}
                                                                    className={`${isSmallScreen ? 'h-8 px-2 text-xs' : 'h-10 px-4 text-base'} bg-white hover:bg-purple-50 border-purple-200 hover:border-purple-300 transition-all duration-200 hover:shadow-md`}
                                                                >
                                                                    <Image className={`${isSmallScreen ? 'w-3 h-3' : 'w-5 h-5'} mr-1 sm:mr-2 text-purple-600`} />
                                                                    {isSmallScreen ? '–§–æ—Ç–æ' : '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'}
                                                                </Button>
                                                            )}

                                                            {style.videos && style.videos.length > 0 && (
                                                                <Button
                                                                    type="button"
                                                                    variant="outline"
                                                                    size="sm"
                                                                    onClick={(e) => {
                                                                        e.stopPropagation();
                                                                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è –≤–∏–¥–µ–æ
                                                                        const videoUrls = style.videos?.map(url =>
                                                                            url.startsWith('/') ? `http://localhost:3001${url}` : url
                                                                        ) || [];
                                                                        setCurrentMedia({ type: 'video', urls: videoUrls, currentIndex: 0, title: style.name });
                                                                        setIsVideoPlayerOpen(true);
                                                                    }}
                                                                    className={`${isSmallScreen ? 'h-8 px-2 text-xs' : 'h-10 px-4 text-base'} bg-white hover:bg-purple-50 border-purple-200 hover:border-purple-300 transition-all duration-200 hover:shadow-md`}
                                                                >
                                                                    <Video className={`${isSmallScreen ? 'w-3 h-3' : 'w-5 h-5'} mr-1 sm:mr-2 text-purple-600`} />
                                                                    {isSmallScreen ? '–í–∏–¥–µ–æ' : '–í–∏–¥–µ–æ'}
                                                                </Button>
                                                            )}
                                                        </div>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    </div>
                                </CardContent>
                            </Card>
                        )}

                        {/* –í—ã–±–æ—Ä –æ–ø—Ü–∏–π */}
                        {!isViewMode && currentStep < children.length && (
                            <Card className={`bg-white/90 backdrop-blur-sm border-blue-200 shadow-card ${isSmallScreen ? 'mb-3' : 'mb-4 sm:mb-6'}`}>
                                <CardHeader className={`${isSmallScreen ? 'pb-2' : 'pb-3 sm:pb-4'}`}>
                                    <div className={`flex items-center space-x-2 sm:space-x-3`}>
                                        <div className={`bg-gradient-to-r from-blue-500 to-cyan-500 rounded-full ${isSmallScreen ? 'p-1.5' : 'p-1.5 sm:p-2'}`}>
                                            <Gift className={`${isSmallScreen ? 'w-4 h-4' : 'w-5 h-5 sm:w-6 sm:h-6'} text-white`} />
                                        </div>
                                        <div className="flex-1">
                                            <CardTitle className={`${isSmallScreen ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'} font-bold text-gray-800`}>
                                                –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏
                                            </CardTitle>
                                            <CardDescription className={`text-gray-600 ${isSmallScreen ? 'text-sm' : 'text-base sm:text-lg'}`}>
                                                –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –¥–ª—è {getCurrentChild()?.childName}
                                            </CardDescription>
                                        </div>
                                    </div>
                                </CardHeader>
                                <CardContent className={`${isSmallScreen ? 'space-y-2' : 'space-y-3 sm:space-y-4'}`}>
                                    {/* –û–ø—Ü–∏–∏ */}
                                    <div className={`grid ${isSmallScreen ? 'grid-cols-1' : 'grid-cols-1 sm:grid-cols-2'} gap-2 sm:gap-4`}>
                                        {currentService?.options.map((option) => {
                                            const isSelected = getCurrentChild()?.selectedOptions.includes(option.id);
                                            const isExclusive = EXCLUSIVE_OPTION_GROUPS.some(group => group.includes(option.name));

                                            // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∞–≤–∞—Ç–∞—Ä–æ–≤
                                            const avatarUrl = option.avatar?.startsWith('/') ? `http://localhost:3001${option.avatar}` : option.avatar;
                                            console.log(`–û–ø—Ü–∏—è "${option.name}":`, {
                                                id: option.id,
                                                avatar: option.avatar,
                                                avatarUrl: avatarUrl,
                                                hasAvatar: !!option.avatar
                                            });

                                            return (
                                                <div
                                                    key={option.id}
                                                    className={`relative border-2 rounded-xl ${isSmallScreen ? 'p-2' : 'p-4 sm:p-5'} transition-all duration-300 cursor-pointer transform hover:scale-[1.02] ${isSelected
                                                        ? 'border-blue-500 bg-gradient-to-br from-blue-50 to-blue-100 shadow-lg shadow-blue-200'
                                                        : 'border-gray-200 bg-gradient-to-br from-white to-gray-50 hover:border-blue-300 hover:shadow-md hover:shadow-blue-100'
                                                        }`}
                                                    onClick={() => handleOptionToggle(option.id, !isSelected)}
                                                >


                                                    <div className={`${isSmallScreen ? 'space-y-2' : 'space-y-3'}`}>
                                                        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —á–µ–∫–±–æ–∫—Å */}
                                                        <div className="flex items-start justify-between">
                                                            <div className="flex items-start space-x-2 sm:space-x-3 flex-1 min-w-0">
                                                                {/* –ê–≤–∞—Ç–∞—Ä –æ–ø—Ü–∏–∏ */}
                                                                <div className={`flex-shrink-0 ${isSmallScreen ? 'w-10 h-12' : 'w-14 h-18'} rounded-xl overflow-hidden shadow-md`}>
                                                                    {option.avatar ? (
                                                                        <img
                                                                            src={option.avatar.startsWith('/') ? `http://localhost:3001${option.avatar}` : option.avatar}
                                                                            alt={option.name}
                                                                            className="w-full h-full object-cover"
                                                                            onError={(e) => {
                                                                                // Fallback –∫ –∏–∫–æ–Ω–∫–µ –µ—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å
                                                                                const target = e.target as HTMLImageElement;
                                                                                target.style.display = 'none';
                                                                                target.nextElementSibling?.classList.remove('hidden');
                                                                            }}
                                                                        />
                                                                    ) : null}
                                                                    <div className={`${isSmallScreen ? 'w-10 h-12' : 'w-14 h-18'} bg-gradient-to-br from-blue-400 to-cyan-400 rounded-xl flex items-center justify-center ${option.avatar ? 'hidden' : ''}`}>
                                                                        <Gift className={`${isSmallScreen ? 'w-5 h-5' : 'w-7 h-7'} text-white`} />
                                                                    </div>
                                                                </div>
                                                                <div className="flex-1 min-w-0">
                                                                    <div className={`font-bold text-gray-900 ${isSmallScreen ? 'text-base' : 'text-lg'} mb-2`}>
                                                                        {option.name}
                                                                    </div>
                                                                    <div className={`text-gray-600 ${isSmallScreen ? 'text-sm' : 'text-base'} leading-relaxed`}>
                                                                        {getOptionDescription(option.name)}
                                                                    </div>
                                                                </div>
                                                            </div>
                                                            <Checkbox
                                                                checked={isSelected}
                                                                className={`mt-1 ${isSmallScreen ? 'scale-110' : 'scale-125'}`}
                                                            />
                                                        </div>

                                                        {/* –¶–µ–Ω–∞ */}
                                                        <div className={`font-bold text-blue-600 ${isSmallScreen ? 'text-lg' : 'text-xl'} bg-blue-50 px-3 py-2 rounded-lg inline-block`}>
                                                            {option.price} ‚ÇΩ
                                                        </div>

                                                        {/* –ú–µ–¥–∏–∞ –∫–æ–Ω—Ç–µ–Ω—Ç */}
                                                        <div className={`flex items-center ${isSmallScreen ? 'space-x-2' : 'space-x-3'} pt-2`}>
                                                            {option.images && option.images.length > 0 && (
                                                                <Button
                                                                    type="button"
                                                                    variant="outline"
                                                                    size="sm"
                                                                    onClick={(e) => {
                                                                        e.stopPropagation();
                                                                        openPhotoCarousel(option.images || [], option.name);
                                                                    }}
                                                                    className={`${isSmallScreen ? 'h-8 px-2 text-xs' : 'h-10 px-4 text-base'} bg-white hover:bg-blue-50 border-blue-200 hover:border-blue-300 transition-all duration-200 hover:shadow-md`}
                                                                >
                                                                    <Image className={`${isSmallScreen ? 'w-3 h-3' : 'w-5 h-5'} mr-1 sm:mr-2 text-blue-600`} />
                                                                    {isSmallScreen ? '–§–æ—Ç–æ' : '–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏'}
                                                                </Button>
                                                            )}

                                                            {option.videos && option.videos.length > 0 && (
                                                                <Button
                                                                    type="button"
                                                                    variant="outline"
                                                                    size="sm"
                                                                    onClick={(e) => {
                                                                        e.stopPropagation();
                                                                        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ URL –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –¥–ª—è –≤–∏–¥–µ–æ
                                                                        const videoUrls = option.videos?.map(url =>
                                                                            url.startsWith('/') ? `http://localhost:3001${url}` : url
                                                                        ) || [];
                                                                        setCurrentMedia({ type: 'video', urls: videoUrls, currentIndex: 0, title: option.name });
                                                                        setIsVideoPlayerOpen(true);
                                                                    }}
                                                                    className={`${isSmallScreen ? 'h-8 px-2 text-xs' : 'h-10 px-4 text-base'} bg-white hover:bg-blue-50 border-blue-200 hover:border-blue-300 transition-all duration-200 hover:shadow-md`}
                                                                >
                                                                    <Video className={`${isSmallScreen ? 'w-3 h-3' : 'w-5 h-5'} mr-1 sm:mr-2 text-blue-600`} />
                                                                    {isSmallScreen ? '–í–∏–¥–µ–æ' : '–í–∏–¥–µ–æ'}
                                                                </Button>
                                                            )}
                                                        </div>
                                                    </div>
                                                </div>
                                            );
                                        })}
                                    </div>

                                    {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞ */}
                                    <div className="border-t pt-2 sm:pt-4">
                                        <div className={`${isSmallScreen ? 'text-sm sm:text-base' : 'text-base sm:text-lg'} font-bold text-green-700`}>
                                            –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–ª—è {getCurrentChild()?.childName}: {getCurrentChildTotal()} ‚ÇΩ
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>
                        )}

                        {/* –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
                        {!isViewMode && currentStep === children.length && (
                            <Card className={`bg-white/90 backdrop-blur-sm border-green-200 shadow-card ${isSmallScreen ? 'mb-3' : 'mb-4 sm:mb-6'}`}>
                                <CardHeader className={`${isSmallScreen ? 'pb-2' : 'pb-3 sm:pb-4'}`}>
                                    <div className={`flex items-center space-x-2 sm:space-x-3`}>
                                        <div className={`bg-gradient-to-r from-green-500 to-emerald-500 rounded-full ${isSmallScreen ? 'p-1' : 'p-1.5 sm:p-2'}`}>
                                            <CheckCircle className={`${isSmallScreen ? 'w-4 h-4' : 'w-5 h-5 sm:w-6 sm:h-6'} text-white`} />
                                        </div>
                                        <div className="flex-1">
                                            <CardTitle className={`${isSmallScreen ? 'text-base sm:text-lg' : 'text-lg sm:text-xl'} font-bold text-gray-800`}>
                                                –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                                            </CardTitle>
                                            <CardDescription className={`text-gray-600 ${isSmallScreen ? 'text-sm sm:text-base' : 'text-base sm:text-lg'}`}>
                                                –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
                                            </CardDescription>
                                        </div>
                                    </div>
                                </CardHeader>
                                <CardContent className={`${isSmallScreen ? 'space-y-2' : 'space-y-3 sm:space-y-4'}`}>
                                    {/* –î–µ—Ç–∞–ª–∏ –ø–æ –∫–∞–∂–¥–æ–º—É —Ä–µ–±–µ–Ω–∫—É */}
                                    {childRegistrations.map((reg) => (
                                        <div key={reg.childId} className="border border-gray-200 rounded-lg p-2 sm:p-3">
                                            <div className={`font-medium text-gray-900 ${isSmallScreen ? 'text-sm' : 'text-base'} mb-2`}>
                                                {reg.childName} ({reg.childAge} –ª–µ—Ç)
                                            </div>
                                            <div className={`space-y-1 ${isSmallScreen ? 'text-xs' : 'text-sm'} text-gray-600`}>
                                                <div>
                                                    <span className="font-medium">–°—Ç–∏–ª–∏:</span> {reg.selectedStyles.length > 0 ? reg.selectedStyles.map(styleId => {
                                                        const style = currentService?.styles.find(s => s.id === styleId);
                                                        return style?.name;
                                                    }).join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}
                                                </div>
                                                <div>
                                                    <span className="font-medium">–û–ø—Ü–∏–∏:</span> {reg.selectedOptions.length > 0 ? reg.selectedOptions.map(optionId => {
                                                        const option = currentService?.options.find(o => o.id === optionId);
                                                        return option?.name;
                                                    }).join(', ') : '–ù–µ –≤—ã–±—Ä–∞–Ω–æ'}
                                                </div>
                                                <div className="font-medium text-green-600">
                                                    –°—Ç–æ–∏–º–æ—Å—Ç—å: {reg.totalAmount} ‚ÇΩ
                                                </div>
                                            </div>
                                        </div>
                                    ))}

                                    <div className="border-t pt-2 sm:pt-4">
                                        <div className={`${isSmallScreen ? 'text-base sm:text-lg' : 'text-base sm:text-lg'} font-bold text-green-700`}>
                                            –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {getTotalAmount()} ‚ÇΩ
                                        </div>
                                    </div>
                                </CardContent>
                            </Card>
                        )}

                        {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
                        {!isViewMode && (
                            <div className={`flex flex-col sm:flex-row gap-2 sm:gap-3 pt-2 sm:pt-4`}>
                                <Button
                                    variant="outline"
                                    onClick={() => onOpenChange(false)}
                                    className={`${isSmallScreen ? 'flex-1 text-sm h-10' : 'flex-1 sm:flex-none'}`}
                                >
                                    –û—Ç–º–µ–Ω–∞
                                </Button>

                                {currentStep > 0 && (
                                    <Button
                                        variant="outline"
                                        onClick={handlePrevStep}
                                        className={`${isSmallScreen ? 'flex-1 text-sm h-10' : 'flex-1 sm:flex-none'}`}
                                    >
                                        {isSmallScreen ? '–ù–∞–∑–∞–¥' : '–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–µ–±–µ–Ω–æ–∫'}
                                    </Button>
                                )}

                                {currentStep < children.length && (
                                    <Button
                                        onClick={handleNextStep}
                                        disabled={!getCurrentChild()?.selectedStyles.length}
                                        className={`${isSmallScreen ? 'flex-1 text-sm h-10' : 'flex-1 sm:flex-none'} bg-orange-600 hover:bg-orange-700`}
                                    >
                                        {currentStep === children.length - 1 ? (isSmallScreen ? '–ó–∞–≤–µ—Ä—à–∏—Ç—å' : '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–ø–∏—Å—å') : (isSmallScreen ? '–î–∞–ª–µ–µ' : '–°–ª–µ–¥—É—é—â–∏–π —Ä–µ–±–µ–Ω–æ–∫')}
                                    </Button>
                                )}

                                {currentStep === children.length && (
                                    <div className={`${isSmallScreen ? 'flex-1' : 'flex-1 sm:flex-none'} space-y-2`}>
                                        {isSubmitting && (
                                            <div className="space-y-2">
                                                <div className={`flex items-center justify-between ${isSmallScreen ? 'text-xs' : 'text-sm'} text-gray-600`}>
                                                    <span>–ü—Ä–æ–≥—Ä–µ—Å—Å –æ—Ç–ø—Ä–∞–≤–∫–∏</span>
                                                    <span>{Math.round(submitProgress)}%</span>
                                                </div>
                                                {currentSubmittingChild && (
                                                    <div className={`${isSmallScreen ? 'text-xs' : 'text-xs'} text-gray-500 text-center`}>
                                                        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {currentSubmittingChild}
                                                    </div>
                                                )}
                                            </div>
                                        )}

                                        <div className="flex gap-2">
                                            <Button
                                                onClick={handleSubmit}
                                                disabled={isSubmitting || !allChildrenCompleted}
                                                className="flex-1 bg-green-600 hover:bg-green-700"
                                            >
                                                {isSubmitting ? (
                                                    <>
                                                        <span className="hidden sm:inline">–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫–∏...</span>
                                                        <span className="sm:hidden">–û—Ç–ø—Ä–∞–≤–∫–∞...</span>
                                                    </>
                                                ) : (
                                                    <>
                                                        <Sparkles className="w-4 h-4 mr-2" />
                                                        <span className="hidden sm:inline">–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫–∏</span>
                                                        <span className="sm:hidden">–û—Ç–ø—Ä–∞–≤–∏—Ç—å</span>
                                                    </>
                                                )}
                                            </Button>

                                            {isSubmitting && (
                                                <Button
                                                    variant="outline"
                                                    onClick={handleCancelSubmit}
                                                    className={`${isSmallScreen ? 'px-2' : 'px-4'}`}
                                                >
                                                    –û—Ç–º–µ–Ω–∞
                                                </Button>
                                            )}
                                        </div>
                                    </div>
                                )}
                            </div>
                        )}

                        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –¥–ª—è —Ä–µ–∂–∏–º–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ */}
                        {isViewMode && (
                            <div className="flex justify-center pt-8 pb-4 animate-in fade-in-0 slide-in-from-bottom-4 duration-500 delay-600">
                                <Button
                                    onClick={() => onOpenChange(false)}
                                    className="bg-blue-600 hover:bg-blue-700 text-white px-8 py-3 text-lg font-semibold shadow-lg hover:shadow-xl transition-all duration-300 transform hover:scale-105"
                                >
                                    –ó–∞–∫—Ä—ã—Ç—å
                                </Button>
                            </div>
                        )}
                    </div>
                </DialogContent>
            </Dialog>

            {/* –ú–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –¥–ª—è –º–µ–¥–∏–∞ */}
            {currentMedia && (
                <>
                    <PhotoGalleryModal
                        isOpen={isPhotoCarouselOpen && currentMedia.type === 'photo'}
                        onOpenChange={setIsPhotoCarouselOpen}
                        images={currentMedia.urls}
                        title={currentMedia.title}
                    />
                    <VideoPlayerModal
                        isOpen={isVideoPlayerOpen && currentMedia.type === 'video'}
                        onOpenChange={setIsVideoPlayerOpen}
                        videoUrl={currentMedia.urls[0]} // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –≤–∏–¥–µ–æ
                        title={currentMedia.title}
                    />
                </>
            )}
        </>
    );

    console.log('üîÑ MODAL: MultiChildWorkshopModal —Ä–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω');
}

