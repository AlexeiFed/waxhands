/**
 * @file: workshop-registration-modal.tsx
 * @description: –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ä–µ–±–µ–Ω–∫–∞ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
 * @dependencies: workshop-application-modal.tsx, ui components
 * @created: 2024-12-19
 */

import React, { useState } from 'react';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from './dialog';
import { Button } from './button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './card';
import { Badge } from './badge';
import { Separator } from './separator';
import { useWorkshopRegistrations, CreateRegistrationData } from '../../hooks/use-workshop-registrations';
import { useAuth } from '../../contexts/AuthContext';
import { toast } from './use-toast';

interface WorkshopRegistrationModalProps {
    isOpen: boolean;
    onClose: () => void;
    workshop: {
        id: string;
        title: string;
        description: string;
        price: number;
        duration: string;
        maxParticipants: number;
        currentParticipants: number;
        date: string;
        time: string;
        location: string;
        image?: string;
        styles?: string[];
        options?: string[];
        serviceId?: string;
    };
}

export const WorkshopRegistrationModal: React.FC<WorkshopRegistrationModalProps> = ({
    isOpen,
    onClose,
    workshop,
}) => {
    const { user } = useAuth();
    const { createRegistration, loading } = useWorkshopRegistrations();

    const [selectedStyle, setSelectedStyle] = useState<string>('');
    const [selectedOptions, setSelectedOptions] = useState<string[]>([]);
    const [step, setStep] = useState<'registration' | 'success'>('registration');
    const [registrationData, setRegistrationData] = useState<any>(null);

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∏–ª–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
    const availableStyles = workshop.styles || ['–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π', '–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π', '–ê–≤–∞–Ω–≥–∞—Ä–¥–Ω—ã–π', '–ú–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π'];

    // –î–æ—Å—Ç—É–ø–Ω—ã–µ –æ–ø—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ)
    const availableOptions = workshop.options || ['–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã', '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç', '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è', '–í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å'];

    const handleStyleSelect = (style: string) => {
        setSelectedStyle(style);
    };

    const handleOptionToggle = (option: string) => {
        setSelectedOptions(prev =>
            prev.includes(option)
                ? prev.filter(o => o !== option)
                : [...prev, option]
        );
    };

    const calculateTotalPrice = () => {
        let total = workshop.price;

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –æ–ø—Ü–∏–π (–ø—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å)
        const optionPrices: { [key: string]: number } = {
            '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã': 500,
            '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç': 300,
            '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è': 800,
            '–í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å': 1200,
        };

        selectedOptions.forEach(option => {
            total += optionPrices[option] || 0;
        });

        return total;
    };

    const handleSubmit = async () => {
        if (!selectedStyle) {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å",
                variant: "destructive",
            });
            return;
        }

        if (!user) {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É",
                variant: "destructive",
            });
            return;
        }

        const registrationData: CreateRegistrationData = {
            workshopId: workshop.id,
            userId: user.id,
            style: selectedStyle,
            options: selectedOptions,
            totalPrice: calculateTotalPrice(),
        };

        try {
            const result = await createRegistration(registrationData);
            if (result) {
                setRegistrationData(result);
                setStep('success');
            }
        } catch (error) {
            console.error('Registration error:', error);
        }
    };

    const handleClose = () => {
        setStep('registration');
        setSelectedStyle('');
        setSelectedOptions([]);
        setRegistrationData(null);
        onClose();
    };

    const formatDate = (dateString: string) => {
        const date = new Date(dateString);
        return date.toLocaleDateString('ru-RU', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
        });
    };

    if (step === 'success') {
        return (
            <Dialog open={isOpen} onOpenChange={handleClose}>
                <DialogContent className="max-w-md">
                    <DialogHeader>
                        <DialogTitle className="text-center text-green-600">
                            üéâ –£—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å!
                        </DialogTitle>
                    </DialogHeader>

                    <div className="text-center space-y-4">
                        <div className="text-2xl font-bold text-primary">
                            {workshop.title}
                        </div>

                        <div className="space-y-2 text-sm text-muted-foreground">
                            <div>–î–∞—Ç–∞: {formatDate(workshop.date)}</div>
                            <div>–í—Ä–µ–º—è: {workshop.time}</div>
                            <div>–ú–µ—Å—Ç–æ: {workshop.location}</div>
                        </div>

                        <Separator />

                        <div className="space-y-2">
                            <div className="font-semibold">–í—ã–±—Ä–∞–Ω–Ω—ã–π —Å—Ç–∏–ª—å:</div>
                            <Badge variant="secondary">{selectedStyle}</Badge>
                        </div>

                        {selectedOptions.length > 0 && (
                            <div className="space-y-2">
                                <div className="font-semibold">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏:</div>
                                <div className="flex flex-wrap gap-2 justify-center">
                                    {selectedOptions.map(option => (
                                        <Badge key={option} variant="outline">
                                            {option}
                                        </Badge>
                                    ))}
                                </div>
                            </div>
                        )}

                        <div className="text-lg font-bold">
                            –ò—Ç–æ–≥–æ: {calculateTotalPrice()} ‚ÇΩ
                        </div>

                        <div className="space-y-2">
                            <Button
                                onClick={handleClose}
                                className="w-full"
                                variant="outline"
                            >
                                –ó–∞–∫—Ä—ã—Ç—å
                            </Button>
                            <Button
                                className="w-full bg-green-600 hover:bg-green-700"
                                onClick={() => {
                                    // TODO: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π
                                    toast({
                                        title: "–û–ø–ª–∞—Ç–∞",
                                        description: "–§—É–Ω–∫—Ü–∏—è –æ–ø–ª–∞—Ç—ã –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
                                    });
                                }}
                            >
                                üí≥ –û–ø–ª–∞—Ç–∏—Ç—å
                            </Button>
                        </div>
                    </div>
                </DialogContent>
            </Dialog>
        );
    }

    return (
        <Dialog open={isOpen} onOpenChange={handleClose}>
            <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
                <DialogHeader>
                    <DialogTitle className="text-xl font-bold text-orange-600">
                        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
                    </DialogTitle>
                    <DialogDescription className="text-gray-600">
                        –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å
                    </DialogDescription>
                </DialogHeader>

                <div className="space-y-6">
                    {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ */}
                    <Card>
                        <CardHeader>
                            <CardTitle className="text-xl">{workshop.title}</CardTitle>
                            <CardDescription>{workshop.description}</CardDescription>
                        </CardHeader>
                        <CardContent className="space-y-4">
                            <div className="grid grid-cols-2 gap-4 text-sm">
                                <div>
                                    <span className="font-semibold">–î–∞—Ç–∞:</span> {formatDate(workshop.date)}
                                </div>
                                <div>
                                    <span className="font-semibold">–í—Ä–µ–º—è:</span> {workshop.time}
                                </div>
                                <div>
                                    <span className="font-semibold">–ú–µ—Å—Ç–æ:</span> {workshop.location}
                                </div>
                                <div>
                                    <span className="font-semibold">–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</span> {workshop.duration}
                                </div>
                                <div>
                                    <span className="font-semibold">–£—á–∞—Å—Ç–Ω–∏–∫–∏:</span> {workshop.currentParticipants}/{workshop.maxParticipants}
                                </div>
                                <div>
                                    <span className="font-semibold">–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞:</span> {workshop.price} ‚ÇΩ
                                </div>
                            </div>

                            {workshop.image && (
                                <div className="mt-4">
                                    <img
                                        src={workshop.image}
                                        alt={workshop.title}
                                        className="w-full h-48 object-cover rounded-lg"
                                    />
                                </div>
                            )}
                        </CardContent>
                    </Card>

                    {/* –í—ã–±–æ—Ä —Å—Ç–∏–ª—è */}
                    <Card>
                        <CardHeader>
                            <CardTitle>–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —Å—Ç–∏–ª—å</CardTitle>
                            <CardDescription>
                                –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—Ç–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <div className="grid grid-cols-2 gap-3">
                                {availableStyles.map(style => (
                                    <Button
                                        key={style}
                                        variant={selectedStyle === style ? "default" : "outline"}
                                        onClick={() => handleStyleSelect(style)}
                                        className="h-16 text-sm"
                                    >
                                        {style}
                                    </Button>
                                ))}
                            </div>
                        </CardContent>
                    </Card>

                    {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ */}
                    <Card>
                        <CardHeader>
                            <CardTitle>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏</CardTitle>
                            <CardDescription>
                                –í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            <div className="space-y-3">
                                {availableOptions.map(option => (
                                    <div key={option} className="flex items-center space-x-3">
                                        <input
                                            type="checkbox"
                                            id={option}
                                            checked={selectedOptions.includes(option)}
                                            onChange={() => handleOptionToggle(option)}
                                            className="w-4 h-4 text-primary"
                                        />
                                        <label htmlFor={option} className="text-sm font-medium">
                                            {option}
                                        </label>
                                    </div>
                                ))}
                            </div>
                        </CardContent>
                    </Card>

                    {/* –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å */}
                    <Card>
                        <CardHeader>
                            <CardTitle>–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å</CardTitle>
                        </CardHeader>
                        <CardContent>
                            <div className="space-y-2">
                                <div className="flex justify-between">
                                    <span>–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞:</span>
                                    <span>{workshop.price} ‚ÇΩ</span>
                                </div>
                                {selectedOptions.length > 0 && (
                                    <>
                                        <Separator />
                                        {selectedOptions.map(option => {
                                            const optionPrices: { [key: string]: number } = {
                                                '–ú–∞—Ç–µ—Ä–∏–∞–ª—ã –≤–∫–ª—é—á–µ–Ω—ã': 500,
                                                '–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç': 300,
                                                '–§–æ—Ç–æ—Å–µ—Å—Å–∏—è': 800,
                                                '–í–∏–¥–µ–æ–∑–∞–ø–∏—Å—å': 1200,
                                            };
                                            return (
                                                <div key={option} className="flex justify-between text-sm">
                                                    <span>{option}:</span>
                                                    <span>+{optionPrices[option] || 0} ‚ÇΩ</span>
                                                </div>
                                            );
                                        })}
                                    </>
                                )}
                                <Separator />
                                <div className="flex justify-between font-bold text-lg">
                                    <span>–ò—Ç–æ–≥–æ:</span>
                                    <span>{calculateTotalPrice()} ‚ÇΩ</span>
                                </div>
                            </div>
                        </CardContent>
                    </Card>

                    {/* –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π */}
                    <div className="flex gap-3 justify-end">
                        <Button variant="outline" onClick={handleClose}>
                            –û—Ç–º–µ–Ω–∞
                        </Button>
                        <Button
                            onClick={handleSubmit}
                            disabled={!selectedStyle || loading}
                            className="min-w-[150px]"
                        >
                            {loading ? '–ó–∞–ø–∏—Å—ã–≤–∞–µ–º—Å—è...' : '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å'}
                        </Button>
                    </div>
                </div>
            </DialogContent>
        </Dialog>
    );
};
