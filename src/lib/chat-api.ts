/**
 * @file: src/lib/chat-api.ts
 * @description: API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã —á–∞—Ç–∞
 * @dependencies: api.ts, types/chat.ts
 * @created: 2024-12-19
 */

import { api } from './api';
import {
    Chat,
    ChatMessage,
    CreateChatRequest,
    SendMessageRequest,
    UpdateChatStatusRequest,
    MarkAsReadRequest,
    MarkMessageAsReadRequest,
    ChatListResponse,
    ChatMessagesResponse
} from '../types/chat';

export const chatApi = {
    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
    createChat: async (data: CreateChatRequest): Promise<{ success: boolean; chatId: string; message: string }> => {
        const response = await api.post<{ success: boolean; chatId: string; message: string }>('/chat/create', data);
        return response.data!;
    },

    // –ü–æ–ª—É—á–∏—Ç—å —á–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserChats: async (userId: string): Promise<ChatListResponse> => {
        console.log('üîç chat-api: getUserChats –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { userId });

        try {
            const response = await api.get<ChatListResponse>(`/chat/user/${userId}`);
            console.log('‚úÖ chat-api: getUserChats —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');

            const result = response.data || response;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (result && 'chats' in result && 'total' in result) {
                return result as ChatListResponse;
            }

            throw new Error('Invalid response format from backend');
        } catch (error) {
            console.error('‚ùå chat-api: getUserChats –æ—à–∏–±–∫–∞:', error);
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —á–∞—Ç—ã (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)
    getAllChats: async (status?: string): Promise<ChatListResponse> => {
        console.log('üîç chat-api: getAllChats –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { status });

        try {
            const params = new URLSearchParams();
            if (status) {
                params.append('status', status);
            }

            const response = await api.get<ChatListResponse>(`/chat/admin/all?${params.toString()}`);
            console.log('‚úÖ chat-api: getAllChats —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');

            // Backend –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é, –∞ –Ω–µ –≤ response.data
            // –ü–æ—ç—Ç–æ–º—É –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ response.data –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º response –Ω–∞–ø—Ä—è–º—É—é
            const result = response.data || response;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (result && 'chats' in result && 'total' in result) {
                return result as ChatListResponse;
            }

            throw new Error('Invalid response format from backend');
        } catch (error) {
            console.error('‚ùå chat-api: getAllChats –æ—à–∏–±–∫–∞:', error);
            throw error;
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
    getChatMessages: async (chatId: string): Promise<ChatMessagesResponse> => {
        console.log('üîç chat-api: getChatMessages –≤—ã–∑–≤–∞–Ω —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', { chatId });

        try {
            const response = await api.get<ChatMessagesResponse>(`/chat/${chatId}/messages`);
            console.log('‚úÖ chat-api: getChatMessages —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω');

            const result = response.data || response;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (result && 'messages' in result && 'total' in result) {
                return result as ChatMessagesResponse;
            }

            throw new Error('Invalid response format from backend');
        } catch (error) {
            console.error('‚ùå chat-api: getChatMessages –æ—à–∏–±–∫–∞:', error);
            throw error;
        }
    },

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    sendMessage: async (data: SendMessageRequest): Promise<{ success: boolean; messageId: string; message: string }> => {
        console.log('üì§ chat-api: –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ:', data);
        const response = await api.post<{ success: boolean; messageId: string; message: string }>('/chat/send', {
            chatId: data.chatId,
            message: data.message,
            messageType: data.messageType || 'text',
            fileUrl: data.fileUrl
        });
        console.log('üì° chat-api: –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞:', response);
        return response.data!;
    },

    // –û—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
    markAsRead: async (data: MarkAsReadRequest): Promise<{ success: boolean; message: string }> => {
        const response = await api.post<{ success: boolean; message: string }>('/chat/mark-read', data);
        return response.data!;
    },

    // –û—Ç–º–µ—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    markMessageAsRead: async (data: MarkMessageAsReadRequest): Promise<{ success: boolean; message: string }> => {
        const response = await api.post<{ success: boolean; message: string }>('/chat/message/read', data);
        return response.data!;
    },

    // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
    updateChatStatus: async (data: UpdateChatStatusRequest): Promise<{ success: boolean; message: string }> => {
        const response = await api.put<{ success: boolean; message: string }>('/chat/status', data);
        return response.data!;
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    getUnreadCount: async (userId: string): Promise<{ unreadTotal: number }> => {
        try {
            const response = await api.get<{ unreadTotal: number }>(`/chat/user/${userId}/unread`);
            return response.data!;
        } catch (error) {
            console.error('‚ùå chat-api: getUnreadCount –æ—à–∏–±–∫–∞:', error);
            throw error;
        }
    }
};

