/**
 * @file: src/hooks/use-websocket-chat.ts
 * @description: –•—É–∫ –¥–ª—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–º —Å–µ—Ä–≤–µ—Ä–æ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 * @dependencies: useNotificationSound, useCallback, useEffect, useRef
 * @created: 2024-12-19
 */

import { useEffect, useRef, useCallback, useState } from 'react';
import { useAuth } from '../contexts/AuthContext';
import { useToast } from './use-toast';
import { WS_BASE_URL } from '../lib/config';
import { useNotificationSound } from './use-notification-sound';

interface WebSocketMessage {
    type: 'connection_established' | 'chat_message' | 'chat_status_change' | 'chat_list_update' | 'new_chat' | 'unread_count_update' | 'invoice_update' | 'master_class_update' | 'user_registration' | 'system_notification' | 'pong';
    data: Record<string, unknown>;
    timestamp: number;
    targetUsers?: string[];
    targetRoles?: string[];
}

interface WebSocketState {
    isConnected: boolean;
    isConnecting: boolean;
    connectionAttempts: number;
    lastError?: string;
}

export const useWebSocketChat = (chatId?: string, userId?: string, isAdmin: boolean = false) => {
    const wsRef = useRef<WebSocket | null>(null);
    const reconnectTimeoutRef = useRef<NodeJS.Timeout | null>(null);
    const pingIntervalRef = useRef<NodeJS.Timeout | null>(null);
    const connectionAttemptsRef = useRef(0);
    const { playMessageSound } = useNotificationSound();

    const [wsState, setWsState] = useState<WebSocketState>({
        isConnected: false,
        isConnecting: false,
        connectionAttempts: 0
    });

    const maxReconnectAttempts = 3;
    const reconnectDelay = 2000; // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ 2 —Å–µ–∫—É–Ω–¥—ã

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const connect = useCallback(() => {
        if (wsRef.current?.readyState === WebSocket.OPEN || wsRef.current?.readyState === WebSocket.CONNECTING) {
            console.log('üîå WebSocket: –£–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∏–ª–∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }

        if (wsState.isConnecting) {
            console.log('üîå WebSocket: –£–∂–µ –∏–¥–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º');
            return;
        }

        setWsState(prev => ({ ...prev, isConnecting: true }));

        try {
            const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
            const host = window.location.host;
            const wsUrl = protocol === 'wss:' ?
                `wss://${host}/api/chat/ws?userId=${userId}&isAdmin=${isAdmin}` :
                `${WS_BASE_URL}?userId=${userId}&isAdmin=${isAdmin}`;

            console.log('üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket:', wsUrl);

            wsRef.current = new WebSocket(wsUrl);

            wsRef.current.onopen = () => {
                console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                setWsState({
                    isConnected: true,
                    isConnecting: false,
                    connectionAttempts: 0
                });
                connectionAttemptsRef.current = 0;

                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
                pingIntervalRef.current = setInterval(() => {
                    if (wsRef.current?.readyState === WebSocket.OPEN) {
                        wsRef.current.send(JSON.stringify({ type: 'ping' }));
                    }
                }, 60000);

                // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
                if (isAdmin) {
                    // –ê–¥–º–∏–Ω –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å–µ —á–∞—Ç—ã
                    wsRef.current.send(JSON.stringify({
                        type: 'subscribe',
                        channels: ['admin:all', 'chat:all']
                    }));
                } else {
                    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —Å–≤–æ–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                    const channels = [`user:${userId}`];
                    if (chatId) {
                        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —á–∞—Ç, –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–µ–≥–æ
                        channels.push(`chat:${chatId}`);
                    }
                    wsRef.current.send(JSON.stringify({
                        type: 'subscribe',
                        channels
                    }));
                }
            };

            wsRef.current.onmessage = (event) => {
                try {
                    const message: WebSocketMessage = JSON.parse(event.data);

                    switch (message.type) {
                        case 'connection_established':
                            console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ:', message.data);
                            break;

                        case 'chat_message':
                            // –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–≤–æ–∏—Ö —á–∞—Ç–∞—Ö
                            if (isAdmin || message.data.chatId === chatId) {
                                // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è)
                                if (message.data.senderId !== userId) {
                                    playMessageSound();
                                }
                                console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket:', message.data);

                                // –ï—Å–ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞ –∫ —Ä–æ–¥–∏—Ç–µ–ª—é, –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å UI
                                if (!isAdmin && message.data.senderType === 'admin') {
                                    console.log('üì® –†–æ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º UI');
                                    // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
                                }
                            }
                            break;

                        case 'chat_list_update':
                            // –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
                            if (isAdmin) {
                                console.log('üìã –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ —á–µ—Ä–µ–∑ WebSocket:', message.data);
                                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
                            }
                            break;

                        case 'new_chat':
                            // –ê–¥–º–∏–Ω –ø–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —á–∞—Ç–∞—Ö
                            if (isAdmin) {
                                console.log('üÜï –ù–æ–≤—ã–π —á–∞—Ç —á–µ—Ä–µ–∑ WebSocket:', message.data);
                                // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
                            }
                            break;

                        case 'unread_count_update':
                            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                            console.log('üî¢ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ WebSocket:', message.data);
                            // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤
                            break;

                        case 'chat_status_change':
                            if (message.data.chatId === chatId) {
                                console.log('üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ WebSocket:', message.data.status);
                            }
                            break;

                        case 'invoice_update':
                            if (message.data.userId === userId) {
                                console.log('üí∞ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞ —á–µ—Ä–µ–∑ WebSocket:', message.data);
                            }
                            break;

                        case 'master_class_update':
                            console.log('üé® –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–∞ —á–µ—Ä–µ–∑ WebSocket:', message.data);
                            break;

                        case 'user_registration':
                            if (isAdmin) {
                                console.log('üë§ –ù–æ–≤–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ WebSocket:', message.data);
                            }
                            break;

                        case 'system_notification':
                            console.log('üîî –°–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket:', message.data);
                            break;

                        case 'pong':
                            // –û—Ç–≤–µ—Ç –Ω–∞ ping
                            break;

                        default:
                            console.log('üì® –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', message.type);
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
                }
            };

            wsRef.current.onclose = (event) => {
                console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ:', event.code, event.reason);
                setWsState(prev => ({ ...prev, isConnected: false, isConnecting: false }));

                if (pingIntervalRef.current) {
                    clearInterval(pingIntervalRef.current);
                    pingIntervalRef.current = null;
                }

                // –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä—ã–≤–æ–≤
                if (event.code !== 1000 && connectionAttemptsRef.current < maxReconnectAttempts) {
                    connectionAttemptsRef.current += 1;
                    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ${connectionAttemptsRef.current}/${maxReconnectAttempts}`);

                    // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–∞—É—Ç
                    if (reconnectTimeoutRef.current) {
                        clearTimeout(reconnectTimeoutRef.current);
                    }

                    reconnectTimeoutRef.current = setTimeout(() => {
                        setWsState(prev => ({ ...prev, connectionAttempts: connectionAttemptsRef.current }));
                        connect();
                    }, reconnectDelay);
                } else if (connectionAttemptsRef.current >= maxReconnectAttempts) {
                    console.log('‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
                    setWsState(prev => ({ ...prev, lastError: 'Connection failed after multiple attempts' }));
                }
            };

            wsRef.current.onerror = (error) => {
                console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                setWsState(prev => ({ ...prev, lastError: 'Connection error' }));
            };

        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è WebSocket:', error);
            setWsState(prev => ({ ...prev, isConnecting: false, lastError: 'Failed to create connection' }));
        }
    }, [chatId, userId, isAdmin]); // –£–±—Ä–∞–ª –ª–∏—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ WebSocket
    const sendMessage = useCallback((message: string) => {
        if (wsRef.current?.readyState === WebSocket.OPEN) {
            wsRef.current.send(JSON.stringify({
                type: 'new_message',
                data: { message, chatId }
            }));
        }
    }, [chatId]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    const disconnect = useCallback(() => {
        console.log('üîå WebSocket: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è');

        if (reconnectTimeoutRef.current) {
            clearTimeout(reconnectTimeoutRef.current);
            reconnectTimeoutRef.current = null;
        }

        if (pingIntervalRef.current) {
            clearInterval(pingIntervalRef.current);
            pingIntervalRef.current = null;
        }

        if (wsRef.current) {
            wsRef.current.close(1000, 'Manual disconnect');
            wsRef.current = null;
        }

        setWsState({
            isConnected: false,
            isConnecting: false,
            connectionAttempts: 0
        });

        connectionAttemptsRef.current = 0;
    }, []);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        if (userId) {
            console.log('üîå WebSocket: useEffect: –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket');
            connect();
        }

        return () => {
            console.log('üîå WebSocket: useEffect cleanup: –û—Ç–∫–ª—é—á–∞–µ–º WebSocket');
            disconnect();
        };
    }, [userId, connect, disconnect]);

    // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ chatId (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    useEffect(() => {
        if (!isAdmin && chatId && wsState.isConnected && wsRef.current?.readyState === WebSocket.OPEN) {
            // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∏ –ø–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –Ω–æ–≤—ã–π
            wsRef.current.send(JSON.stringify({
                type: 'unsubscribe',
                channels: [`chat:${chatId}`]
            }));

            wsRef.current.send(JSON.stringify({
                type: 'subscribe',
                channels: [`chat:${chatId}`, `user:${userId}`]
            }));
        }
    }, [chatId, wsState.isConnected, isAdmin, userId]);

    return {
        ...wsState,
        sendMessage,
        disconnect,
        connect,
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
        subscribe: useCallback((channels: string[]) => {
            if (wsRef.current?.readyState === WebSocket.OPEN) {
                wsRef.current.send(JSON.stringify({
                    type: 'subscribe',
                    channels
                }));
            }
        }, []),
        unsubscribe: useCallback((channels: string[]) => {
            if (wsRef.current?.readyState === WebSocket.OPEN) {
                wsRef.current.send(JSON.stringify({
                    type: 'unsubscribe',
                    channels
                }));
            }
        }, [])
    };
};
