/**
 * @file: src/hooks/use-about-content.ts
 * @description: –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã "–û –Ω–∞—Å"
 * @dependencies: useState, useEffect
 * @created: 2024-12-19
 */

import { useState, useEffect } from 'react';
import { saveMediaFile, loadMediaFile, deleteMediaFile } from '@/lib/media-utils';

export interface MediaItem {
    id: string;
    type: 'image' | 'video';
    url: string;
    filename?: string; // –∏–º—è —Ñ–∞–π–ª–∞ –≤ assets/about
    title: string;
    description?: string;
    order: number;
    file?: File;
}

export interface AboutContent {
    heroTitle: string;
    heroSubtitle: string;
    heroDescription: string;
    aboutTitle: string;
    aboutDescription: string;
    advantages: string[];
    processSteps: Array<{
        title: string;
        description: string;
    }>;
    safetyTitle: string;
    safetyDescription: string;
    contactTitle: string;
    contactDescription: string;
    media: MediaItem[];
}

const defaultContent: AboutContent = {
    heroTitle: '–í–æ—Å–∫–æ–≤—ã–µ –†—É—á–∫–∏',
    heroSubtitle: '‚ú® –ú–∞–≥–∏—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ ‚ú®',
    heroDescription: '–°–æ–∑–¥–∞–π —Å–≤–æ—é —É–Ω–∏–∫–∞–ª—å–Ω—É—é 3D –∫–æ–ø–∏—é —Ä—É–∫–∏ –≤ –≤–æ—Å–∫–æ–≤–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏! –ü—Ä–∏–µ–∑–∂–∞–µ–º –≤ —à–∫–æ–ª—ã –∏ –¥–µ—Ç—Å–∫–∏–µ —Å–∞–¥—ã. –ù–µ–∑–∞–±—ã–≤–∞–µ–º—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å—É–≤–µ–Ω–∏—Ä—ã –∑–∞ 5 –º–∏–Ω—É—Ç! üéâ',
    aboutTitle: '–û –Ω–∞—à–µ–π —Å—Ç—É–¥–∏–∏',
    aboutDescription: '–°—Ç—É–¥–∏—è ¬´–ú–ö –í–æ—Å–∫–æ–≤—ã–µ —Ä—É—á–∫–∏¬ª ‚Äî —ç—Ç–æ –º–µ—Å—Ç–æ, –≥–¥–µ —Ä–æ–∂–¥–∞–µ—Ç—Å—è –º–∞–≥–∏—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞! –ú—ã —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º—Å—è –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö 3D-–∫–æ–ø–∏–π —Ä—É–∫ –¥–µ—Ç–µ–π –≤ –≤–æ—Å–∫–æ–≤–æ–º –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–∏.',
    advantages: [
        '–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ ‚Äî –≤—Å–µ–≥–æ 5 –º–∏–Ω—É—Ç –Ω–∞ –æ–¥–Ω–æ–≥–æ —Ä–µ–±–µ–Ω–∫–∞',
        '–í—ã–µ–∑–¥–Ω—ã–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã –≤ –ª—é–±—ã–µ —É—á—Ä–µ–∂–¥–µ–Ω–∏—è',
        '–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ 3D-—Å—É–≤–µ–Ω–∏—Ä—ã —Ä—É—á–Ω–æ–π —Ä–∞–±–æ—Ç—ã',
        '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –¥–µ—Ç–µ–π'
    ],
    processSteps: [
        {
            title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞',
            description: '–†–µ–±–µ–Ω–æ–∫ –≤—ã–±–∏—Ä–∞–µ—Ç —Ü–≤–µ—Ç –≤–æ—Å–∫–∞ –∏ –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ —Ç–≤–æ—Ä—á–µ—Å–∫–æ–º—É –ø—Ä–æ—Ü–µ—Å—Å—É'
        },
        {
            title: '–°–æ–∑–¥–∞–Ω–∏–µ',
            description: '–ü–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –º–∞—Å—Ç–µ—Ä–∞ —Ä–µ–±–µ–Ω–æ–∫ —Å–æ–∑–¥–∞–µ—Ç 3D-–∫–æ–ø–∏—é —Å–≤–æ–µ–π —Ä—É–∫–∏'
        },
        {
            title: '–ì–æ—Ç–æ–≤–æ!',
            description: '–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É–≤–µ–Ω–∏—Ä –≥–æ—Ç–æ–≤ –∏ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–±—Ä–∞–Ω –¥–æ–º–æ–π'
        }
    ],
    safetyTitle: '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ',
    safetyDescription: '–ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ, –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –¥–ª—è –¥–µ—Ç–µ–π –º–∞—Ç–µ—Ä–∏–∞–ª—ã. –í—Å–µ –Ω–∞—à–∏ –º–∞—Å—Ç–µ—Ä–∞ –∏–º–µ—é—Ç –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã —Å –¥–µ—Ç—å–º–∏ –∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ.',
    contactTitle: '–°–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏',
    contactDescription: '–ì–æ—Ç–æ–≤—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –Ω–µ–∑–∞–±—ã–≤–∞–µ–º—ã–π –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å –¥–ª—è –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π? –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º, –∏ –º—ã –æ–±—Å—É–¥–∏–º –≤—Å–µ –¥–µ—Ç–∞–ª–∏!',
    media: []
};

export const useAboutContent = () => {
    const [content, setContent] = useState<AboutContent>(defaultContent);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –∏–∑ localStorage –∏–ª–∏ API
    useEffect(() => {
        const loadContent = async () => {
            try {
                setIsLoading(true);
                // –ü–æ–∫–∞ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage, –ø–æ–∑–∂–µ –±—É–¥–µ—Ç API
                const savedContent = localStorage.getItem('aboutContent');
                let parsedContent = savedContent ? JSON.parse(savedContent) : defaultContent;

                // –ï—Å–ª–∏ –º–µ–¥–∏–∞ –ø—É—Å—Ç–æ–µ, –¥–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-—Ñ–∞–π–ª—ã
                if (!parsedContent.media || parsedContent.media.length === 0) {
                    parsedContent.media = [
                        {
                            id: 'demo-1',
                            type: 'video',
                            url: '/src/assets/about/demo-video-1.mp4',
                            filename: 'demo-video-1.mp4',
                            title: '–ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å: –í–æ—Å–∫–æ–≤—ã–µ —Ä—É—á–∫–∏',
                            description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è 3D-–∫–æ–ø–∏–∏ —Ä—É–∫–∏ –∏–∑ –≤–æ—Å–∫–∞',
                            order: 0
                        },
                        {
                            id: 'demo-2',
                            type: 'video',
                            url: '/src/assets/about/demo-video-2.mp4',
                            filename: 'demo-video-2.mp4',
                            title: '–î–≤–æ–π–Ω—ã–µ –≤–æ—Å–∫–æ–≤—ã–µ —Ä—É—á–∫–∏',
                            description: '–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞—Ä–Ω—ã—Ö –≤–æ—Å–∫–æ–≤—ã—Ö –∫–æ–ø–∏–π —Ä—É–∫',
                            order: 1
                        }
                    ];
                }

                // –ó–∞–≥—Ä—É–∂–∞–µ–º –º–µ–¥–∏–∞-—Ñ–∞–π–ª—ã –∏–∑ localStorage
                if (parsedContent.media && parsedContent.media.length > 0) {
                    const mediaWithUrls = await Promise.all(
                        parsedContent.media.map(async (item: MediaItem) => {
                            if (item.filename) {
                                try {
                                    // –î–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤ –≤ assets –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –ø—É—Ç—å
                                    if (item.filename.includes('demo-')) {
                                        return { ...item, url: `/src/assets/about/${item.filename}` };
                                    }

                                    // –î–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ localStorage
                                    if (item.filename.startsWith('uploaded-')) {
                                        try {
                                            const url = await loadMediaFile(item.filename);
                                            return { ...item, url };
                                        } catch (error) {
                                            console.warn(`Failed to load media file: ${item.filename}`, error);
                                            return item;
                                        }
                                    }
                                } catch (error) {
                                    console.warn(`Failed to load media file: ${item.filename}`, error);
                                }
                            }
                            return item;
                        })
                    );
                    parsedContent.media = mediaWithUrls;
                }

                setContent(parsedContent);
                console.log('Content loaded successfully:', parsedContent);

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –µ—Å–ª–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –¥–µ–º–æ-—Ñ–∞–π–ª—ã
                if (!savedContent || !savedContent.includes('demo-')) {
                    localStorage.setItem('aboutContent', JSON.stringify({
                        ...parsedContent,
                        media: parsedContent.media.map((item: MediaItem) => ({
                            ...item,
                            url: item.filename?.includes('demo-') ? `/src/assets/about/${item.filename}` : ''
                        }))
                    }));
                    console.log('Demo content saved to localStorage');
                }
            } catch (err) {
                setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
                console.error('Error loading about content:', err);
            } finally {
                setIsLoading(false);
            }
        };

        loadContent();
    }, []);

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    const saveContent = async (newContent: AboutContent) => {
        try {
            // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–µ–∑ blob URL
            const contentToSave = {
                ...newContent,
                media: newContent.media.map(item => ({
                    ...item,
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ metadata, URL –±—É–¥–µ–º –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
                    url: item.filename?.includes('demo-') ? `/src/assets/about/${item.filename}` : ''
                }))
            };

            // –ü–æ–∫–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage, –ø–æ–∑–∂–µ –±—É–¥–µ—Ç API
            localStorage.setItem('aboutContent', JSON.stringify(contentToSave));
            setContent(newContent); // –í —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å URL
            console.log('Content saved successfully to localStorage');
            return true;
        } catch (err) {
            setError('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞');
            console.error('Error saving about content:', err);
            return false;
        }
    };

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –ø–æ–ª—è
    const updateField = async (field: keyof AboutContent, value: any) => {
        const newContent = { ...content, [field]: value };
        const success = await saveContent(newContent);
        if (success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è UI
            setContent(newContent);
            console.log('Field updated successfully:', field, value);
        }
        return success;
    };

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
    const addMedia = async (mediaItem: Omit<MediaItem, 'id' | 'order'>) => {
        try {
            let finalUrl = mediaItem.url;
            let filename = mediaItem.filename;

            // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –∏ –ø–æ–ª—É—á–∞–µ–º URL
            if (mediaItem.file) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
                const maxSize = 5 * 1024 * 1024; // 5MB
                if (mediaItem.file.size > maxSize) {
                    throw new Error(`–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: ${maxSize / 1024 / 1024}MB`);
                }

                finalUrl = await saveMediaFile(mediaItem.file, mediaItem.type);
                filename = `uploaded-${Date.now()}-${mediaItem.file.name}`;
            } else if (mediaItem.filename) {
                // –ï—Å–ª–∏ –µ—Å—Ç—å filename, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                filename = mediaItem.filename;
            }

            const newMediaItem: MediaItem = {
                ...mediaItem,
                id: Date.now().toString(),
                order: content.media.length,
                url: finalUrl,
                filename: filename
            };

            const newContent = {
                ...content,
                media: [...content.media, newMediaItem]
            };

            const success = await saveContent(newContent);
            if (success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è UI
                setContent(newContent);
                console.log('Media added successfully:', newMediaItem);
            }
            return success;
        } catch (error) {
            console.error('Error adding media:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –æ—à–∏–±–∫—É –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if (error instanceof Error) {
                throw new Error(error.message);
            }
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –º–µ–¥–∏–∞-—Ñ–∞–π–ª');
        }
    };

    // –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞
    const removeMedia = async (id: string) => {
        try {
            const mediaItem = content.media.find(item => item.id === id);

            // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –∏–∑ localStorage
            if (mediaItem?.filename && mediaItem.filename.startsWith('uploaded-')) {
                await deleteMediaFile(mediaItem.filename);
            }
            // –î–µ–º–æ-—Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª—è–µ–º, –æ–Ω–∏ —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ

            const newContent = {
                ...content,
                media: content.media.filter(item => item.id !== id)
            };

            const success = await saveContent(newContent);
            if (success) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è UI
                setContent(newContent);
                console.log('Media removed successfully:', id);
            }
            return success;
        } catch (error) {
            console.error('Error removing media:', error);
            return false;
        }
    };

    // –ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ –º–µ–¥–∏–∞
    const reorderMedia = async (mediaIds: string[]) => {
        const newMedia = mediaIds.map((id, index) => {
            const item = content.media.find(m => m.id === id);
            return item ? { ...item, order: index } : null;
        }).filter(Boolean) as MediaItem[];

        const newContent = {
            ...content,
            media: newMedia
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫
        const success = await saveContent(newContent);
        if (success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è UI
            setContent(newContent);
            console.log('Media reordered successfully:', newMedia);
        }
        return success;
    };

    // –°–±—Ä–æ—Å –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const resetToDefault = async () => {
        const success = await saveContent(defaultContent);
        if (success) {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –¥–ª—è UI
            setContent(defaultContent);
        }
        return success;
    };

    return {
        content,
        isLoading,
        error,
        saveContent,
        updateField,
        addMedia,
        removeMedia,
        reorderMedia,
        resetToDefault
    };
};
