/**
 * @file: use-invoices.ts
 * @description: –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
 * @dependencies: React Query, API endpoints
 * @created: 2024-12-19
 */

import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Invoice, CreateInvoiceRequest, InvoiceFilters } from '@/types';

const API_BASE_URL = import.meta.env.VITE_API_URL || 'http://localhost:3001/api';

// API —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏
const invoicesAPI = {
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å—á–µ—Ç–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    getInvoices: async (filters: InvoiceFilters = {}): Promise<{ invoices: Invoice[]; total: number }> => {
        const params = new URLSearchParams();
        Object.entries(filters).forEach(([key, value]) => {
            if (value !== undefined && value !== '') {
                params.append(key, value.toString());
            }
        });

        const url = `${API_BASE_URL}/invoices?${params.toString()}`;
        console.log('üîç API getInvoices - URL:', url);
        console.log('üîç API getInvoices - filters:', filters);

        const response = await fetch(url, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
        });

        console.log('üîç API getInvoices - response status:', response.status);
        console.log('üîç API getInvoices - response ok:', response.ok);

        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç–∞');
        }

        const data = await response.json();
        console.log('üîç API getInvoices - raw response data:', data);

        if (!data.success) {
            throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç–∞');
        }

        const result = {
            invoices: data.data.invoices,
            total: data.data.pagination?.total || data.data.invoices.length
        };

        console.log('üîç API getInvoices - processed result:', result);
        return result;
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–∞ –ø–æ ID
    getInvoiceById: async (id: string): Promise<Invoice> => {
        const response = await fetch(`${API_BASE_URL}/invoices/${id}`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
        });

        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç');
        }

        const data = await response.json();

        if (!data.success) {
            throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç');
        }

        return data.data;
    },

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞
    createInvoice: async (invoiceData: CreateInvoiceRequest): Promise<Invoice> => {
        console.log('üîÑ createInvoice: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ:', invoiceData);
        console.log('üîÑ createInvoice: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:', localStorage.getItem('authToken') ? '–ï—Å—Ç—å' : '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');

        const response = await fetch(`${API_BASE_URL}/invoices`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: JSON.stringify(invoiceData)
        });

        console.log('üîÑ createInvoice: –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:', response.status);
        console.log('üîÑ createInvoice: –°—Ç–∞—Ç—É—Å ok:', response.ok);

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ª—É—á—à–µ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        const responseText = await response.text();
        console.log('üîÑ createInvoice: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞:', responseText);

        if (!response.ok) {
            let errorMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç';

            try {
                const errorData = JSON.parse(responseText);
                errorMessage = errorData.error || errorMessage;
                console.log('‚ùå createInvoice: –î–∞–Ω–Ω—ã–µ –æ–± –æ—à–∏–±–∫–µ:', errorData);
            } catch (parseError) {
                console.log('‚ùå createInvoice: –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –æ—Ç–≤–µ—Ç –æ–± –æ—à–∏–±–∫–µ:', parseError);
            }

            throw new Error(`${errorMessage} (HTTP ${response.status})`);
        }

        let data;
        try {
            data = JSON.parse(responseText);
        } catch (parseError) {
            console.error('‚ùå createInvoice: –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:', parseError);
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞');
        }

        if (!data.success) {
            throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å—á–µ—Ç');
        }

        console.log('‚úÖ createInvoice: –°—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', data.data);
        return data.data;
    },

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å—á–µ—Ç–∞
    updateInvoiceStatus: async (id: string, status: string): Promise<Invoice> => {
        const response = await fetch(`${API_BASE_URL}/invoices/${id}/status`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            },
            body: JSON.stringify({ status })
        });

        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞');
        }

        const data = await response.json();

        if (!data.success) {
            throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞');
        }

        return data.data;
    },

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –ø–æ –¥–∞—Ç–µ
    getInvoicesByDate: async (date: string): Promise<Invoice[]> => {
        const response = await fetch(`${API_BASE_URL}/invoices/date/${date}`, {
            headers: {
                'Authorization': `Bearer ${localStorage.getItem('authToken')}`
            }
        });

        if (!response.ok) {
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç–∞ –ø–æ –¥–∞—Ç–µ');
        }

        const data = await response.json();

        if (!data.success) {
            throw new Error(data.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—á–µ—Ç–∞ –ø–æ –¥–∞—Ç–µ');
        }

        return data.data;
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º API –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
export { invoicesAPI };

// –•—É–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—á–µ—Ç–∞–º–∏
export const useInvoices = (filters: InvoiceFilters = {}) => {
    return useQuery({
        queryKey: ['invoices', JSON.stringify(filters)],
        queryFn: () => invoicesAPI.getInvoices(filters),
        staleTime: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    });
};

export const useInvoiceById = (id: string) => {
    return useQuery({
        queryKey: ['invoice', id],
        queryFn: () => invoicesAPI.getInvoiceById(id),
        enabled: !!id,
        staleTime: 5 * 60 * 1000,
    });
};

export const useCreateInvoice = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: invoicesAPI.createInvoice,
        onSuccess: () => {
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å—á–µ—Ç–æ–≤ –∏ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
            queryClient.invalidateQueries({ queryKey: ['invoices'] });
            queryClient.invalidateQueries({ queryKey: ['masterClasses'] });
        },
    });
};

export const useUpdateInvoiceStatus = () => {
    const queryClient = useQueryClient();

    return useMutation({
        mutationFn: ({ id, status }: { id: string; status: string }) =>
            invoicesAPI.updateInvoiceStatus(id, status),
        onSuccess: () => {
            // –ò–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º –∫—ç—à —Å—á–µ—Ç–æ–≤
            queryClient.invalidateQueries({ queryKey: ['invoices'] });
        },
    });
};

export const useInvoicesByDate = (date: string) => {
    return useQuery({
        queryKey: ['invoices', 'date', date],
        queryFn: () => invoicesAPI.getInvoicesByDate(date),
        enabled: !!date,
        staleTime: 5 * 60 * 1000,
    });
};

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–∞
export const useParticipantInvoices = (participantId: string) => {
    return useQuery({
        queryKey: ['invoices', 'participant', participantId],
        queryFn: () => invoicesAPI.getInvoices({ participant_id: participantId }),
        enabled: !!participantId,
        staleTime: 5 * 60 * 1000,
    });
};

// –•—É–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ –ø–æ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—É
export const useWorkshopInvoices = (workshopId: string) => {
    return useQuery({
        queryKey: ['invoices', 'workshop', workshopId],
        queryFn: () => invoicesAPI.getInvoices({ master_class_id: workshopId }),
        enabled: !!workshopId,
        staleTime: 5 * 60 * 1000,
    });
};

// –•—É–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—á–∞—Å—Ç–∏—è –≤ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–µ
export const useWorkshopParticipation = (workshopId: string, participantId: string) => {
    return useQuery({
        queryKey: ['invoices', 'workshop', workshopId, 'participant', participantId],
        queryFn: () => invoicesAPI.getInvoices({
            master_class_id: workshopId,
            participant_id: participantId
        }),
        enabled: !!workshopId && !!participantId,
        staleTime: 5 * 60 * 1000,
    });
};
