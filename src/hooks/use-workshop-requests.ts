/**
 * @file: src/hooks/use-workshop-requests.ts
 * @description: –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞—è–≤–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
 * @dependencies: api.ts, types/index.ts
 * @created: 2024-12-19
 */

import { useState, useCallback } from 'react';
import { api } from '@/lib/api';
import {
    WorkshopRequest,
    CreateWorkshopRequestData,
    UpdateWorkshopRequestData,
    WorkshopRequestWithParent,
    ApiResponse
} from '@/types';

export const useWorkshopRequests = () => {
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞—è–≤–∫–∏
    const createRequest = useCallback(async (data: CreateWorkshopRequestData): Promise<ApiResponse<WorkshopRequest> | null> => {
        setLoading(true);
        setError(null);

        try {
            console.log('üîç useWorkshopRequests.createRequest: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É:', data);
            const response = await api.post('/workshop-requests', data);
            console.log('‚úÖ useWorkshopRequests.createRequest: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.data);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            if (response.data && typeof response.data === 'object') {
                if ('success' in response.data) {
                    setError(null);
                    return response.data as ApiResponse<WorkshopRequest>;
                } else {
                    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                    const wrappedResponse: ApiResponse<WorkshopRequest> = {
                        success: true,
                        data: response.data as WorkshopRequest,
                        message: '–ó–∞—è–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
                    };
                    setError(null);
                    return wrappedResponse;
                }
            }

            setError(null);
            return null;
        } catch (err: unknown) {
            console.error('‚ùå useWorkshopRequests.createRequest: –û—à–∏–±–∫–∞:', err);
            const error = err as { response?: { data?: { error?: string } }; message?: string };
            console.log('üìã useWorkshopRequests.createRequest: –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', {
                status: error.response?.data?.error,
                message: error.message
            });
            const errorMessage = error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É';
            setError(errorMessage);
            return {
                success: false,
                error: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    const getAllRequests = useCallback(async (): Promise<ApiResponse<WorkshopRequestWithParent[]> | null> => {
        setLoading(true);
        setError(null);

        try {
            console.log('üîç useWorkshopRequests.getAllRequests: –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –≤—Å–µ –∑–∞—è–≤–∫–∏...');
            console.log('üîç useWorkshopRequests.getAllRequests: API URL:', `${import.meta.env.VITE_API_URL || 'http://localhost:3001/api'}/workshop-requests`);
            console.log('üîç useWorkshopRequests.getAllRequests: –¢–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', !!localStorage.getItem('authToken'));

            const response = await api.get('/workshop-requests');
            console.log('‚úÖ useWorkshopRequests.getAllRequests: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç:', response.data);
            console.log('‚úÖ useWorkshopRequests.getAllRequests: –¢–∏–ø response.data:', typeof response.data);
            console.log('‚úÖ useWorkshopRequests.getAllRequests: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ response.data:', Object.keys(response.data || {}));

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
            if (response.data && typeof response.data === 'object') {
                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                if ('success' in response.data && 'data' in response.data) {
                    console.log('‚úÖ useWorkshopRequests.getAllRequests: –û—Ç–≤–µ—Ç –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ');
                    setLoading(false);
                    return response.data as ApiResponse<WorkshopRequestWithParent[]>;
                }

                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤ –Ω–∞–ø—Ä—è–º—É—é
                if (Array.isArray(response.data)) {
                    console.log('‚úÖ useWorkshopRequests.getAllRequests: –û—Ç–≤–µ—Ç - –º–∞—Å—Å–∏–≤, –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä—É');
                    const wrappedResponse: ApiResponse<WorkshopRequestWithParent[]> = {
                        success: true,
                        data: response.data,
                        message: '–ó–∞—è–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
                    };
                    setLoading(false);
                    return wrappedResponse;
                }

                // –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç - –æ–±—ä–µ–∫—Ç —Å –¥–∞–Ω–Ω—ã–º–∏, –Ω–æ –±–µ–∑ success
                if ('data' in response.data && Array.isArray(response.data.data)) {
                    console.log('‚úÖ useWorkshopRequests.getAllRequests: –û—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç data –º–∞—Å—Å–∏–≤, –¥–æ–±–∞–≤–ª—è–µ–º success');
                    const wrappedResponse: ApiResponse<WorkshopRequestWithParent[]> = {
                        success: true,
                        data: response.data.data,
                        message: '–ó–∞—è–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
                    };
                    setLoading(false);
                    return wrappedResponse;
                }
            }

            console.log('‚ö†Ô∏è useWorkshopRequests.getAllRequests: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
            setLoading(false);
            return null;

        } catch (error) {
            console.error('‚ùå useWorkshopRequests.getAllRequests: –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞—è–≤–æ–∫:', error);
            setError(error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
            setLoading(false);
            return null;
        }
    }, []);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ —Ä–æ–¥–∏—Ç–µ–ª—è
    const getMyRequests = useCallback(async (): Promise<ApiResponse<WorkshopRequest[]> | null> => {
        setLoading(true);
        setError(null);

        try {
            const response = await api.get('/workshop-requests/my');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            if (response.data && typeof response.data === 'object') {
                if ('success' in response.data) {
                    setError(null);
                    return response.data as ApiResponse<WorkshopRequest[]>;
                } else if (Array.isArray(response.data)) {
                    const wrappedResponse: ApiResponse<WorkshopRequest[]> = {
                        success: true,
                        data: response.data,
                        message: '–ó–∞—è–≤–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ'
                    };
                    setError(null);
                    return wrappedResponse;
                }
            }

            setError(null);
            return null;
        } catch (err: unknown) {
            const error = err as { response?: { data?: { error?: string } }; message?: string };
            const errorMessage = error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫–∏';
            setError(errorMessage);
            return {
                success: false,
                error: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –ø–æ ID
    const getRequestById = useCallback(async (id: string): Promise<ApiResponse<WorkshopRequest> | null> => {
        setLoading(true);
        setError(null);

        try {
            const response = await api.get(`/workshop-requests/${id}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            if (response.data && typeof response.data === 'object') {
                if ('success' in response.data) {
                    setError(null);
                    return response.data as ApiResponse<WorkshopRequest>;
                } else {
                    const wrappedResponse: ApiResponse<WorkshopRequest> = {
                        success: true,
                        data: response.data as WorkshopRequest,
                        message: '–ó–∞—è–≤–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
                    };
                    setError(null);
                    return wrappedResponse;
                }
            }

            setError(null);
            return null;
        } catch (err: unknown) {
            const error = err as { response?: { data?: { error?: string } }; message?: string };
            const errorMessage = error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞—è–≤–∫—É';
            setError(errorMessage);
            return {
                success: false,
                error: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    const updateRequestStatus = useCallback(async (
        id: string,
        data: UpdateWorkshopRequestData
    ): Promise<ApiResponse<WorkshopRequest> | null> => {
        setLoading(true);
        setError(null);

        try {
            const response = await api.patch(`/workshop-requests/${id}/status`, data);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            if (response.data && typeof response.data === 'object') {
                if ('success' in response.data) {
                    setError(null);
                    return response.data as ApiResponse<WorkshopRequest>;
                } else {
                    const wrappedResponse: ApiResponse<WorkshopRequest> = {
                        success: true,
                        data: response.data as WorkshopRequest,
                        message: '–°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ'
                    };
                    setError(null);
                    return wrappedResponse;
                }
            }

            setError(null);
            return null;
        } catch (err: unknown) {
            const error = err as { response?: { data?: { error?: string } }; message?: string };
            const errorMessage = error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞—è–≤–∫—É';
            setError(errorMessage);
            return {
                success: false,
                error: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    const deleteRequest = useCallback(async (id: string): Promise<ApiResponse<boolean> | null> => {
        setLoading(true);
        setError(null);

        try {
            const response = await api.delete(`/workshop-requests/${id}`);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            if (response.data && typeof response.data === 'object') {
                if ('success' in response.data) {
                    setError(null);
                    return response.data as ApiResponse<boolean>;
                } else {
                    const wrappedResponse: ApiResponse<boolean> = {
                        success: true,
                        data: Boolean(response.data),
                        message: '–ó–∞—è–≤–∫–∞ —É–¥–∞–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
                    };
                    setError(null);
                    return wrappedResponse;
                }
            }

            setError(null);
            return null;
        } catch (err: unknown) {
            const error = err as { response?: { data?: { error?: string } }; message?: string };
            const errorMessage = error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞—è–≤–∫—É';
            setError(errorMessage);
            return {
                success: false,
                error: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
    const getRequestsStats = useCallback(async (): Promise<ApiResponse<{
        total: number;
        pending: number;
        approved: number;
        rejected: number;
    }> | null> => {
        setLoading(true);
        setError(null);

        try {
            const response = await api.get('/workshop-requests/stats/overview');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –ø–æ–ª—è
            if (response.data && typeof response.data === 'object') {
                if ('success' in response.data) {
                    setError(null);
                    return response.data as ApiResponse<{
                        total: number;
                        pending: number;
                        approved: number;
                        rejected: number;
                    }>;
                } else if ('total' in response.data && 'pending' in response.data && 'approved' in response.data && 'rejected' in response.data) {
                    const wrappedResponse: ApiResponse<{
                        total: number;
                        pending: number;
                        approved: number;
                        rejected: number;
                    }> = {
                        success: true,
                        data: response.data as {
                            total: number;
                            pending: number;
                            approved: number;
                            rejected: number;
                        },
                        message: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ'
                    };
                    setError(null);
                    return wrappedResponse;
                }
            }

            setError(null);
            return null;
        } catch (err: unknown) {
            const error = err as { response?: { data?: { error?: string } }; message?: string };
            const errorMessage = error.response?.data?.error || '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É';
            setError(errorMessage);
            return {
                success: false,
                error: errorMessage
            };
        } finally {
            setLoading(false);
        }
    }, []);

    // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
    const clearError = useCallback(() => {
        setError(null);
    }, []);

    return {
        loading,
        error,
        createRequest,
        getAllRequests,
        getMyRequests,
        getRequestById,
        updateRequestStatus,
        deleteRequest,
        getRequestsStats,
        clearError
    };
};
