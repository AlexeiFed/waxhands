/**
 * @file: src/hooks/use-chat.ts
 * @description: –•—É–∫ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–æ–º –º–µ–∂–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
 * @dependencies: chat-api.ts, types/chat.ts
 * @created: 2024-12-19
 */

import { useState, useEffect, useCallback, useRef, useMemo } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { chatApi } from '../lib/chat-api';
import { Chat, ChatMessage, CreateChatRequest, SendMessageRequest, MessageReadStatus } from '../types/chat';
import { useAuth } from '../contexts/AuthContext';
import { useToast } from './use-toast';
import { useNotificationSound } from './use-notification-sound';
import { WS_BASE_URL } from '../lib/config';

export const useChat = (userId?: string) => {
    const { user } = useAuth();
    const { toast } = useToast();
    const queryClient = useQueryClient();
    const { playMessageSound } = useNotificationSound();
    const [selectedChat, setSelectedChat] = useState<Chat | null>(null);
    const [message, setMessage] = useState('');
    const messagesEndRef = useRef<HTMLDivElement>(null);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —á–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const {
        data: chatsData,
        isLoading: isLoadingChats,
        error: chatsError,
        refetch: refetchChats
    } = useQuery({
        queryKey: ['chats', userId],
        queryFn: async () => {
            if (!userId) throw new Error('User ID required');
            console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —á–∞—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', userId);
            const result = await chatApi.getUserChats(userId);
            console.log('üì° –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API:', result);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ undefined
            if (!result || !result.chats) {
                console.error('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:', result);
                throw new Error('Invalid response format');
            }
            console.log('‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞–ª–∏–¥–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞—é:', result);
            return result;
        },
        enabled: !!userId,
        refetchInterval: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        retry: 1, // –ü—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        retryDelay: 5000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        retryOnMount: false, // –ù–µ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
        staleTime: 5 * 60 * 1000, // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏ 5 –º–∏–Ω—É—Ç
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —á–∞—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    useEffect(() => {
        if (chatsData?.chats && chatsData.chats.length > 0 && !selectedChat) {
            const firstChat = chatsData.chats[0];
            console.log('üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞—é –ø–µ—Ä–≤—ã–π —á–∞—Ç:', firstChat);
            setSelectedChat(firstChat);
        }
    }, [chatsData, selectedChat]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    const {
        data: messagesData,
        isLoading: isLoadingMessages,
        error: messagesError,
        refetch: refetchMessages
    } = useQuery({
        queryKey: ['chat-messages', selectedChat?.id],
        queryFn: async () => {
            if (!selectedChat?.id) throw new Error('Chat ID required');
            console.log('üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —á–∞—Ç–∞:', selectedChat.id);
            const result = await chatApi.getChatMessages(selectedChat.id);
            console.log('üì° –ü–æ–ª—É—á–µ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏—è:', result);
            return result;
        },
        enabled: !!selectedChat?.id,
        refetchInterval: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        retry: 1,
        retryDelay: 5000,
        retryOnMount: false,
        staleTime: 2 * 60 * 1000, // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏ 2 –º–∏–Ω—É—Ç—ã
        gcTime: 5 * 60 * 1000, // –ö—ç—à —Ö—Ä–∞–Ω–∏—Ç—Å—è 5 –º–∏–Ω—É—Ç
    });



    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    const {
        data: unreadData,
        refetch: refetchUnread
    } = useQuery({
        queryKey: ['chatUnread', userId],
        queryFn: async () => {
            if (!userId) throw new Error('User ID required');
            const result = await chatApi.getUnreadCount(userId);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ undefined
            if (!result || typeof result.unreadTotal !== 'number') {
                throw new Error('Invalid response format');
            }
            return result;
        },
        enabled: !!userId,
        refetchInterval: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        retry: 1, // –ü—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        retryDelay: 10000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
    useEffect(() => {
        if (selectedChat?.id && messagesData?.messages && messagesData.messages.length > 0) {
            console.log('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', selectedChat.id);
            // –û—Ç–º–µ—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            chatApi.markAsRead({
                chatId: selectedChat.id,
                userId: userId || ''
            }).then(() => {
                console.log('‚úÖ –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞:', selectedChat.id);
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö
                refetchUnread();
            }).catch((error) => {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ:', error);
            });
        }
    }, [selectedChat?.id, messagesData?.messages, userId, refetchUnread]);

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    const createChatMutation = useMutation({
        mutationFn: chatApi.createChat,
        onSuccess: (data) => {
            console.log('‚úÖ –ß–∞—Ç —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ:', data);
            toast({
                title: "–ß–∞—Ç —Å–æ–∑–¥–∞–Ω! üí¨",
                description: "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É",
            });
            console.log('üîÑ –û–±–Ω–æ–≤–ª—è—é —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...');
            refetchChats();
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á–∞—Ç
            if (data && data.chatId) {
                console.log('üéØ –°–æ–∑–¥–∞—é –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞...');
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç —á–∞—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                const tempChat: Chat = {
                    id: data.chatId,
                    userId: userId || '',
                    adminId: undefined,
                    status: 'pending',
                    createdAt: new Date().toISOString(),
                    updatedAt: new Date().toISOString(),
                    lastMessageAt: new Date().toISOString(),
                    user: {
                        id: userId || '',
                        name: `${user?.name ?? ''} ${user?.surname ?? ''}`.trim(),
                        email: '',
                        role: 'parent'
                    },
                    admin: {
                        id: '',
                        name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä',
                        email: '',
                        role: 'admin'
                    },
                    unreadCount: 0
                };
                console.log('üíæ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç:', tempChat);
                setSelectedChat(tempChat);
            }
        },
        onError: (error) => {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                variant: "destructive",
            });
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessageMutation = useMutation({
        mutationFn: chatApi.sendMessage,
        onSuccess: () => {
            setMessage('');
            refetchMessages();
            refetchChats();
            refetchUnread();
            scrollToBottom();
        },
        onError: (error) => {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                variant: "destructive",
            });
        }
    });

    // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
    const createChat = useCallback(async (message: string) => {
        if (!userId || !message.trim()) return;

        await createChatMutation.mutateAsync({
            userId,
            message: message.trim()
        });
    }, [userId, createChatMutation]);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessage = useCallback(async (message: string) => {
        if (!selectedChat?.id || !message.trim()) {
            console.error('‚ùå –ù–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:', { selectedChatId: selectedChat?.id, message: message.trim() });
            return;
        }

        try {
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ:', { chatId: selectedChat.id, message: message.trim() });
            await sendMessageMutation.mutateAsync({
                chatId: selectedChat.id,
                message: message.trim()
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ sendMessageMutation.onError
        }
    }, [selectedChat?.id, sendMessageMutation]);

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
    const scrollToBottom = useCallback(() => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, []);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    useEffect(() => {
        scrollToBottom();

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –æ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        if (messagesData?.messages && messagesData.messages.length > 0) {
            const lastMessage = messagesData.messages[messagesData.messages.length - 1];
            // –ó–≤—É–∫ –∏–≥—Ä–∞–µ—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ—Ç —Å–µ–±—è)
            if (lastMessage.senderType !== 'user' && selectedChat) {
                playMessageSound();
            }
        }
    }, [messagesData?.messages, scrollToBottom, playMessageSound, selectedChat]);

    // –£–º–Ω–æ–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –∞–∫—Ç–∏–≤–Ω–æ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏
    // WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–º–µ–Ω—è–µ—Ç polling)
    useEffect(() => {
        if (!selectedChat?.id) return;

        console.log('üîå WebSocket: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π...');

        // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º polling –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤

        console.log('‚è∏Ô∏è Polling —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–∫–ª—é—á–µ–Ω - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ WebSocket —Ä–µ–∂–∏–º');
    }, [selectedChat?.id]);

    // WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ (–∑–∞–º–µ–Ω—è–µ—Ç polling)
    useEffect(() => {
        console.log('üîå WebSocket: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤...');

        // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º polling –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤

        console.log('‚è∏Ô∏è Polling —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –æ—Ç–∫–ª—é—á–µ–Ω - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ WebSocket —Ä–µ–∂–∏–º');
    }, [refetchChats, unreadData?.unreadTotal]);

    // WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∑–∞–º–µ–Ω—è–µ—Ç polling)
    useEffect(() => {
        if (!userId) return;

        console.log('üîå WebSocket: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö...');

        // TODO: –ó–¥–µ—Å—å –±—É–¥–µ—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        // –ü–æ–∫–∞ –æ—Ç–∫–ª—é—á–∞–µ–º polling –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤

        console.log('‚è∏Ô∏è Polling –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –æ—Ç–∫–ª—é—á–µ–Ω - –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ WebSocket —Ä–µ–∂–∏–º');
    }, [userId, refetchUnread]);

    // –ú–µ–º–æ–∏–∑–∏—Ä—É–µ–º selectedChat –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏—à–Ω–∏—Ö –ø–µ—Ä–µ—Ä–µ–Ω–¥–µ—Ä–æ–≤
    const memoizedSelectedChat = useMemo(() => selectedChat, [selectedChat]);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è selectedChat
    useEffect(() => {
        if (memoizedSelectedChat !== selectedChat) {
            console.log('üéØ selectedChat –∏–∑–º–µ–Ω–∏–ª—Å—è:', selectedChat);
            setSelectedChat(memoizedSelectedChat);
        }
    }, [memoizedSelectedChat, selectedChat]);

    // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è chatsData
    useEffect(() => {
        console.log('üìä chatsData –∏–∑–º–µ–Ω–∏–ª—Å—è:', chatsData);
    }, [chatsData]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á–∞—Ç–æ–≤
    useEffect(() => {
        console.log('üîç useEffect - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —á–∞—Ç–æ–≤:', {
            chatsError,
            chatsData: chatsData ? `${chatsData.chats?.length || 0} —á–∞—Ç–æ–≤` : '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö',
            isLoadingChats,
            userId
        });

        if (chatsError && !chatsData && !isLoadingChats) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º—Å—è
            // –ò —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ
            const errorKey = `chat-error-${userId}`;
            if (!localStorage.getItem(errorKey)) {
                console.log('üö® –ü–æ–∫–∞–∑—ã–≤–∞—é –æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤');
                toast({
                    title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤",
                    description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    variant: "destructive",
                });
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞
                localStorage.setItem(errorKey, 'true');
                // –ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É —Å–Ω–æ–≤–∞
                setTimeout(() => localStorage.removeItem(errorKey), 30000);
            }
        }
    }, [chatsError, chatsData, isLoadingChats, userId, toast]);

    useEffect(() => {
        if (messagesError && !isLoadingMessages) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º—Å—è
            // –ò —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
            const errorKey = `messages-error-${selectedChat?.id}`;
            if (!localStorage.getItem(errorKey)) {
                toast({
                    title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
                    description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    variant: "destructive",
                });
                // –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –æ—à–∏–±–∫–∞ —É–∂–µ –ø–æ–∫–∞–∑–∞–Ω–∞
                localStorage.setItem(errorKey, 'true');
                // –ß–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ —Ä–∞–∑—Ä–µ—à–∞–µ–º –ø–æ–∫–∞–∑–∞—Ç—å –æ—à–∏–±–∫—É —Å–Ω–æ–≤–∞
                setTimeout(() => localStorage.removeItem(errorKey), 30000);
            }
        }
    }, [messagesError, isLoadingMessages, selectedChat?.id, toast]);

    return {
        // –î–∞–Ω–Ω—ã–µ
        chats: chatsData?.chats || [],
        messages: messagesData?.messages || [],
        selectedChat,
        unreadCount: unreadData?.unreadTotal || 0,

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        isLoadingChats,
        isLoadingMessages,
        message,

        // –î–µ–π—Å—Ç–≤–∏—è
        setSelectedChat,
        setMessage,
        createChat,
        sendMessage,
        refetchChats,
        refetchMessages,
        refetchUnread,

        // –£—Ç–∏–ª–∏—Ç—ã
        messagesEndRef,
        scrollToBottom,

        // –ú—É—Ç–∞—Ü–∏–∏
        isCreatingChat: createChatMutation.isPending,
        isSendingMessage: sendMessageMutation.isPending,
    };
};

// –•—É–∫ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
export const useAdminChat = (externalSelectedChat?: Chat | null) => {
    const { toast } = useToast();
    const { user } = useAuth();
    const { playMessageSound } = useNotificationSound();
    const [selectedChat, setSelectedChat] = useState<Chat | null>(null);
    const [statusFilter, setStatusFilter] = useState<string>('all');

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π selectedChat –µ—Å–ª–∏ –æ–Ω –ø–µ—Ä–µ–¥–∞–Ω, –∏–Ω–∞—á–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π
    const currentSelectedChat = externalSelectedChat || selectedChat;

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —á–∞—Ç–æ–≤
    const {
        data: chatsData,
        isLoading: isLoadingChats,
        error: chatsError,
        refetch: refetchChats
    } = useQuery({
        queryKey: ['adminChats', statusFilter],
        queryFn: async () => {
            console.log('üîç useAdminChat: queryFn –≤—ã–∑–≤–∞–Ω —Å statusFilter:', statusFilter);
            const result = await chatApi.getAllChats(statusFilter);
            console.log('üîç useAdminChat: API —Ä–µ–∑—É–ª—å—Ç–∞—Ç:', result);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ undefined –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (!result) {
                console.error('‚ùå useAdminChat: –ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç API');
                throw new Error('Empty response from API');
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (!result.chats) {
                console.error('‚ùå useAdminChat: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:', result);
                throw new Error('Invalid response format');
            }

            console.log('‚úÖ useAdminChat: –î–∞–Ω–Ω—ã–µ —á–∞—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω—ã:', {
                total: result.total,
                chatsCount: result.chats?.length,
                unreadTotal: result.unreadTotal
            });

            return result;
        },
        refetchInterval: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        retry: 1, // –ü—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        retryDelay: 5000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
        staleTime: 2 * 60 * 1000, // –î–∞–Ω–Ω—ã–µ —Å—á–∏—Ç–∞—é—Ç—Å—è —Å–≤–µ–∂–∏–º–∏ 2 –º–∏–Ω—É—Ç—ã
    });

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —á–∞—Ç–æ–≤ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    useEffect(() => {
        console.log('üöÄ useAdminChat hook mounted, fetching chats...');
        refetchChats();
    }, [refetchChats]);

    // –õ–æ–≥–∏—Ä—É–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —á–∞—Ç–æ–≤
    useEffect(() => {
        console.log('üìä useAdminChat: –°–æ—Å—Ç–æ—è–Ω–∏–µ —á–∞—Ç–æ–≤ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å:', {
            chatsData,
            isLoadingChats,
            chatsError,
            statusFilter
        });
    }, [chatsData, isLoadingChats, chatsError, statusFilter]);

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞
    const {
        data: messagesData,
        isLoading: isLoadingMessages,
        error: messagesError,
        refetch: refetchMessages
    } = useQuery({
        queryKey: ['adminChatMessages', currentSelectedChat?.id],
        queryFn: async () => {
            if (!currentSelectedChat?.id) throw new Error('Chat ID required');
            const result = await chatApi.getChatMessages(currentSelectedChat.id);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –Ω–µ undefined –∏ –∏–º–µ—é—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            if (!result || !result.messages) {
                console.error('‚ùå useAdminChat: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π:', result);
                throw new Error('Invalid response format for messages');
            }

            return result;
        },
        enabled: !!currentSelectedChat?.id,
        refetchInterval: false, // –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        retry: 1, // –ü—Ä–æ–±—É–µ–º —Ç–æ–ª—å–∫–æ 1 —Ä–∞–∑ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        retryDelay: 3000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–æ–º
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessageMutation = useMutation({
        mutationFn: chatApi.sendMessage,
        onSuccess: () => {
            refetchMessages();
            refetchChats();
        },
        onError: (error) => {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                variant: "destructive",
            });
        }
    });

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
    const updateStatusMutation = useMutation({
        mutationFn: chatApi.updateChatStatus,
        onSuccess: () => {
            toast({
                title: "–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω! ‚úÖ",
                description: "–°—Ç–∞—Ç—É—Å —á–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω",
            });
            refetchChats();
        },
        onError: (error) => {
            toast({
                title: "–û—à–∏–±–∫–∞",
                description: "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å —á–∞—Ç–∞",
                variant: "destructive",
            });
        }
    });

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    const sendMessage = useCallback(async (message: string) => {
        if (!currentSelectedChat?.id || !message.trim()) return;

        try {
            console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:', {
                chatId: currentSelectedChat.id,
                message: message.trim()
            });

            await sendMessageMutation.mutateAsync({
                chatId: currentSelectedChat.id,
                message: message.trim()
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–æ–º:', error);
            // –û—à–∏–±–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ sendMessageMutation.onError
        }
    }, [currentSelectedChat?.id, sendMessageMutation]);

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —á–∞—Ç–∞
    const updateChatStatus = useCallback(async (chatId: string, status: 'active' | 'closed' | 'pending') => {
        if (!user?.id) return;

        await updateStatusMutation.mutateAsync({
            chatId,
            status,
            adminId: user.id
        });
    }, [updateStatusMutation, user?.id]);

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    useEffect(() => {
        if (chatsError && !isLoadingChats) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º—Å—è
            const errorKey = `admin-chats-error-${statusFilter}`;
            if (!localStorage.getItem(errorKey)) {
                toast({
                    title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤",
                    description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    variant: "destructive",
                });
                localStorage.setItem(errorKey, 'true');
                setTimeout(() => localStorage.removeItem(errorKey), 30000);
            }
        }
    }, [chatsError, isLoadingChats, statusFilter, toast]);

    useEffect(() => {
        if (messagesError && !isLoadingMessages) {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞–µ–º—Å—è
            const errorKey = `admin-messages-error-${currentSelectedChat?.id}`;
            if (!localStorage.getItem(errorKey)) {
                toast({
                    title: "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π",
                    description: "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    variant: "destructive",
                });
                localStorage.setItem(errorKey, 'true');
                setTimeout(() => localStorage.removeItem(errorKey), 30000);
            }
        }
    }, [messagesError, isLoadingMessages, currentSelectedChat?.id, toast]);

    // WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    useEffect(() => {
        if (!currentSelectedChat?.id || !user?.id) return;

        console.log('üîå WebSocket: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

        // –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const host = window.location.host;
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è WebSocket - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è backend
        const wsUrl = `${WS_BASE_URL}/api/chat/ws?userId=${user.id}&isAdmin=true`;

        console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket URL:', wsUrl);

        const ws = new WebSocket(wsUrl);

        ws.onopen = () => {
            console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞
            ws.send(JSON.stringify({
                type: 'subscribe',
                channels: [`chat:${currentSelectedChat.id}`]
            }));
        };

        ws.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);

                if (message.type === 'chat_message' && message.data.chatId === currentSelectedChat.id) {
                    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ WebSocket, –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                    refetchMessages();
                    refetchChats();
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
            }
        };

        ws.onerror = (error) => {
            console.warn('‚ö†Ô∏è WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        };

        ws.onclose = (event) => {
            console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', event.code, event.reason);
        };

        return () => {
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            if (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING) {
                ws.close();
            }
        };
    }, [currentSelectedChat?.id, user?.id, refetchMessages, refetchChats]);

    // WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    useEffect(() => {
        if (!user?.id) return;

        console.log('üîå WebSocket: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...');

        // –°–æ–∑–¥–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤
        const protocol = window.location.protocol === 'https:' ? 'wss:' : 'ws:';
        const host = window.location.host;
        // –ò—Å–ø—Ä–∞–≤–ª—è–µ–º URL –¥–ª—è WebSocket - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è backend
        const wsUrl = `${WS_BASE_URL}/api/chat/ws?userId=${user.id}&isAdmin=true`;

        console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WebSocket URL –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:', wsUrl);

        const ws = new WebSocket(wsUrl);

        ws.onopen = () => {
            console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤
            ws.send(JSON.stringify({
                type: 'subscribe',
                channels: ['admin_chats']
            }));
        };

        ws.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);

                if (message.type === 'chat_message' || message.type === 'chat_status_change') {
                    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ —á–µ—Ä–µ–∑ WebSocket, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫...');
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                    refetchChats();
                }
            } catch (error) {
                console.warn('‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebSocket —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤:', error);
            }
        };

        ws.onerror = (error) => {
            console.warn('‚ö†Ô∏è WebSocket –æ—à–∏–±–∫–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', error);
        };

        ws.onclose = (event) => {
            console.log('üîå WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', event.code, event.reason);
        };

        return () => {
            console.log('üîå –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–ª—è —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
            if (ws.readyState === WebSocket.OPEN || ws.readyState === WebSocket.CONNECTING) {
                ws.close();
            }
        };
    }, [user?.id, refetchChats]);

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    useEffect(() => {
        if (messagesData?.messages && messagesData.messages.length > 0) {
            const lastMessage = messagesData.messages[messagesData.messages.length - 1];
            // –ó–≤—É–∫ –∏–≥—Ä–∞–µ—Ç –∫–æ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –æ—Ç —Å–µ–±—è)
            if (lastMessage.senderType === 'user' && currentSelectedChat) {
                playMessageSound();
            }
        }
    }, [messagesData?.messages, playMessageSound, currentSelectedChat]);

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
    const getMessageReadStatus = (message: ChatMessage): MessageReadStatus => {
        if (message.senderType === 'user') {
            // –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
            return message.isRead ? 'read' : 'delivered';
        } else {
            // –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏
            return 'sent';
        }
    };

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
    useEffect(() => {
        if (currentSelectedChat?.id && messagesData?.messages && messagesData.messages.length > 0) {
            console.log('üîç –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –¥–ª—è —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:', currentSelectedChat.id);

            // –û—Ç–º–µ—á–∞–µ–º –≤—Å–µ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
            const unreadMessages = messagesData.messages.filter(
                msg => msg.senderType === 'user' && !msg.isRead
            );

            if (unreadMessages.length > 0) {
                console.log(`üìñ –û—Ç–º–µ—á–∞–µ–º ${unreadMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ`);

                // –û—Ç–º–µ—á–∞–µ–º –∫–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
                Promise.all(
                    unreadMessages.map(msg =>
                        chatApi.markMessageAsRead({
                            messageId: msg.id,
                            chatId: currentSelectedChat.id,
                            readerId: user?.id || '',
                            readerRole: 'admin'
                        })
                    )
                ).then(() => {
                    console.log('‚úÖ –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ—á–µ–Ω—ã –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–∞—Ç–∞
                    refetchMessages();
                }).catch((error) => {
                    console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', error);
                });
            }

            // –¢–∞–∫–∂–µ –æ—Ç–º–µ—á–∞–µ–º –≤–µ—Å—å —á–∞—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π
            chatApi.markAsRead({
                chatId: currentSelectedChat.id,
                userId: currentSelectedChat.userId
            }).then(() => {
                console.log('‚úÖ –ß–∞—Ç –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º');
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
                refetchChats();
            }).catch((error) => {
                console.warn('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å —á–∞—Ç –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:', error);
            });
        }
    }, [currentSelectedChat?.id, currentSelectedChat?.userId, messagesData?.messages, refetchChats, refetchMessages, user?.id]);

    return {
        // –î–∞–Ω–Ω—ã–µ
        chats: chatsData?.chats || [],
        messages: messagesData?.messages || [],
        selectedChat: currentSelectedChat,
        statusFilter,

        // –°–æ—Å—Ç–æ—è–Ω–∏–µ
        isLoadingChats,
        isLoadingMessages,

        // –î–µ–π—Å—Ç–≤–∏—è
        setSelectedChat,
        setStatusFilter,
        sendMessage,
        updateChatStatus,
        refetchChats,
        refetchMessages,

        // –£—Ç–∏–ª–∏—Ç—ã
        getMessageReadStatus,

        // –ú—É—Ç–∞—Ü–∏–∏
        isSendingMessage: sendMessageMutation.isPending,
        isUpdatingStatus: updateStatusMutation.isPending,

        // –í—Ä–µ–º–µ–Ω–Ω—ã–µ –ª–æ–≥–∏ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        _debug: {
            chatsData,
            messagesData,
            chatsError,
            messagesError,
            statusFilter,
            currentSelectedChat
        }
    };
};

